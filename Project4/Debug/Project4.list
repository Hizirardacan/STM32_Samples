
Project4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a83c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800aa10  0800aa10  0000ba10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae60  0800ae60  0000c314  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae60  0800ae60  0000be60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae68  0800ae68  0000c314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae68  0800ae68  0000be68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae6c  0800ae6c  0000be6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ae70  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  0800b044  0000c1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  0800b0e4  0000c274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000868  20000314  0800b184  0000c314  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000b7c  0800b184  0000cb7c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000c314  2**0
                  CONTENTS, READONLY
 14 .debug_info   000154ee  00000000  00000000  0000c344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e88  00000000  00000000  00021832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001058  00000000  00000000  000246c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c85  00000000  00000000  00025718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028b4d  00000000  00000000  0002639d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014998  00000000  00000000  0004eeea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f7291  00000000  00000000  00063882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015ab13  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000587c  00000000  00000000  0015ab58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  001603d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000314 	.word	0x20000314
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a9f4 	.word	0x0800a9f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000318 	.word	0x20000318
 800020c:	0800a9f4 	.word	0x0800a9f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	0000      	movs	r0, r0
	...

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f000 ff6e 	bl	8001f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f945 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 fad9 	bl	80015f0 <MX_GPIO_Init>
  MX_ETH_Init();
 800103e:	f000 fa2b 	bl	8001498 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001042:	f000 fa77 	bl	8001534 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001046:	f000 faa5 	bl	8001594 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800104a:	f000 f9a9 	bl	80013a0 <MX_ADC1_Init>
  MX_DAC_Init();
 800104e:	f000 f9f9 	bl	8001444 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001052:	2100      	movs	r1, #0
 8001054:	488a      	ldr	r0, [pc, #552]	@ (8001280 <main+0x258>)
 8001056:	f001 fd0e 	bl	8002a76 <HAL_DAC_Start>


 float tot = 0;
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	f241 0204 	movw	r2, #4100	@ 0x1004
 8001062:	443a      	add	r2, r7
 8001064:	6013      	str	r3, [r2, #0]
 short i = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	f241 0202 	movw	r2, #4098	@ 0x1002
 800106c:	443a      	add	r2, r7
 800106e:	8013      	strh	r3, [r2, #0]
 float tot_arr[1024];
 static bool buffer_full = false;

   HAL_UART_Receive_IT(&huart3, rx_buff, 3);
 8001070:	2203      	movs	r2, #3
 8001072:	4984      	ldr	r1, [pc, #528]	@ (8001284 <main+0x25c>)
 8001074:	4884      	ldr	r0, [pc, #528]	@ (8001288 <main+0x260>)
 8001076:	f003 fec2 	bl	8004dfe <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /*Wait for Receive Interrupt*/
if(rx_flag){
 800107a:	4b84      	ldr	r3, [pc, #528]	@ (800128c <main+0x264>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d037      	beq.n	80010f2 <main+0xca>
	  var = 4095.0f - (value / 3.3f) * 4095.0f;
 8001082:	4b83      	ldr	r3, [pc, #524]	@ (8001290 <main+0x268>)
 8001084:	ed93 7a00 	vldr	s14, [r3]
 8001088:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8001294 <main+0x26c>
 800108c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001090:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8001298 <main+0x270>
 8001094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001098:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8001298 <main+0x270>
 800109c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a4:	ee17 2a90 	vmov	r2, s15
 80010a8:	4b7c      	ldr	r3, [pc, #496]	@ (800129c <main+0x274>)
 80010aa:	601a      	str	r2, [r3, #0]
	 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//red OFF
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010b2:	487b      	ldr	r0, [pc, #492]	@ (80012a0 <main+0x278>)
 80010b4:	f002 fb46 	bl	8003744 <HAL_GPIO_WritePin>
	 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //blue ON
 80010b8:	2201      	movs	r2, #1
 80010ba:	2180      	movs	r1, #128	@ 0x80
 80010bc:	4878      	ldr	r0, [pc, #480]	@ (80012a0 <main+0x278>)
 80010be:	f002 fb41 	bl	8003744 <HAL_GPIO_WritePin>
	 			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R,var);
 80010c2:	4b76      	ldr	r3, [pc, #472]	@ (800129c <main+0x274>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	486d      	ldr	r0, [pc, #436]	@ (8001280 <main+0x258>)
 80010cc:	f001 fd2a 	bl	8002b24 <HAL_DAC_SetValue>
	 		      HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	@ 0x64
 80010d2:	f000 ff7b 	bl	8001fcc <HAL_Delay>

	 		      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//red ON
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010dc:	4870      	ldr	r0, [pc, #448]	@ (80012a0 <main+0x278>)
 80010de:	f002 fb31 	bl	8003744 <HAL_GPIO_WritePin>
	 		      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //blue OFF
 80010e2:	2200      	movs	r2, #0
 80010e4:	2180      	movs	r1, #128	@ 0x80
 80010e6:	486e      	ldr	r0, [pc, #440]	@ (80012a0 <main+0x278>)
 80010e8:	f002 fb2c 	bl	8003744 <HAL_GPIO_WritePin>
	 		      rx_flag=0;
 80010ec:	4b67      	ldr	r3, [pc, #412]	@ (800128c <main+0x264>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
					}

/*Take VOLTAGE*/
	 		  	HAL_ADC_Start(&hadc1);
 80010f2:	486c      	ldr	r0, [pc, #432]	@ (80012a4 <main+0x27c>)
 80010f4:	f000 ffd2 	bl	800209c <HAL_ADC_Start>
	 		  	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	4869      	ldr	r0, [pc, #420]	@ (80012a4 <main+0x27c>)
 80010fe:	f001 f89b 	bl	8002238 <HAL_ADC_PollForConversion>

	 		  	readValue = HAL_ADC_GetValue(&hadc1);
 8001102:	4868      	ldr	r0, [pc, #416]	@ (80012a4 <main+0x27c>)
 8001104:	f001 f923 	bl	800234e <HAL_ADC_GetValue>
 8001108:	4603      	mov	r3, r0
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b66      	ldr	r3, [pc, #408]	@ (80012a8 <main+0x280>)
 800110e:	801a      	strh	r2, [r3, #0]
	 		  	voltage = (readValue * 3.30) / 4096.00;
 8001110:	4b65      	ldr	r3, [pc, #404]	@ (80012a8 <main+0x280>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa25 	bl	8000564 <__aeabi_i2d>
 800111a:	a357      	add	r3, pc, #348	@ (adr r3, 8001278 <main+0x250>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff fa8a 	bl	8000638 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <main+0x284>)
 8001132:	f7ff fbab 	bl	800088c <__aeabi_ddiv>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fd73 	bl	8000c28 <__aeabi_d2f>
 8001142:	4603      	mov	r3, r0
 8001144:	4a5a      	ldr	r2, [pc, #360]	@ (80012b0 <main+0x288>)
 8001146:	6013      	str	r3, [r2, #0]

	 		   if (buffer_full) {
 8001148:	4b5a      	ldr	r3, [pc, #360]	@ (80012b4 <main+0x28c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d017      	beq.n	8001180 <main+0x158>
	 		  	  	 	 	tot -= tot_arr[i];
 8001150:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001154:	443b      	add	r3, r7
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	f107 0208 	add.w	r2, r7, #8
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	3b08      	subs	r3, #8
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	f241 0304 	movw	r3, #4100	@ 0x1004
 800116c:	443b      	add	r3, r7
 800116e:	ed93 7a00 	vldr	s14, [r3]
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	f241 0304 	movw	r3, #4100	@ 0x1004
 800117a:	443b      	add	r3, r7
 800117c:	edc3 7a00 	vstr	s15, [r3]
	 		  	  	 	 	 }

	 		  	  	 	 tot_arr[i] = voltage;
 8001180:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001184:	443b      	add	r3, r7
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	4a49      	ldr	r2, [pc, #292]	@ (80012b0 <main+0x288>)
 800118c:	6812      	ldr	r2, [r2, #0]
 800118e:	f107 0108 	add.w	r1, r7, #8
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	3b08      	subs	r3, #8
 8001198:	601a      	str	r2, [r3, #0]
	 		  	  	 	 tot += voltage;
 800119a:	4b45      	ldr	r3, [pc, #276]	@ (80012b0 <main+0x288>)
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	f241 0304 	movw	r3, #4100	@ 0x1004
 80011a4:	443b      	add	r3, r7
 80011a6:	ed93 7a00 	vldr	s14, [r3]
 80011aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ae:	f241 0304 	movw	r3, #4100	@ 0x1004
 80011b2:	443b      	add	r3, r7
 80011b4:	edc3 7a00 	vstr	s15, [r3]

	 		  	  	 	 i++;
 80011b8:	f241 0302 	movw	r3, #4098	@ 0x1002
 80011bc:	443b      	add	r3, r7
 80011be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	3301      	adds	r3, #1
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f241 0202 	movw	r2, #4098	@ 0x1002
 80011cc:	443a      	add	r2, r7
 80011ce:	8013      	strh	r3, [r2, #0]
	 		  	  	 	 if (i >= 1024) {
 80011d0:	f241 0302 	movw	r3, #4098	@ 0x1002
 80011d4:	443b      	add	r3, r7
 80011d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011de:	db07      	blt.n	80011f0 <main+0x1c8>
	 		  	  	 	 	 i = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f241 0202 	movw	r2, #4098	@ 0x1002
 80011e6:	443a      	add	r2, r7
 80011e8:	8013      	strh	r3, [r2, #0]
	 		  	  	 	 	 buffer_full = true;
 80011ea:	4b32      	ldr	r3, [pc, #200]	@ (80012b4 <main+0x28c>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
	 		  	  	 	 }

	 		  	  	 	 avg = tot / (buffer_full ? 1024.00 : (float)i);
 80011f0:	f241 0304 	movw	r3, #4100	@ 0x1004
 80011f4:	443b      	add	r3, r7
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f7ff f9c6 	bl	8000588 <__aeabi_f2d>
 80011fc:	4604      	mov	r4, r0
 80011fe:	460d      	mov	r5, r1
 8001200:	4b2c      	ldr	r3, [pc, #176]	@ (80012b4 <main+0x28c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <main+0x1e8>
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <main+0x290>)
 800120e:	e00e      	b.n	800122e <main+0x206>
 8001210:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001214:	443b      	add	r3, r7
 8001216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001222:	ee17 0a90 	vmov	r0, s15
 8001226:	f7ff f9af 	bl	8000588 <__aeabi_f2d>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4620      	mov	r0, r4
 8001230:	4629      	mov	r1, r5
 8001232:	f7ff fb2b 	bl	800088c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fcf3 	bl	8000c28 <__aeabi_d2f>
 8001242:	4603      	mov	r3, r0
 8001244:	4a1d      	ldr	r2, [pc, #116]	@ (80012bc <main+0x294>)
 8001246:	6013      	str	r3, [r2, #0]



/*GREEN ON WHEN BUTTON 1 PRESSED*/
  if(button_flag){
 8001248:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <main+0x298>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f43f af14 	beq.w	800107a <main+0x52>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	2101      	movs	r1, #1
 8001256:	4812      	ldr	r0, [pc, #72]	@ (80012a0 <main+0x278>)
 8001258:	f002 fa74 	bl	8003744 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f000 feb5 	bl	8001fcc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2101      	movs	r1, #1
 8001266:	480e      	ldr	r0, [pc, #56]	@ (80012a0 <main+0x278>)
 8001268:	f002 fa6c 	bl	8003744 <HAL_GPIO_WritePin>
	  button_flag=0;
 800126c:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <main+0x298>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
if(rx_flag){
 8001272:	e702      	b.n	800107a <main+0x52>
 8001274:	f3af 8000 	nop.w
 8001278:	66666666 	.word	0x66666666
 800127c:	400a6666 	.word	0x400a6666
 8001280:	200003b0 	.word	0x200003b0
 8001284:	20000a0c 	.word	0x20000a0c
 8001288:	20000474 	.word	0x20000474
 800128c:	20000a10 	.word	0x20000a10
 8001290:	200009dc 	.word	0x200009dc
 8001294:	40533333 	.word	0x40533333
 8001298:	457ff000 	.word	0x457ff000
 800129c:	200009e4 	.word	0x200009e4
 80012a0:	40020400 	.word	0x40020400
 80012a4:	20000368 	.word	0x20000368
 80012a8:	20000a08 	.word	0x20000a08
 80012ac:	40b00000 	.word	0x40b00000
 80012b0:	20000a18 	.word	0x20000a18
 80012b4:	20000a1c 	.word	0x20000a1c
 80012b8:	40900000 	.word	0x40900000
 80012bc:	200009e0 	.word	0x200009e0
 80012c0:	20000a14 	.word	0x20000a14

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	@ 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	2230      	movs	r2, #48	@ 0x30
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f006 fe41 	bl	8007f5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012e8:	f002 fb98 	bl	8003a1c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001398 <SystemClock_Config+0xd4>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f0:	4a29      	ldr	r2, [pc, #164]	@ (8001398 <SystemClock_Config+0xd4>)
 80012f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f8:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <SystemClock_Config+0xd4>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001304:	4b25      	ldr	r3, [pc, #148]	@ (800139c <SystemClock_Config+0xd8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a24      	ldr	r2, [pc, #144]	@ (800139c <SystemClock_Config+0xd8>)
 800130a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b22      	ldr	r3, [pc, #136]	@ (800139c <SystemClock_Config+0xd8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131c:	2301      	movs	r3, #1
 800131e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001320:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800132e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001330:	2304      	movs	r3, #4
 8001332:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001334:	23d8      	movs	r3, #216	@ 0xd8
 8001336:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001338:	2302      	movs	r3, #2
 800133a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800133c:	2309      	movs	r3, #9
 800133e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001340:	f107 0320 	add.w	r3, r7, #32
 8001344:	4618      	mov	r0, r3
 8001346:	f002 fbc9 	bl	8003adc <HAL_RCC_OscConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001350:	f000 fa58 	bl	8001804 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001354:	f002 fb72 	bl	8003a3c <HAL_PWREx_EnableOverDrive>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800135e:	f000 fa51 	bl	8001804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2302      	movs	r3, #2
 8001368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800136e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001372:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001378:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2107      	movs	r1, #7
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fe4f 	bl	8004024 <HAL_RCC_ClockConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800138c:	f000 fa3a 	bl	8001804 <Error_Handler>
  }
}
 8001390:	bf00      	nop
 8001392:	3750      	adds	r7, #80	@ 0x50
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000

080013a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013b2:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <MX_ADC1_Init+0x98>)
 80013b4:	4a21      	ldr	r2, [pc, #132]	@ (800143c <MX_ADC1_Init+0x9c>)
 80013b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <MX_ADC1_Init+0x98>)
 80013ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <MX_ADC1_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <MX_ADC1_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <MX_ADC1_Init+0x98>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d2:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <MX_ADC1_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <MX_ADC1_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <MX_ADC1_Init+0x98>)
 80013e2:	4a17      	ldr	r2, [pc, #92]	@ (8001440 <MX_ADC1_Init+0xa0>)
 80013e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e6:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <MX_ADC1_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <MX_ADC1_Init+0x98>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013f2:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_ADC1_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <MX_ADC1_Init+0x98>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001400:	480d      	ldr	r0, [pc, #52]	@ (8001438 <MX_ADC1_Init+0x98>)
 8001402:	f000 fe07 	bl	8002014 <HAL_ADC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800140c:	f000 f9fa 	bl	8001804 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_ADC1_Init+0x98>)
 8001422:	f000 ffa1 	bl	8002368 <HAL_ADC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800142c:	f000 f9ea 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000368 	.word	0x20000368
 800143c:	40012000 	.word	0x40012000
 8001440:	0f000001 	.word	0x0f000001

08001444 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800144a:	463b      	mov	r3, r7
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001452:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_DAC_Init+0x4c>)
 8001454:	4a0f      	ldr	r2, [pc, #60]	@ (8001494 <MX_DAC_Init+0x50>)
 8001456:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001458:	480d      	ldr	r0, [pc, #52]	@ (8001490 <MX_DAC_Init+0x4c>)
 800145a:	f001 faea 	bl	8002a32 <HAL_DAC_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001464:	f000 f9ce 	bl	8001804 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001468:	2300      	movs	r3, #0
 800146a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	@ (8001490 <MX_DAC_Init+0x4c>)
 8001478:	f001 fb7e 	bl	8002b78 <HAL_DAC_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001482:	f000 f9bf 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200003b0 	.word	0x200003b0
 8001494:	40007400 	.word	0x40007400

08001498 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <MX_ETH_Init+0x84>)
 800149e:	4a20      	ldr	r2, [pc, #128]	@ (8001520 <MX_ETH_Init+0x88>)
 80014a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <MX_ETH_Init+0x8c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80014a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <MX_ETH_Init+0x8c>)
 80014aa:	2280      	movs	r2, #128	@ 0x80
 80014ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <MX_ETH_Init+0x8c>)
 80014b0:	22e1      	movs	r2, #225	@ 0xe1
 80014b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <MX_ETH_Init+0x8c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_ETH_Init+0x8c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <MX_ETH_Init+0x8c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <MX_ETH_Init+0x84>)
 80014c8:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <MX_ETH_Init+0x8c>)
 80014ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80014cc:	4b13      	ldr	r3, [pc, #76]	@ (800151c <MX_ETH_Init+0x84>)
 80014ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014d2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_ETH_Init+0x84>)
 80014d6:	4a14      	ldr	r2, [pc, #80]	@ (8001528 <MX_ETH_Init+0x90>)
 80014d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <MX_ETH_Init+0x84>)
 80014dc:	4a13      	ldr	r2, [pc, #76]	@ (800152c <MX_ETH_Init+0x94>)
 80014de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_ETH_Init+0x84>)
 80014e2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80014e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <MX_ETH_Init+0x84>)
 80014ea:	f001 fc31 	bl	8002d50 <HAL_ETH_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80014f4:	f000 f986 	bl	8001804 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80014f8:	2238      	movs	r2, #56	@ 0x38
 80014fa:	2100      	movs	r1, #0
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <MX_ETH_Init+0x98>)
 80014fe:	f006 fd2c 	bl	8007f5a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <MX_ETH_Init+0x98>)
 8001504:	2221      	movs	r2, #33	@ 0x21
 8001506:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <MX_ETH_Init+0x98>)
 800150a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800150e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001510:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <MX_ETH_Init+0x98>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200003c4 	.word	0x200003c4
 8001520:	40028000 	.word	0x40028000
 8001524:	20000a20 	.word	0x20000a20
 8001528:	20000274 	.word	0x20000274
 800152c:	200001d4 	.word	0x200001d4
 8001530:	20000330 	.word	0x20000330

08001534 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_USART3_UART_Init+0x58>)
 800153a:	4a15      	ldr	r2, [pc, #84]	@ (8001590 <MX_USART3_UART_Init+0x5c>)
 800153c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800153e:	4b13      	ldr	r3, [pc, #76]	@ (800158c <MX_USART3_UART_Init+0x58>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_USART3_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_USART3_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MX_USART3_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <MX_USART3_UART_Init+0x58>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <MX_USART3_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <MX_USART3_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <MX_USART3_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <MX_USART3_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_USART3_UART_Init+0x58>)
 8001578:	f003 fb6a 	bl	8004c50 <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001582:	f000 f93f 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000474 	.word	0x20000474
 8001590:	40004800 	.word	0x40004800

08001594 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800159e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a2:	2206      	movs	r2, #6
 80015a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b4:	2202      	movs	r2, #2
 80015b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d8:	f002 f8e6 	bl	80037a8 <HAL_PCD_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015e2:	f000 f90f 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200004fc 	.word	0x200004fc

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	@ 0x30
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	4b4b      	ldr	r3, [pc, #300]	@ (8001734 <MX_GPIO_Init+0x144>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a4a      	ldr	r2, [pc, #296]	@ (8001734 <MX_GPIO_Init+0x144>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b48      	ldr	r3, [pc, #288]	@ (8001734 <MX_GPIO_Init+0x144>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161e:	4b45      	ldr	r3, [pc, #276]	@ (8001734 <MX_GPIO_Init+0x144>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a44      	ldr	r2, [pc, #272]	@ (8001734 <MX_GPIO_Init+0x144>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b42      	ldr	r3, [pc, #264]	@ (8001734 <MX_GPIO_Init+0x144>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b3f      	ldr	r3, [pc, #252]	@ (8001734 <MX_GPIO_Init+0x144>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a3e      	ldr	r2, [pc, #248]	@ (8001734 <MX_GPIO_Init+0x144>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b3c      	ldr	r3, [pc, #240]	@ (8001734 <MX_GPIO_Init+0x144>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	4b39      	ldr	r3, [pc, #228]	@ (8001734 <MX_GPIO_Init+0x144>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a38      	ldr	r2, [pc, #224]	@ (8001734 <MX_GPIO_Init+0x144>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b36      	ldr	r3, [pc, #216]	@ (8001734 <MX_GPIO_Init+0x144>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001666:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <MX_GPIO_Init+0x144>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a32      	ldr	r2, [pc, #200]	@ (8001734 <MX_GPIO_Init+0x144>)
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b30      	ldr	r3, [pc, #192]	@ (8001734 <MX_GPIO_Init+0x144>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800167e:	4b2d      	ldr	r3, [pc, #180]	@ (8001734 <MX_GPIO_Init+0x144>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a2c      	ldr	r2, [pc, #176]	@ (8001734 <MX_GPIO_Init+0x144>)
 8001684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <MX_GPIO_Init+0x144>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f244 0181 	movw	r1, #16513	@ 0x4081
 800169c:	4826      	ldr	r0, [pc, #152]	@ (8001738 <MX_GPIO_Init+0x148>)
 800169e:	f002 f851 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2140      	movs	r1, #64	@ 0x40
 80016a6:	4825      	ldr	r0, [pc, #148]	@ (800173c <MX_GPIO_Init+0x14c>)
 80016a8:	f002 f84c 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	481f      	ldr	r0, [pc, #124]	@ (8001740 <MX_GPIO_Init+0x150>)
 80016c4:	f001 fe92 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80016c8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4815      	ldr	r0, [pc, #84]	@ (8001738 <MX_GPIO_Init+0x148>)
 80016e2:	f001 fe83 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016e6:	2340      	movs	r3, #64	@ 0x40
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	480f      	ldr	r0, [pc, #60]	@ (800173c <MX_GPIO_Init+0x14c>)
 80016fe:	f001 fe75 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	4809      	ldr	r0, [pc, #36]	@ (800173c <MX_GPIO_Init+0x14c>)
 8001716:	f001 fe69 	bl	80033ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2028      	movs	r0, #40	@ 0x28
 8001720:	f001 f951 	bl	80029c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001724:	2028      	movs	r0, #40	@ 0x28
 8001726:	f001 f96a 	bl	80029fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800172a:	bf00      	nop
 800172c:	3730      	adds	r7, #48	@ 0x30
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40020400 	.word	0x40020400
 800173c:	40021800 	.word	0x40021800
 8001740:	40020800 	.word	0x40020800

08001744 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

//uint8_t rx_buff[4];
float value = 0.0f;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0f      	ldr	r2, [pc, #60]	@ (8001790 <HAL_UART_RxCpltCallback+0x4c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d118      	bne.n	8001788 <HAL_UART_RxCpltCallback+0x44>
	        rx_flag=1;
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_UART_RxCpltCallback+0x50>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
	        value = atof((char*)rx_buff);
 800175c:	480e      	ldr	r0, [pc, #56]	@ (8001798 <HAL_UART_RxCpltCallback+0x54>)
 800175e:	f005 f86d 	bl	800683c <atof>
 8001762:	ec53 2b10 	vmov	r2, r3, d0
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff fa5d 	bl	8000c28 <__aeabi_d2f>
 800176e:	4603      	mov	r3, r0
 8001770:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_UART_RxCpltCallback+0x58>)
 8001772:	6013      	str	r3, [r2, #0]
	        memset(rx_buff, 0, 4);
 8001774:	2204      	movs	r2, #4
 8001776:	2100      	movs	r1, #0
 8001778:	4807      	ldr	r0, [pc, #28]	@ (8001798 <HAL_UART_RxCpltCallback+0x54>)
 800177a:	f006 fbee 	bl	8007f5a <memset>
	        HAL_UART_Receive_IT(&huart3, rx_buff, 3);
 800177e:	2203      	movs	r2, #3
 8001780:	4905      	ldr	r1, [pc, #20]	@ (8001798 <HAL_UART_RxCpltCallback+0x54>)
 8001782:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <HAL_UART_RxCpltCallback+0x5c>)
 8001784:	f003 fb3b 	bl	8004dfe <HAL_UART_Receive_IT>
	    }
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40004800 	.word	0x40004800
 8001794:	20000a10 	.word	0x20000a10
 8001798:	20000a0c 	.word	0x20000a0c
 800179c:	200009dc 	.word	0x200009dc
 80017a0:	20000474 	.word	0x20000474

080017a4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017b4:	d118      	bne.n	80017e8 <HAL_GPIO_EXTI_Callback+0x44>
			button_flag=1;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
			sprintf(tx_buff,"\n Voltage: %.3f V\r\n", avg);
 80017bc:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <HAL_GPIO_EXTI_Callback+0x50>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fee1 	bl	8000588 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	490b      	ldr	r1, [pc, #44]	@ (80017f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80017cc:	480b      	ldr	r0, [pc, #44]	@ (80017fc <HAL_GPIO_EXTI_Callback+0x58>)
 80017ce:	f006 fb61 	bl	8007e94 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)tx_buff,strlen(tx_buff), HAL_MAX_DELAY);
 80017d2:	480a      	ldr	r0, [pc, #40]	@ (80017fc <HAL_GPIO_EXTI_Callback+0x58>)
 80017d4:	f7fe fd6c 	bl	80002b0 <strlen>
 80017d8:	4603      	mov	r3, r0
 80017da:	b29a      	uxth	r2, r3
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
 80017e0:	4906      	ldr	r1, [pc, #24]	@ (80017fc <HAL_GPIO_EXTI_Callback+0x58>)
 80017e2:	4807      	ldr	r0, [pc, #28]	@ (8001800 <HAL_GPIO_EXTI_Callback+0x5c>)
 80017e4:	f003 fa82 	bl	8004cec <HAL_UART_Transmit>
	 }
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000a14 	.word	0x20000a14
 80017f4:	200009e0 	.word	0x200009e0
 80017f8:	0800aa10 	.word	0x0800aa10
 80017fc:	200009e8 	.word	0x200009e8
 8001800:	20000474 	.word	0x20000474

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
}
 800180a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <Error_Handler+0x8>

08001810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <HAL_MspInit+0x44>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	4a0e      	ldr	r2, [pc, #56]	@ (8001854 <HAL_MspInit+0x44>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	@ 0x40
 8001822:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <HAL_MspInit+0x44>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <HAL_MspInit+0x44>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	4a08      	ldr	r2, [pc, #32]	@ (8001854 <HAL_MspInit+0x44>)
 8001834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001838:	6453      	str	r3, [r2, #68]	@ 0x44
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_MspInit+0x44>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800

08001858 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a15      	ldr	r2, [pc, #84]	@ (80018cc <HAL_ADC_MspInit+0x74>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d123      	bne.n	80018c2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <HAL_ADC_MspInit+0x78>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <HAL_ADC_MspInit+0x78>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001884:	6453      	str	r3, [r2, #68]	@ 0x44
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_ADC_MspInit+0x78>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <HAL_ADC_MspInit+0x78>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a0e      	ldr	r2, [pc, #56]	@ (80018d0 <HAL_ADC_MspInit+0x78>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_ADC_MspInit+0x78>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018aa:	2301      	movs	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ae:	2303      	movs	r3, #3
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <HAL_ADC_MspInit+0x7c>)
 80018be:	f001 fd95 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	@ 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40012000 	.word	0x40012000
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000

080018d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a15      	ldr	r2, [pc, #84]	@ (800194c <HAL_DAC_MspInit+0x74>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d123      	bne.n	8001942 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_DAC_MspInit+0x78>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <HAL_DAC_MspInit+0x78>)
 8001900:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <HAL_DAC_MspInit+0x78>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_DAC_MspInit+0x78>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a0e      	ldr	r2, [pc, #56]	@ (8001950 <HAL_DAC_MspInit+0x78>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <HAL_DAC_MspInit+0x78>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800192a:	2310      	movs	r3, #16
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800192e:	2303      	movs	r3, #3
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	@ (8001954 <HAL_DAC_MspInit+0x7c>)
 800193e:	f001 fd55 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	@ 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40007400 	.word	0x40007400
 8001950:	40023800 	.word	0x40023800
 8001954:	40020000 	.word	0x40020000

08001958 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08e      	sub	sp, #56	@ 0x38
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a4e      	ldr	r2, [pc, #312]	@ (8001ab0 <HAL_ETH_MspInit+0x158>)
 8001976:	4293      	cmp	r3, r2
 8001978:	f040 8096 	bne.w	8001aa8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800197c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	4a4c      	ldr	r2, [pc, #304]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 8001982:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001986:	6313      	str	r3, [r2, #48]	@ 0x30
 8001988:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001990:	623b      	str	r3, [r7, #32]
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	4b47      	ldr	r3, [pc, #284]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001998:	4a46      	ldr	r2, [pc, #280]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 800199a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800199e:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a0:	4b44      	ldr	r3, [pc, #272]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	4b41      	ldr	r3, [pc, #260]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b0:	4a40      	ldr	r2, [pc, #256]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 80019b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d0:	4b38      	ldr	r3, [pc, #224]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019dc:	4b35      	ldr	r3, [pc, #212]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e0:	4a34      	ldr	r2, [pc, #208]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e8:	4b32      	ldr	r3, [pc, #200]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f8:	4a2e      	ldr	r2, [pc, #184]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a00:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a0c:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a10:	4a28      	ldr	r2, [pc, #160]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 8001a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a18:	4b26      	ldr	r3, [pc, #152]	@ (8001ab4 <HAL_ETH_MspInit+0x15c>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a24:	2332      	movs	r3, #50	@ 0x32
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a34:	230b      	movs	r3, #11
 8001a36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	481e      	ldr	r0, [pc, #120]	@ (8001ab8 <HAL_ETH_MspInit+0x160>)
 8001a40:	f001 fcd4 	bl	80033ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001a44:	2386      	movs	r3, #134	@ 0x86
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a54:	230b      	movs	r3, #11
 8001a56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4817      	ldr	r0, [pc, #92]	@ (8001abc <HAL_ETH_MspInit+0x164>)
 8001a60:	f001 fcc4 	bl	80033ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a76:	230b      	movs	r3, #11
 8001a78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480f      	ldr	r0, [pc, #60]	@ (8001ac0 <HAL_ETH_MspInit+0x168>)
 8001a82:	f001 fcb3 	bl	80033ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a86:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a98:	230b      	movs	r3, #11
 8001a9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4808      	ldr	r0, [pc, #32]	@ (8001ac4 <HAL_ETH_MspInit+0x16c>)
 8001aa4:	f001 fca2 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3738      	adds	r7, #56	@ 0x38
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40028000 	.word	0x40028000
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40021800 	.word	0x40021800

08001ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0aa      	sub	sp, #168	@ 0xa8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2284      	movs	r2, #132	@ 0x84
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f006 fa36 	bl	8007f5a <memset>
  if(huart->Instance==USART3)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a26      	ldr	r2, [pc, #152]	@ (8001b8c <HAL_UART_MspInit+0xc4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d144      	bne.n	8001b82 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001afc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fcb2 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b12:	f7ff fe77 	bl	8001804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b16:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <HAL_UART_MspInit+0xc8>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b90 <HAL_UART_MspInit+0xc8>)
 8001b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_UART_MspInit+0xc8>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_UART_MspInit+0xc8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <HAL_UART_MspInit+0xc8>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HAL_UART_MspInit+0xc8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b60:	2307      	movs	r3, #7
 8001b62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b66:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4809      	ldr	r0, [pc, #36]	@ (8001b94 <HAL_UART_MspInit+0xcc>)
 8001b6e:	f001 fc3d 	bl	80033ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2027      	movs	r0, #39	@ 0x27
 8001b78:	f000 ff25 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b7c:	2027      	movs	r0, #39	@ 0x27
 8001b7e:	f000 ff3e 	bl	80029fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	37a8      	adds	r7, #168	@ 0xa8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004800 	.word	0x40004800
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020c00 	.word	0x40020c00

08001b98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0ac      	sub	sp, #176	@ 0xb0
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb0:	f107 0318 	add.w	r3, r7, #24
 8001bb4:	2284      	movs	r2, #132	@ 0x84
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f006 f9ce 	bl	8007f5a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bc6:	d159      	bne.n	8001c7c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001bc8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bcc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd4:	f107 0318 	add.w	r3, r7, #24
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fc49 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001be4:	f7ff fe0e 	bl	8001804 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b26      	ldr	r3, [pc, #152]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	4a25      	ldr	r2, [pc, #148]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf4:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c00:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001c04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c1a:	230a      	movs	r3, #10
 8001c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c24:	4619      	mov	r1, r3
 8001c26:	4818      	ldr	r0, [pc, #96]	@ (8001c88 <HAL_PCD_MspInit+0xf0>)
 8001c28:	f001 fbe0 	bl	80033ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c44:	4619      	mov	r1, r3
 8001c46:	4810      	ldr	r0, [pc, #64]	@ (8001c88 <HAL_PCD_MspInit+0xf0>)
 8001c48:	f001 fbd0 	bl	80033ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c50:	4a0c      	ldr	r2, [pc, #48]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c56:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c68:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c70:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	37b0      	adds	r7, #176	@ 0xb0
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <NMI_Handler+0x4>

08001c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce2:	f000 f953 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cf0:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <USART3_IRQHandler+0x10>)
 8001cf2:	f003 f8c9 	bl	8004e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000474 	.word	0x20000474

08001d00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001d04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d08:	f001 fd36 	bl	8003778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return 1;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_kill>:

int _kill(int pid, int sig)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d2a:	f006 f97b 	bl	8008024 <__errno>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2216      	movs	r2, #22
 8001d32:	601a      	str	r2, [r3, #0]
  return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_exit>:

void _exit (int status)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ffe7 	bl	8001d20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d52:	bf00      	nop
 8001d54:	e7fd      	b.n	8001d52 <_exit+0x12>

08001d56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e00a      	b.n	8001d7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d68:	f3af 8000 	nop.w
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	60ba      	str	r2, [r7, #8]
 8001d74:	b2ca      	uxtb	r2, r1
 8001d76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	dbf0      	blt.n	8001d68 <_read+0x12>
  }

  return len;
 8001d86:	687b      	ldr	r3, [r7, #4]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e009      	b.n	8001db6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	60ba      	str	r2, [r7, #8]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	dbf1      	blt.n	8001da2 <_write+0x12>
  }
  return len;
 8001dbe:	687b      	ldr	r3, [r7, #4]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_close>:

int _close(int file)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001df0:	605a      	str	r2, [r3, #4]
  return 0;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_isatty>:

int _isatty(int file)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e38:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <_sbrk+0x5c>)
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <_sbrk+0x60>)
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <_sbrk+0x64>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <_sbrk+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d207      	bcs.n	8001e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e60:	f006 f8e0 	bl	8008024 <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20050000 	.word	0x20050000
 8001e90:	00000400 	.word	0x00000400
 8001e94:	20000a28 	.word	0x20000a28
 8001e98:	20000b80 	.word	0x20000b80

08001e9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <SystemInit+0x20>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <SystemInit+0x20>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ef8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ec4:	f7ff ffea 	bl	8001e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec8:	480c      	ldr	r0, [pc, #48]	@ (8001efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eca:	490d      	ldr	r1, [pc, #52]	@ (8001f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8001f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001eee:	f006 f89f 	bl	8008030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef2:	f7ff f899 	bl	8001028 <main>
  bx  lr    
 8001ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ef8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f00:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f04:	0800ae70 	.word	0x0800ae70
  ldr r2, =_sbss
 8001f08:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8001f0c:	20000b7c 	.word	0x20000b7c

08001f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC_IRQHandler>

08001f12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f16:	2003      	movs	r0, #3
 8001f18:	f000 fd4a 	bl	80029b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f000 f805 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f22:	f7ff fc75 	bl	8001810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_InitTick+0x54>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_InitTick+0x58>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fd65 	bl	8002a1a <HAL_SYSTICK_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00e      	b.n	8001f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d80a      	bhi.n	8001f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f60:	2200      	movs	r2, #0
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f000 fd2d 	bl	80029c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f6c:	4a06      	ldr	r2, [pc, #24]	@ (8001f88 <HAL_InitTick+0x5c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000008 	.word	0x20000008
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_IncTick+0x20>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	20000a2c 	.word	0x20000a2c

08001fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <HAL_GetTick+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000a2c 	.word	0x20000a2c

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff ffee 	bl	8001fb4 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff ffde 	bl	8001fb4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000008 	.word	0x20000008

08002014 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e031      	b.n	800208e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fc10 	bl	8001858 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002056:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <HAL_ADC_Init+0x84>)
 8002058:	4013      	ands	r3, r2
 800205a:	f043 0202 	orr.w	r2, r3, #2
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fada 	bl	800261c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40
 800207e:	e001      	b.n	8002084 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	ffffeefd 	.word	0xffffeefd

0800209c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_Start+0x1a>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0ad      	b.n	8002212 <HAL_ADC_Start+0x176>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d018      	beq.n	80020fe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80020dc:	4b50      	ldr	r3, [pc, #320]	@ (8002220 <HAL_ADC_Start+0x184>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a50      	ldr	r2, [pc, #320]	@ (8002224 <HAL_ADC_Start+0x188>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0c9a      	lsrs	r2, r3, #18
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80020f0:	e002      	b.n	80020f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f9      	bne.n	80020f2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d175      	bne.n	80021f8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002110:	4b45      	ldr	r3, [pc, #276]	@ (8002228 <HAL_ADC_Start+0x18c>)
 8002112:	4013      	ands	r3, r2
 8002114:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002132:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002146:	d106      	bne.n	8002156 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214c:	f023 0206 	bic.w	r2, r3, #6
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	645a      	str	r2, [r3, #68]	@ 0x44
 8002154:	e002      	b.n	800215c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800216c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800216e:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <HAL_ADC_Start+0x190>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10f      	bne.n	800219a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d143      	bne.n	8002210 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	e03a      	b.n	8002210 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a24      	ldr	r2, [pc, #144]	@ (8002230 <HAL_ADC_Start+0x194>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d10e      	bne.n	80021c2 <HAL_ADC_Start+0x126>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d107      	bne.n	80021c2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021c0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80021c2:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <HAL_ADC_Start+0x190>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d120      	bne.n	8002210 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a18      	ldr	r2, [pc, #96]	@ (8002234 <HAL_ADC_Start+0x198>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d11b      	bne.n	8002210 <HAL_ADC_Start+0x174>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d114      	bne.n	8002210 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	e00b      	b.n	8002210 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	f043 0210 	orr.w	r2, r3, #16
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000000 	.word	0x20000000
 8002224:	431bde83 	.word	0x431bde83
 8002228:	fffff8fe 	.word	0xfffff8fe
 800222c:	40012300 	.word	0x40012300
 8002230:	40012000 	.word	0x40012000
 8002234:	40012200 	.word	0x40012200

08002238 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002254:	d113      	bne.n	800227e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002264:	d10b      	bne.n	800227e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	f043 0220 	orr.w	r2, r3, #32
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e063      	b.n	8002346 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800227e:	f7ff fe99 	bl	8001fb4 <HAL_GetTick>
 8002282:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002284:	e021      	b.n	80022ca <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d01d      	beq.n	80022ca <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <HAL_ADC_PollForConversion+0x6c>
 8002294:	f7ff fe8e 	bl	8001fb4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d212      	bcs.n	80022ca <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d00b      	beq.n	80022ca <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f043 0204 	orr.w	r2, r3, #4
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e03d      	b.n	8002346 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d1d6      	bne.n	8002286 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0212 	mvn.w	r2, #18
 80022e0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d123      	bne.n	8002344 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002300:	2b00      	cmp	r3, #0
 8002302:	d11f      	bne.n	8002344 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800231c:	2b00      	cmp	r3, #0
 800231e:	d111      	bne.n	8002344 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	f043 0201 	orr.w	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1c>
 8002380:	2302      	movs	r3, #2
 8002382:	e13a      	b.n	80025fa <HAL_ADC_ConfigChannel+0x292>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b09      	cmp	r3, #9
 8002392:	d93a      	bls.n	800240a <HAL_ADC_ConfigChannel+0xa2>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800239c:	d035      	beq.n	800240a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68d9      	ldr	r1, [r3, #12]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	3b1e      	subs	r3, #30
 80023b4:	2207      	movs	r2, #7
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	400a      	ands	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a8f      	ldr	r2, [pc, #572]	@ (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10a      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68d9      	ldr	r1, [r3, #12]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	061a      	lsls	r2, r3, #24
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023e2:	e039      	b.n	8002458 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68d9      	ldr	r1, [r3, #12]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4618      	mov	r0, r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4403      	add	r3, r0
 80023fc:	3b1e      	subs	r3, #30
 80023fe:	409a      	lsls	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002408:	e026      	b.n	8002458 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6919      	ldr	r1, [r3, #16]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2207      	movs	r2, #7
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43da      	mvns	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	400a      	ands	r2, r1
 8002430:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6919      	ldr	r1, [r3, #16]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	4618      	mov	r0, r3
 8002444:	4603      	mov	r3, r0
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4403      	add	r3, r0
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	409a      	lsls	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b06      	cmp	r3, #6
 800245e:	d824      	bhi.n	80024aa <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	3b05      	subs	r3, #5
 8002472:	221f      	movs	r2, #31
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43da      	mvns	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	400a      	ands	r2, r1
 8002480:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b29b      	uxth	r3, r3
 800248e:	4618      	mov	r0, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	3b05      	subs	r3, #5
 800249c:	fa00 f203 	lsl.w	r2, r0, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80024a8:	e04c      	b.n	8002544 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	d824      	bhi.n	80024fc <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	3b23      	subs	r3, #35	@ 0x23
 80024c4:	221f      	movs	r2, #31
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	400a      	ands	r2, r1
 80024d2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	4618      	mov	r0, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	3b23      	subs	r3, #35	@ 0x23
 80024ee:	fa00 f203 	lsl.w	r2, r0, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80024fa:	e023      	b.n	8002544 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3b41      	subs	r3, #65	@ 0x41
 800250e:	221f      	movs	r2, #31
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43da      	mvns	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	400a      	ands	r2, r1
 800251c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	4618      	mov	r0, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	3b41      	subs	r3, #65	@ 0x41
 8002538:	fa00 f203 	lsl.w	r2, r0, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a30      	ldr	r2, [pc, #192]	@ (800260c <HAL_ADC_ConfigChannel+0x2a4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10a      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x1fc>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002556:	d105      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002558:	4b2d      	ldr	r3, [pc, #180]	@ (8002610 <HAL_ADC_ConfigChannel+0x2a8>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4a2c      	ldr	r2, [pc, #176]	@ (8002610 <HAL_ADC_ConfigChannel+0x2a8>)
 800255e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002562:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a28      	ldr	r2, [pc, #160]	@ (800260c <HAL_ADC_ConfigChannel+0x2a4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d10f      	bne.n	800258e <HAL_ADC_ConfigChannel+0x226>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b12      	cmp	r3, #18
 8002574:	d10b      	bne.n	800258e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002576:	4b26      	ldr	r3, [pc, #152]	@ (8002610 <HAL_ADC_ConfigChannel+0x2a8>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a25      	ldr	r2, [pc, #148]	@ (8002610 <HAL_ADC_ConfigChannel+0x2a8>)
 800257c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002580:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002582:	4b23      	ldr	r3, [pc, #140]	@ (8002610 <HAL_ADC_ConfigChannel+0x2a8>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a22      	ldr	r2, [pc, #136]	@ (8002610 <HAL_ADC_ConfigChannel+0x2a8>)
 8002588:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800258c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1e      	ldr	r2, [pc, #120]	@ (800260c <HAL_ADC_ConfigChannel+0x2a4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d12b      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x288>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1a      	ldr	r2, [pc, #104]	@ (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d003      	beq.n	80025aa <HAL_ADC_ConfigChannel+0x242>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b11      	cmp	r3, #17
 80025a8:	d122      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80025aa:	4b19      	ldr	r3, [pc, #100]	@ (8002610 <HAL_ADC_ConfigChannel+0x2a8>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4a18      	ldr	r2, [pc, #96]	@ (8002610 <HAL_ADC_ConfigChannel+0x2a8>)
 80025b0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80025b4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80025b6:	4b16      	ldr	r3, [pc, #88]	@ (8002610 <HAL_ADC_ConfigChannel+0x2a8>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a15      	ldr	r2, [pc, #84]	@ (8002610 <HAL_ADC_ConfigChannel+0x2a8>)
 80025bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025c0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a10      	ldr	r2, [pc, #64]	@ (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d111      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80025cc:	4b11      	ldr	r3, [pc, #68]	@ (8002614 <HAL_ADC_ConfigChannel+0x2ac>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a11      	ldr	r2, [pc, #68]	@ (8002618 <HAL_ADC_ConfigChannel+0x2b0>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0c9a      	lsrs	r2, r3, #18
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025e2:	e002      	b.n	80025ea <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f9      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	10000012 	.word	0x10000012
 800260c:	40012000 	.word	0x40012000
 8002610:	40012300 	.word	0x40012300
 8002614:	20000000 	.word	0x20000000
 8002618:	431bde83 	.word	0x431bde83

0800261c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002624:	4b78      	ldr	r3, [pc, #480]	@ (8002808 <ADC_Init+0x1ec>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a77      	ldr	r2, [pc, #476]	@ (8002808 <ADC_Init+0x1ec>)
 800262a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800262e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002630:	4b75      	ldr	r3, [pc, #468]	@ (8002808 <ADC_Init+0x1ec>)
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4973      	ldr	r1, [pc, #460]	@ (8002808 <ADC_Init+0x1ec>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800264c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	021a      	lsls	r2, r3, #8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6899      	ldr	r1, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026aa:	4a58      	ldr	r2, [pc, #352]	@ (800280c <ADC_Init+0x1f0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d022      	beq.n	80026f6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6899      	ldr	r1, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6899      	ldr	r1, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	e00f      	b.n	8002716 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002714:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0202 	bic.w	r2, r2, #2
 8002724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6899      	ldr	r1, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	005a      	lsls	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01b      	beq.n	800277c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002752:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002762:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6859      	ldr	r1, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	3b01      	subs	r3, #1
 8002770:	035a      	lsls	r2, r3, #13
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	e007      	b.n	800278c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800278a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800279a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	051a      	lsls	r2, r3, #20
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6899      	ldr	r1, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027ce:	025a      	lsls	r2, r3, #9
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6899      	ldr	r1, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	029a      	lsls	r2, r3, #10
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40012300 	.word	0x40012300
 800280c:	0f000001 	.word	0x0f000001

08002810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002820:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <__NVIC_SetPriorityGrouping+0x40>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002838:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 800283a:	4313      	orrs	r3, r2
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <__NVIC_SetPriorityGrouping+0x40>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00
 8002854:	05fa0000 	.word	0x05fa0000

08002858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285c:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <__NVIC_GetPriorityGrouping+0x18>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0307 	and.w	r3, r3, #7
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	2b00      	cmp	r3, #0
 8002884:	db0b      	blt.n	800289e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4907      	ldr	r1, [pc, #28]	@ (80028ac <__NVIC_EnableIRQ+0x38>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2001      	movs	r0, #1
 8002896:	fa00 f202 	lsl.w	r2, r0, r2
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	@ (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	@ (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	@ 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	@ 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800297c:	d301      	bcc.n	8002982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297e:	2301      	movs	r3, #1
 8002980:	e00f      	b.n	80029a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <SysTick_Config+0x40>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298a:	210f      	movs	r1, #15
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f7ff ff8e 	bl	80028b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <SysTick_Config+0x40>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299a:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <SysTick_Config+0x40>)
 800299c:	2207      	movs	r2, #7
 800299e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000e010 	.word	0xe000e010

080029b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff29 	bl	8002810 <__NVIC_SetPriorityGrouping>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d8:	f7ff ff3e 	bl	8002858 <__NVIC_GetPriorityGrouping>
 80029dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	f7ff ff8e 	bl	8002904 <NVIC_EncodePriority>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff5d 	bl	80028b0 <__NVIC_SetPriority>
}
 80029f6:	bf00      	nop
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff31 	bl	8002874 <__NVIC_EnableIRQ>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ffa2 	bl	800296c <SysTick_Config>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e014      	b.n	8002a6e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	791b      	ldrb	r3, [r3, #4]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7fe ff3f 	bl	80018d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e046      	b.n	8002b18 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	795b      	ldrb	r3, [r3, #5]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_DAC_Start+0x20>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e040      	b.n	8002b18 <HAL_DAC_Start+0xa2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6819      	ldr	r1, [r3, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2201      	movs	r2, #1
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10f      	bne.n	8002ae0 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002aca:	2b3c      	cmp	r3, #60	@ 0x3c
 8002acc:	d11d      	bne.n	8002b0a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	e014      	b.n	8002b0a <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	213c      	movs	r1, #60	@ 0x3c
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d107      	bne.n	8002b0a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0202 	orr.w	r2, r2, #2
 8002b08:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e015      	b.n	8002b6c <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	3308      	adds	r3, #8
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	e004      	b.n	8002b62 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3314      	adds	r3, #20
 8002b60:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	461a      	mov	r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_DAC_ConfigChannel+0x1c>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e042      	b.n	8002c1e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	795b      	ldrb	r3, [r3, #5]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_DAC_ConfigChannel+0x2c>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e03c      	b.n	8002c1e <HAL_DAC_ConfigChannel+0xa6>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2202      	movs	r2, #2
 8002bae:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	22c0      	movs	r2, #192	@ 0xc0
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002c1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3724      	adds	r7, #36	@ 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c38:	f7ff f9bc 	bl	8001fb4 <HAL_GetTick>
 8002c3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d008      	beq.n	8002c5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2280      	movs	r2, #128	@ 0x80
 8002c4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e052      	b.n	8002d02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0216 	bic.w	r2, r2, #22
 8002c6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <HAL_DMA_Abort+0x62>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0208 	bic.w	r2, r2, #8
 8002c9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cac:	e013      	b.n	8002cd6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cae:	f7ff f981 	bl	8001fb4 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d90c      	bls.n	8002cd6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e015      	b.n	8002d02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e4      	bne.n	8002cae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce8:	223f      	movs	r2, #63	@ 0x3f
 8002cea:	409a      	lsls	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d004      	beq.n	8002d28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2280      	movs	r2, #128	@ 0x80
 8002d22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e00c      	b.n	8002d42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2205      	movs	r2, #5
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e086      	b.n	8002e70 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d106      	bne.n	8002d7a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fe fdef 	bl	8001958 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e78 <HAL_ETH_Init+0x128>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e78 <HAL_ETH_Init+0x128>)
 8002d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d86:	4b3c      	ldr	r3, [pc, #240]	@ (8002e78 <HAL_ETH_Init+0x128>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d92:	4b3a      	ldr	r3, [pc, #232]	@ (8002e7c <HAL_ETH_Init+0x12c>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4a39      	ldr	r2, [pc, #228]	@ (8002e7c <HAL_ETH_Init+0x12c>)
 8002d98:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d9c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d9e:	4b37      	ldr	r3, [pc, #220]	@ (8002e7c <HAL_ETH_Init+0x12c>)
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4935      	ldr	r1, [pc, #212]	@ (8002e7c <HAL_ETH_Init+0x12c>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002dac:	4b33      	ldr	r3, [pc, #204]	@ (8002e7c <HAL_ETH_Init+0x12c>)
 8002dae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dc8:	f7ff f8f4 	bl	8001fb4 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002dce:	e011      	b.n	8002df4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002dd0:	f7ff f8f0 	bl	8001fb4 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002dde:	d909      	bls.n	8002df4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2204      	movs	r2, #4
 8002de4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	22e0      	movs	r2, #224	@ 0xe0
 8002dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e03d      	b.n	8002e70 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e4      	bne.n	8002dd0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f97a 	bl	8003100 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fa25 	bl	800325c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fa7b 	bl	800330e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2100      	movs	r1, #0
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f9e3 	bl	80031ec <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002e34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <HAL_ETH_Init+0x130>)
 8002e44:	430b      	orrs	r3, r1
 8002e46:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002e5a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2210      	movs	r2, #16
 8002e6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	00020060 	.word	0x00020060

08002e84 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4b53      	ldr	r3, [pc, #332]	@ (8002fe8 <ETH_SetMACConfig+0x164>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	7b9b      	ldrb	r3, [r3, #14]
 8002ea2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	7c12      	ldrb	r2, [r2, #16]
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d102      	bne.n	8002eb2 <ETH_SetMACConfig+0x2e>
 8002eac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002eb0:	e000      	b.n	8002eb4 <ETH_SetMACConfig+0x30>
 8002eb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002eb4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	7c52      	ldrb	r2, [r2, #17]
 8002eba:	2a00      	cmp	r2, #0
 8002ebc:	d102      	bne.n	8002ec4 <ETH_SetMACConfig+0x40>
 8002ebe:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002ec2:	e000      	b.n	8002ec6 <ETH_SetMACConfig+0x42>
 8002ec4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ec6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ecc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	7fdb      	ldrb	r3, [r3, #31]
 8002ed2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ed4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002eda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	7f92      	ldrb	r2, [r2, #30]
 8002ee0:	2a00      	cmp	r2, #0
 8002ee2:	d102      	bne.n	8002eea <ETH_SetMACConfig+0x66>
 8002ee4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ee8:	e000      	b.n	8002eec <ETH_SetMACConfig+0x68>
 8002eea:	2200      	movs	r2, #0
                        macconf->Speed |
 8002eec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	7f1b      	ldrb	r3, [r3, #28]
 8002ef2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ef4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002efa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	791b      	ldrb	r3, [r3, #4]
 8002f00:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f0a:	2a00      	cmp	r2, #0
 8002f0c:	d102      	bne.n	8002f14 <ETH_SetMACConfig+0x90>
 8002f0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f12:	e000      	b.n	8002f16 <ETH_SetMACConfig+0x92>
 8002f14:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	7bdb      	ldrb	r3, [r3, #15]
 8002f1c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f1e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f2c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f46:	2001      	movs	r0, #1
 8002f48:	f7ff f840 	bl	8001fcc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002f62:	4013      	ands	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002f72:	2a00      	cmp	r2, #0
 8002f74:	d101      	bne.n	8002f7a <ETH_SetMACConfig+0xf6>
 8002f76:	2280      	movs	r2, #128	@ 0x80
 8002f78:	e000      	b.n	8002f7c <ETH_SetMACConfig+0xf8>
 8002f7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f7c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002f8a:	2a01      	cmp	r2, #1
 8002f8c:	d101      	bne.n	8002f92 <ETH_SetMACConfig+0x10e>
 8002f8e:	2208      	movs	r2, #8
 8002f90:	e000      	b.n	8002f94 <ETH_SetMACConfig+0x110>
 8002f92:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f94:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002f9c:	2a01      	cmp	r2, #1
 8002f9e:	d101      	bne.n	8002fa4 <ETH_SetMACConfig+0x120>
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	e000      	b.n	8002fa6 <ETH_SetMACConfig+0x122>
 8002fa4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fa6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002fae:	2a01      	cmp	r2, #1
 8002fb0:	d101      	bne.n	8002fb6 <ETH_SetMACConfig+0x132>
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	e000      	b.n	8002fb8 <ETH_SetMACConfig+0x134>
 8002fb6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f7fe fffb 	bl	8001fcc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	619a      	str	r2, [r3, #24]
}
 8002fde:	bf00      	nop
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	fd20810f 	.word	0xfd20810f

08002fec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4b3d      	ldr	r3, [pc, #244]	@ (80030fc <ETH_SetDMAConfig+0x110>)
 8003006:	4013      	ands	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7b1b      	ldrb	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <ETH_SetDMAConfig+0x2c>
 8003012:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003016:	e000      	b.n	800301a <ETH_SetDMAConfig+0x2e>
 8003018:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	7b5b      	ldrb	r3, [r3, #13]
 800301e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003020:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	7f52      	ldrb	r2, [r2, #29]
 8003026:	2a00      	cmp	r2, #0
 8003028:	d102      	bne.n	8003030 <ETH_SetDMAConfig+0x44>
 800302a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800302e:	e000      	b.n	8003032 <ETH_SetDMAConfig+0x46>
 8003030:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003032:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	7b9b      	ldrb	r3, [r3, #14]
 8003038:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800303a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003040:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	7f1b      	ldrb	r3, [r3, #28]
 8003046:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003048:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	7f9b      	ldrb	r3, [r3, #30]
 800304e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003050:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003056:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800305e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003060:	4313      	orrs	r3, r2
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003070:	461a      	mov	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003082:	2001      	movs	r0, #1
 8003084:	f7fe ffa2 	bl	8001fcc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003090:	461a      	mov	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	791b      	ldrb	r3, [r3, #4]
 800309a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80030a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80030b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030e0:	2001      	movs	r0, #1
 80030e2:	f7fe ff73 	bl	8001fcc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	f8de3f23 	.word	0xf8de3f23

08003100 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0a6      	sub	sp, #152	@ 0x98
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003114:	2300      	movs	r3, #0
 8003116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800312a:	2301      	movs	r3, #1
 800312c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003142:	2300      	movs	r3, #0
 8003144:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003146:	2300      	movs	r3, #0
 8003148:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800314c:	2300      	movs	r3, #0
 800314e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003168:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800316c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800316e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800317a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff fe7f 	bl	8002e84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003186:	2301      	movs	r3, #1
 8003188:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800318a:	2301      	movs	r3, #1
 800318c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003194:	2301      	movs	r3, #1
 8003196:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80031a8:	2300      	movs	r3, #0
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80031b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031ba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80031bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80031c0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80031c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031c6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031d6:	f107 0308 	add.w	r3, r7, #8
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff05 	bl	8002fec <ETH_SetDMAConfig>
}
 80031e2:	bf00      	nop
 80031e4:	3798      	adds	r7, #152	@ 0x98
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3305      	adds	r3, #5
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	3204      	adds	r2, #4
 8003204:	7812      	ldrb	r2, [r2, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	4b11      	ldr	r3, [pc, #68]	@ (8003254 <ETH_MACAddressConfig+0x68>)
 800320e:	4413      	add	r3, r2
 8003210:	461a      	mov	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3303      	adds	r3, #3
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	061a      	lsls	r2, r3, #24
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3302      	adds	r3, #2
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3301      	adds	r3, #1
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	4313      	orrs	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <ETH_MACAddressConfig+0x6c>)
 800323e:	4413      	add	r3, r2
 8003240:	461a      	mov	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6013      	str	r3, [r2, #0]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40028040 	.word	0x40028040
 8003258:	40028044 	.word	0x40028044

0800325c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e03e      	b.n	80032e8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68d9      	ldr	r1, [r3, #12]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	440b      	add	r3, r1
 800327a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2200      	movs	r2, #0
 8003286:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2200      	movs	r2, #0
 8003292:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	3206      	adds	r2, #6
 800329c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d80c      	bhi.n	80032cc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68d9      	ldr	r1, [r3, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	e004      	b.n	80032d6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3301      	adds	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d9bd      	bls.n	800326a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003300:	611a      	str	r2, [r3, #16]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e048      	b.n	80033ae <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6919      	ldr	r1, [r3, #16]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2200      	movs	r2, #0
 8003338:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2200      	movs	r2, #0
 800334a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2200      	movs	r2, #0
 8003350:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003358:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	3212      	adds	r2, #18
 800337a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d80c      	bhi.n	800339e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6919      	ldr	r1, [r3, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	440b      	add	r3, r1
 8003396:	461a      	mov	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	60da      	str	r2, [r3, #12]
 800339c:	e004      	b.n	80033a8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	461a      	mov	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d9b3      	bls.n	800331c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033de:	60da      	str	r2, [r3, #12]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	@ 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	e175      	b.n	80036f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800340c:	2201      	movs	r2, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	429a      	cmp	r2, r3
 8003426:	f040 8164 	bne.w	80036f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d005      	beq.n	8003442 <HAL_GPIO_Init+0x56>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d130      	bne.n	80034a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	2203      	movs	r2, #3
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003478:	2201      	movs	r2, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 0201 	and.w	r2, r3, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d017      	beq.n	80034e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	2203      	movs	r2, #3
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d123      	bne.n	8003534 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	08da      	lsrs	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3208      	adds	r2, #8
 80034f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	220f      	movs	r2, #15
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	08da      	lsrs	r2, r3, #3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3208      	adds	r2, #8
 800352e:	69b9      	ldr	r1, [r7, #24]
 8003530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2203      	movs	r2, #3
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0203 	and.w	r2, r3, #3
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80be 	beq.w	80036f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003576:	4b66      	ldr	r3, [pc, #408]	@ (8003710 <HAL_GPIO_Init+0x324>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	4a65      	ldr	r2, [pc, #404]	@ (8003710 <HAL_GPIO_Init+0x324>)
 800357c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003580:	6453      	str	r3, [r2, #68]	@ 0x44
 8003582:	4b63      	ldr	r3, [pc, #396]	@ (8003710 <HAL_GPIO_Init+0x324>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800358e:	4a61      	ldr	r2, [pc, #388]	@ (8003714 <HAL_GPIO_Init+0x328>)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	3302      	adds	r3, #2
 8003596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	220f      	movs	r2, #15
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a58      	ldr	r2, [pc, #352]	@ (8003718 <HAL_GPIO_Init+0x32c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d037      	beq.n	800362a <HAL_GPIO_Init+0x23e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a57      	ldr	r2, [pc, #348]	@ (800371c <HAL_GPIO_Init+0x330>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d031      	beq.n	8003626 <HAL_GPIO_Init+0x23a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a56      	ldr	r2, [pc, #344]	@ (8003720 <HAL_GPIO_Init+0x334>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02b      	beq.n	8003622 <HAL_GPIO_Init+0x236>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a55      	ldr	r2, [pc, #340]	@ (8003724 <HAL_GPIO_Init+0x338>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d025      	beq.n	800361e <HAL_GPIO_Init+0x232>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a54      	ldr	r2, [pc, #336]	@ (8003728 <HAL_GPIO_Init+0x33c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01f      	beq.n	800361a <HAL_GPIO_Init+0x22e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a53      	ldr	r2, [pc, #332]	@ (800372c <HAL_GPIO_Init+0x340>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d019      	beq.n	8003616 <HAL_GPIO_Init+0x22a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a52      	ldr	r2, [pc, #328]	@ (8003730 <HAL_GPIO_Init+0x344>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_GPIO_Init+0x226>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a51      	ldr	r2, [pc, #324]	@ (8003734 <HAL_GPIO_Init+0x348>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00d      	beq.n	800360e <HAL_GPIO_Init+0x222>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a50      	ldr	r2, [pc, #320]	@ (8003738 <HAL_GPIO_Init+0x34c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <HAL_GPIO_Init+0x21e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4f      	ldr	r2, [pc, #316]	@ (800373c <HAL_GPIO_Init+0x350>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d101      	bne.n	8003606 <HAL_GPIO_Init+0x21a>
 8003602:	2309      	movs	r3, #9
 8003604:	e012      	b.n	800362c <HAL_GPIO_Init+0x240>
 8003606:	230a      	movs	r3, #10
 8003608:	e010      	b.n	800362c <HAL_GPIO_Init+0x240>
 800360a:	2308      	movs	r3, #8
 800360c:	e00e      	b.n	800362c <HAL_GPIO_Init+0x240>
 800360e:	2307      	movs	r3, #7
 8003610:	e00c      	b.n	800362c <HAL_GPIO_Init+0x240>
 8003612:	2306      	movs	r3, #6
 8003614:	e00a      	b.n	800362c <HAL_GPIO_Init+0x240>
 8003616:	2305      	movs	r3, #5
 8003618:	e008      	b.n	800362c <HAL_GPIO_Init+0x240>
 800361a:	2304      	movs	r3, #4
 800361c:	e006      	b.n	800362c <HAL_GPIO_Init+0x240>
 800361e:	2303      	movs	r3, #3
 8003620:	e004      	b.n	800362c <HAL_GPIO_Init+0x240>
 8003622:	2302      	movs	r3, #2
 8003624:	e002      	b.n	800362c <HAL_GPIO_Init+0x240>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_GPIO_Init+0x240>
 800362a:	2300      	movs	r3, #0
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	f002 0203 	and.w	r2, r2, #3
 8003632:	0092      	lsls	r2, r2, #2
 8003634:	4093      	lsls	r3, r2
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800363c:	4935      	ldr	r1, [pc, #212]	@ (8003714 <HAL_GPIO_Init+0x328>)
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	3302      	adds	r3, #2
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364a:	4b3d      	ldr	r3, [pc, #244]	@ (8003740 <HAL_GPIO_Init+0x354>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800366e:	4a34      	ldr	r2, [pc, #208]	@ (8003740 <HAL_GPIO_Init+0x354>)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003674:	4b32      	ldr	r3, [pc, #200]	@ (8003740 <HAL_GPIO_Init+0x354>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003698:	4a29      	ldr	r2, [pc, #164]	@ (8003740 <HAL_GPIO_Init+0x354>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800369e:	4b28      	ldr	r3, [pc, #160]	@ (8003740 <HAL_GPIO_Init+0x354>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003740 <HAL_GPIO_Init+0x354>)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003740 <HAL_GPIO_Init+0x354>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036ec:	4a14      	ldr	r2, [pc, #80]	@ (8003740 <HAL_GPIO_Init+0x354>)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3301      	adds	r3, #1
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	f67f ae86 	bls.w	800340c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3724      	adds	r7, #36	@ 0x24
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	40013800 	.word	0x40013800
 8003718:	40020000 	.word	0x40020000
 800371c:	40020400 	.word	0x40020400
 8003720:	40020800 	.word	0x40020800
 8003724:	40020c00 	.word	0x40020c00
 8003728:	40021000 	.word	0x40021000
 800372c:	40021400 	.word	0x40021400
 8003730:	40021800 	.word	0x40021800
 8003734:	40021c00 	.word	0x40021c00
 8003738:	40022000 	.word	0x40022000
 800373c:	40022400 	.word	0x40022400
 8003740:	40013c00 	.word	0x40013c00

08003744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
 8003750:	4613      	mov	r3, r2
 8003752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003754:	787b      	ldrb	r3, [r7, #1]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003760:	e003      	b.n	800376a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003762:	887b      	ldrh	r3, [r7, #2]
 8003764:	041a      	lsls	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	619a      	str	r2, [r3, #24]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003782:	4b08      	ldr	r3, [pc, #32]	@ (80037a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	4013      	ands	r3, r2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d006      	beq.n	800379c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800378e:	4a05      	ldr	r2, [pc, #20]	@ (80037a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe f804 	bl	80017a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40013c00 	.word	0x40013c00

080037a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e108      	b.n	80039cc <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fe f9df 	bl	8001b98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2203      	movs	r2, #3
 80037de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037e8:	d102      	bne.n	80037f0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f002 fd85 	bl	8006304 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7c1a      	ldrb	r2, [r3, #16]
 8003802:	f88d 2000 	strb.w	r2, [sp]
 8003806:	3304      	adds	r3, #4
 8003808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800380a:	f002 fd21 	bl	8006250 <USB_CoreInit>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0d5      	b.n	80039cc <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f002 fd7d 	bl	8006326 <USB_SetCurrentMode>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0c6      	b.n	80039cc <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383e:	2300      	movs	r3, #0
 8003840:	73fb      	strb	r3, [r7, #15]
 8003842:	e04a      	b.n	80038da <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	3315      	adds	r3, #21
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	3314      	adds	r3, #20
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	b298      	uxth	r0, r3
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	332e      	adds	r3, #46	@ 0x2e
 8003880:	4602      	mov	r2, r0
 8003882:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3318      	adds	r3, #24
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	331c      	adds	r3, #28
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	3320      	adds	r3, #32
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3324      	adds	r3, #36	@ 0x24
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	3301      	adds	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	791b      	ldrb	r3, [r3, #4]
 80038de:	7bfa      	ldrb	r2, [r7, #15]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3af      	bcc.n	8003844 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e4:	2300      	movs	r3, #0
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	e044      	b.n	8003974 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003912:	7bfa      	ldrb	r2, [r7, #15]
 8003914:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800392c:	7bfa      	ldrb	r2, [r7, #15]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003958:	7bfa      	ldrb	r2, [r7, #15]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	3301      	adds	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	791b      	ldrb	r3, [r3, #4]
 8003978:	7bfa      	ldrb	r2, [r7, #15]
 800397a:	429a      	cmp	r2, r3
 800397c:	d3b5      	bcc.n	80038ea <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	7c1a      	ldrb	r2, [r3, #16]
 8003986:	f88d 2000 	strb.w	r2, [sp]
 800398a:	3304      	adds	r3, #4
 800398c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800398e:	f002 fd17 	bl	80063c0 <USB_DevInit>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e013      	b.n	80039cc <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	7b1b      	ldrb	r3, [r3, #12]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d102      	bne.n	80039c0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f80a 	bl	80039d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f002 fed2 	bl	800676e <USB_DevDisconnect>

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a02:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	10000003 	.word	0x10000003

08003a1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a04      	ldr	r2, [pc, #16]	@ (8003a38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a2a:	6013      	str	r3, [r2, #0]
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40007000 	.word	0x40007000

08003a3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	4b23      	ldr	r3, [pc, #140]	@ (8003ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	4a22      	ldr	r2, [pc, #136]	@ (8003ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a52:	4b20      	ldr	r3, [pc, #128]	@ (8003ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a6a:	f7fe faa3 	bl	8001fb4 <HAL_GetTick>
 8003a6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a70:	e009      	b.n	8003a86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a72:	f7fe fa9f 	bl	8001fb4 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a80:	d901      	bls.n	8003a86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e022      	b.n	8003acc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a86:	4b14      	ldr	r3, [pc, #80]	@ (8003ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a92:	d1ee      	bne.n	8003a72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a94:	4b10      	ldr	r3, [pc, #64]	@ (8003ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aa0:	f7fe fa88 	bl	8001fb4 <HAL_GetTick>
 8003aa4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003aa6:	e009      	b.n	8003abc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003aa8:	f7fe fa84 	bl	8001fb4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ab6:	d901      	bls.n	8003abc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e007      	b.n	8003acc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003abc:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ac8:	d1ee      	bne.n	8003aa8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40007000 	.word	0x40007000

08003adc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e291      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8087 	beq.w	8003c0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b00:	4b96      	ldr	r3, [pc, #600]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d00c      	beq.n	8003b26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0c:	4b93      	ldr	r3, [pc, #588]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d112      	bne.n	8003b3e <HAL_RCC_OscConfig+0x62>
 8003b18:	4b90      	ldr	r3, [pc, #576]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b24:	d10b      	bne.n	8003b3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b26:	4b8d      	ldr	r3, [pc, #564]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d06c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x130>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d168      	bne.n	8003c0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e26b      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b46:	d106      	bne.n	8003b56 <HAL_RCC_OscConfig+0x7a>
 8003b48:	4b84      	ldr	r3, [pc, #528]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a83      	ldr	r2, [pc, #524]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	e02e      	b.n	8003bb4 <HAL_RCC_OscConfig+0xd8>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x9c>
 8003b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a7e      	ldr	r2, [pc, #504]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b7c      	ldr	r3, [pc, #496]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7b      	ldr	r2, [pc, #492]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e01d      	b.n	8003bb4 <HAL_RCC_OscConfig+0xd8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0xc0>
 8003b82:	4b76      	ldr	r3, [pc, #472]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a75      	ldr	r2, [pc, #468]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4b73      	ldr	r3, [pc, #460]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a72      	ldr	r2, [pc, #456]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCC_OscConfig+0xd8>
 8003b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a6e      	ldr	r2, [pc, #440]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a6b      	ldr	r2, [pc, #428]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d013      	beq.n	8003be4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe f9fa 	bl	8001fb4 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fe f9f6 	bl	8001fb4 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	@ 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e21f      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	4b61      	ldr	r3, [pc, #388]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0xe8>
 8003be2:	e014      	b.n	8003c0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fe f9e6 	bl	8001fb4 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fe f9e2 	bl	8001fb4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	@ 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e20b      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfe:	4b57      	ldr	r3, [pc, #348]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x110>
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d069      	beq.n	8003cee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c1a:	4b50      	ldr	r3, [pc, #320]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c26:	4b4d      	ldr	r3, [pc, #308]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d11c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x190>
 8003c32:	4b4a      	ldr	r3, [pc, #296]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d116      	bne.n	8003c6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3e:	4b47      	ldr	r3, [pc, #284]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_RCC_OscConfig+0x17a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d001      	beq.n	8003c56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e1df      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c56:	4b41      	ldr	r3, [pc, #260]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	493d      	ldr	r1, [pc, #244]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	e040      	b.n	8003cee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d023      	beq.n	8003cbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c74:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a38      	ldr	r2, [pc, #224]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe f998 	bl	8001fb4 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c88:	f7fe f994 	bl	8001fb4 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e1bd      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	4b30      	ldr	r3, [pc, #192]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4929      	ldr	r1, [pc, #164]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]
 8003cba:	e018      	b.n	8003cee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cbc:	4b27      	ldr	r3, [pc, #156]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a26      	ldr	r2, [pc, #152]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f974 	bl	8001fb4 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fe f970 	bl	8001fb4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e199      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d038      	beq.n	8003d6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d019      	beq.n	8003d36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d02:	4b16      	ldr	r3, [pc, #88]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d06:	4a15      	ldr	r2, [pc, #84]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fe f951 	bl	8001fb4 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d16:	f7fe f94d 	bl	8001fb4 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e176      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d28:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x23a>
 8003d34:	e01a      	b.n	8003d6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d36:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d3a:	4a08      	ldr	r2, [pc, #32]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d42:	f7fe f937 	bl	8001fb4 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4a:	f7fe f933 	bl	8001fb4 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d903      	bls.n	8003d60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e15c      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
 8003d5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d60:	4b91      	ldr	r3, [pc, #580]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1ee      	bne.n	8003d4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80a4 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7a:	4b8b      	ldr	r3, [pc, #556]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10d      	bne.n	8003da2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	4b88      	ldr	r3, [pc, #544]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	4a87      	ldr	r2, [pc, #540]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d92:	4b85      	ldr	r3, [pc, #532]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da2:	4b82      	ldr	r3, [pc, #520]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d118      	bne.n	8003de0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dae:	4b7f      	ldr	r3, [pc, #508]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7e      	ldr	r2, [pc, #504]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dba:	f7fe f8fb 	bl	8001fb4 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc2:	f7fe f8f7 	bl	8001fb4 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b64      	cmp	r3, #100	@ 0x64
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e120      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd4:	4b75      	ldr	r3, [pc, #468]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d106      	bne.n	8003df6 <HAL_RCC_OscConfig+0x31a>
 8003de8:	4b6f      	ldr	r3, [pc, #444]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dec:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df4:	e02d      	b.n	8003e52 <HAL_RCC_OscConfig+0x376>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x33c>
 8003dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	4a69      	ldr	r2, [pc, #420]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e0a:	4b67      	ldr	r3, [pc, #412]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0e:	4a66      	ldr	r2, [pc, #408]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e16:	e01c      	b.n	8003e52 <HAL_RCC_OscConfig+0x376>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d10c      	bne.n	8003e3a <HAL_RCC_OscConfig+0x35e>
 8003e20:	4b61      	ldr	r3, [pc, #388]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e24:	4a60      	ldr	r2, [pc, #384]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e26:	f043 0304 	orr.w	r3, r3, #4
 8003e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e30:	4a5d      	ldr	r2, [pc, #372]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e38:	e00b      	b.n	8003e52 <HAL_RCC_OscConfig+0x376>
 8003e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	4a5a      	ldr	r2, [pc, #360]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e46:	4b58      	ldr	r3, [pc, #352]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	4a57      	ldr	r2, [pc, #348]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d015      	beq.n	8003e86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7fe f8ab 	bl	8001fb4 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fe f8a7 	bl	8001fb4 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e0ce      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	4b4b      	ldr	r3, [pc, #300]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ee      	beq.n	8003e62 <HAL_RCC_OscConfig+0x386>
 8003e84:	e014      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fe f895 	bl	8001fb4 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fe f891 	bl	8001fb4 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0b8      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea4:	4b40      	ldr	r3, [pc, #256]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ee      	bne.n	8003e8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d105      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	4a3b      	ldr	r2, [pc, #236]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003ebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ec0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80a4 	beq.w	8004014 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ecc:	4b36      	ldr	r3, [pc, #216]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d06b      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d149      	bne.n	8003f74 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee0:	4b31      	ldr	r3, [pc, #196]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a30      	ldr	r2, [pc, #192]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fe f862 	bl	8001fb4 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef4:	f7fe f85e 	bl	8001fb4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e087      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	4b28      	ldr	r3, [pc, #160]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69da      	ldr	r2, [r3, #28]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	019b      	lsls	r3, r3, #6
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	085b      	lsrs	r3, r3, #1
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	061b      	lsls	r3, r3, #24
 8003f36:	4313      	orrs	r3, r2
 8003f38:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003f3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f3e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f40:	4b19      	ldr	r3, [pc, #100]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a18      	ldr	r2, [pc, #96]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003f46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fe f832 	bl	8001fb4 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fe f82e 	bl	8001fb4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e057      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	4b10      	ldr	r3, [pc, #64]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x478>
 8003f72:	e04f      	b.n	8004014 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0b      	ldr	r2, [pc, #44]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003f7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fe f818 	bl	8001fb4 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fe f814 	bl	8001fb4 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e03d      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	4b03      	ldr	r3, [pc, #12]	@ (8003fa8 <HAL_RCC_OscConfig+0x4cc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x4ac>
 8003fa6:	e035      	b.n	8004014 <HAL_RCC_OscConfig+0x538>
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004020 <HAL_RCC_OscConfig+0x544>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d028      	beq.n	8004010 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d121      	bne.n	8004010 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d11a      	bne.n	8004010 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fe6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d111      	bne.n	8004010 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff6:	085b      	lsrs	r3, r3, #1
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800

08004024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0d0      	b.n	80041de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	4b6a      	ldr	r3, [pc, #424]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d910      	bls.n	800406c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b67      	ldr	r3, [pc, #412]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 020f 	bic.w	r2, r3, #15
 8004052:	4965      	ldr	r1, [pc, #404]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b63      	ldr	r3, [pc, #396]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0b8      	b.n	80041de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004084:	4b59      	ldr	r3, [pc, #356]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4a58      	ldr	r2, [pc, #352]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 800408a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800408e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800409c:	4b53      	ldr	r3, [pc, #332]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	4a52      	ldr	r2, [pc, #328]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 80040a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a8:	4b50      	ldr	r3, [pc, #320]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	494d      	ldr	r1, [pc, #308]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d040      	beq.n	8004148 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b47      	ldr	r3, [pc, #284]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d115      	bne.n	8004106 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e07f      	b.n	80041de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e6:	4b41      	ldr	r3, [pc, #260]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e073      	b.n	80041de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f6:	4b3d      	ldr	r3, [pc, #244]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e06b      	b.n	80041de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004106:	4b39      	ldr	r3, [pc, #228]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f023 0203 	bic.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4936      	ldr	r1, [pc, #216]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	4313      	orrs	r3, r2
 8004116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004118:	f7fd ff4c 	bl	8001fb4 <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	e00a      	b.n	8004136 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004120:	f7fd ff48 	bl	8001fb4 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e053      	b.n	80041de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	4b2d      	ldr	r3, [pc, #180]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 020c 	and.w	r2, r3, #12
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	429a      	cmp	r2, r3
 8004146:	d1eb      	bne.n	8004120 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004148:	4b27      	ldr	r3, [pc, #156]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d210      	bcs.n	8004178 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b24      	ldr	r3, [pc, #144]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 020f 	bic.w	r2, r3, #15
 800415e:	4922      	ldr	r1, [pc, #136]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b20      	ldr	r3, [pc, #128]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e032      	b.n	80041de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004184:	4b19      	ldr	r3, [pc, #100]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4916      	ldr	r1, [pc, #88]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041a2:	4b12      	ldr	r3, [pc, #72]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	490e      	ldr	r1, [pc, #56]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041b6:	f000 f821 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80041ba:	4602      	mov	r2, r0
 80041bc:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	490a      	ldr	r1, [pc, #40]	@ (80041f0 <HAL_RCC_ClockConfig+0x1cc>)
 80041c8:	5ccb      	ldrb	r3, [r1, r3]
 80041ca:	fa22 f303 	lsr.w	r3, r2, r3
 80041ce:	4a09      	ldr	r2, [pc, #36]	@ (80041f4 <HAL_RCC_ClockConfig+0x1d0>)
 80041d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041d2:	4b09      	ldr	r3, [pc, #36]	@ (80041f8 <HAL_RCC_ClockConfig+0x1d4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fd fea8 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40023c00 	.word	0x40023c00
 80041ec:	40023800 	.word	0x40023800
 80041f0:	0800aa24 	.word	0x0800aa24
 80041f4:	20000000 	.word	0x20000000
 80041f8:	20000004 	.word	0x20000004

080041fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004200:	b094      	sub	sp, #80	@ 0x50
 8004202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	647b      	str	r3, [r7, #68]	@ 0x44
 8004208:	2300      	movs	r3, #0
 800420a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800420c:	2300      	movs	r3, #0
 800420e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004214:	4b79      	ldr	r3, [pc, #484]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 030c 	and.w	r3, r3, #12
 800421c:	2b08      	cmp	r3, #8
 800421e:	d00d      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0x40>
 8004220:	2b08      	cmp	r3, #8
 8004222:	f200 80e1 	bhi.w	80043e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x34>
 800422a:	2b04      	cmp	r3, #4
 800422c:	d003      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0x3a>
 800422e:	e0db      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004230:	4b73      	ldr	r3, [pc, #460]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x204>)
 8004232:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004234:	e0db      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004236:	4b73      	ldr	r3, [pc, #460]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x208>)
 8004238:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800423a:	e0d8      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800423c:	4b6f      	ldr	r3, [pc, #444]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004244:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004246:	4b6d      	ldr	r3, [pc, #436]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d063      	beq.n	800431a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004252:	4b6a      	ldr	r3, [pc, #424]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	099b      	lsrs	r3, r3, #6
 8004258:	2200      	movs	r2, #0
 800425a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800425c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800425e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004264:	633b      	str	r3, [r7, #48]	@ 0x30
 8004266:	2300      	movs	r3, #0
 8004268:	637b      	str	r3, [r7, #52]	@ 0x34
 800426a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800426e:	4622      	mov	r2, r4
 8004270:	462b      	mov	r3, r5
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f04f 0100 	mov.w	r1, #0
 800427a:	0159      	lsls	r1, r3, #5
 800427c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004280:	0150      	lsls	r0, r2, #5
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4621      	mov	r1, r4
 8004288:	1a51      	subs	r1, r2, r1
 800428a:	6139      	str	r1, [r7, #16]
 800428c:	4629      	mov	r1, r5
 800428e:	eb63 0301 	sbc.w	r3, r3, r1
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042a0:	4659      	mov	r1, fp
 80042a2:	018b      	lsls	r3, r1, #6
 80042a4:	4651      	mov	r1, sl
 80042a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042aa:	4651      	mov	r1, sl
 80042ac:	018a      	lsls	r2, r1, #6
 80042ae:	4651      	mov	r1, sl
 80042b0:	ebb2 0801 	subs.w	r8, r2, r1
 80042b4:	4659      	mov	r1, fp
 80042b6:	eb63 0901 	sbc.w	r9, r3, r1
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ce:	4690      	mov	r8, r2
 80042d0:	4699      	mov	r9, r3
 80042d2:	4623      	mov	r3, r4
 80042d4:	eb18 0303 	adds.w	r3, r8, r3
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	462b      	mov	r3, r5
 80042dc:	eb49 0303 	adc.w	r3, r9, r3
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ee:	4629      	mov	r1, r5
 80042f0:	024b      	lsls	r3, r1, #9
 80042f2:	4621      	mov	r1, r4
 80042f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042f8:	4621      	mov	r1, r4
 80042fa:	024a      	lsls	r2, r1, #9
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004302:	2200      	movs	r2, #0
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004306:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800430c:	f7fc fcdc 	bl	8000cc8 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4613      	mov	r3, r2
 8004316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004318:	e058      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800431a:	4b38      	ldr	r3, [pc, #224]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	099b      	lsrs	r3, r3, #6
 8004320:	2200      	movs	r2, #0
 8004322:	4618      	mov	r0, r3
 8004324:	4611      	mov	r1, r2
 8004326:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	2300      	movs	r3, #0
 800432e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004330:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004334:	4642      	mov	r2, r8
 8004336:	464b      	mov	r3, r9
 8004338:	f04f 0000 	mov.w	r0, #0
 800433c:	f04f 0100 	mov.w	r1, #0
 8004340:	0159      	lsls	r1, r3, #5
 8004342:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004346:	0150      	lsls	r0, r2, #5
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4641      	mov	r1, r8
 800434e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004352:	4649      	mov	r1, r9
 8004354:	eb63 0b01 	sbc.w	fp, r3, r1
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004364:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004368:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800436c:	ebb2 040a 	subs.w	r4, r2, sl
 8004370:	eb63 050b 	sbc.w	r5, r3, fp
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	00eb      	lsls	r3, r5, #3
 800437e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004382:	00e2      	lsls	r2, r4, #3
 8004384:	4614      	mov	r4, r2
 8004386:	461d      	mov	r5, r3
 8004388:	4643      	mov	r3, r8
 800438a:	18e3      	adds	r3, r4, r3
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	464b      	mov	r3, r9
 8004390:	eb45 0303 	adc.w	r3, r5, r3
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043a2:	4629      	mov	r1, r5
 80043a4:	028b      	lsls	r3, r1, #10
 80043a6:	4621      	mov	r1, r4
 80043a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043ac:	4621      	mov	r1, r4
 80043ae:	028a      	lsls	r2, r1, #10
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
 80043b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043b6:	2200      	movs	r2, #0
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	61fa      	str	r2, [r7, #28]
 80043bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c0:	f7fc fc82 	bl	8000cc8 <__aeabi_uldivmod>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4613      	mov	r3, r2
 80043ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043cc:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	3301      	adds	r3, #1
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80043dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043e6:	e002      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e8:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3750      	adds	r7, #80	@ 0x50
 80043f4:	46bd      	mov	sp, r7
 80043f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043fa:	bf00      	nop
 80043fc:	40023800 	.word	0x40023800
 8004400:	00f42400 	.word	0x00f42400
 8004404:	007a1200 	.word	0x007a1200

08004408 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800440c:	4b03      	ldr	r3, [pc, #12]	@ (800441c <HAL_RCC_GetHCLKFreq+0x14>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000000 	.word	0x20000000

08004420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004424:	f7ff fff0 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0a9b      	lsrs	r3, r3, #10
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4903      	ldr	r1, [pc, #12]	@ (8004444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004436:	5ccb      	ldrb	r3, [r1, r3]
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40023800 	.word	0x40023800
 8004444:	0800aa34 	.word	0x0800aa34

08004448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800444c:	f7ff ffdc 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0b5b      	lsrs	r3, r3, #13
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4903      	ldr	r1, [pc, #12]	@ (800446c <HAL_RCC_GetPCLK2Freq+0x24>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40023800 	.word	0x40023800
 800446c:	0800aa34 	.word	0x0800aa34

08004470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d012      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004498:	4b69      	ldr	r3, [pc, #420]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a68      	ldr	r2, [pc, #416]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80044a2:	6093      	str	r3, [r2, #8]
 80044a4:	4b66      	ldr	r3, [pc, #408]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ac:	4964      	ldr	r1, [pc, #400]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d017      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d8:	4959      	ldr	r1, [pc, #356]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044e8:	d101      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044ea:	2301      	movs	r3, #1
 80044ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d017      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004506:	4b4e      	ldr	r3, [pc, #312]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800450c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004514:	494a      	ldr	r1, [pc, #296]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004524:	d101      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004526:	2301      	movs	r3, #1
 8004528:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004532:	2301      	movs	r3, #1
 8004534:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004542:	2301      	movs	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 808b 	beq.w	800466a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004554:	4b3a      	ldr	r3, [pc, #232]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	4a39      	ldr	r2, [pc, #228]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800455e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004560:	4b37      	ldr	r3, [pc, #220]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800456c:	4b35      	ldr	r3, [pc, #212]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a34      	ldr	r2, [pc, #208]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004578:	f7fd fd1c 	bl	8001fb4 <HAL_GetTick>
 800457c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004580:	f7fd fd18 	bl	8001fb4 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	@ 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e357      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004592:	4b2c      	ldr	r3, [pc, #176]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800459e:	4b28      	ldr	r3, [pc, #160]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d035      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d02e      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045bc:	4b20      	ldr	r3, [pc, #128]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045de:	4a18      	ldr	r2, [pc, #96]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045e4:	4b16      	ldr	r3, [pc, #88]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d114      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fd fce0 	bl	8001fb4 <HAL_GetTick>
 80045f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f6:	e00a      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fd fcdc 	bl	8001fb4 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e319      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	4b0c      	ldr	r3, [pc, #48]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0ee      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004626:	d111      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004628:	4b05      	ldr	r3, [pc, #20]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004634:	4b04      	ldr	r3, [pc, #16]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004636:	400b      	ands	r3, r1
 8004638:	4901      	ldr	r1, [pc, #4]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
 800463e:	e00b      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004640:	40023800 	.word	0x40023800
 8004644:	40007000 	.word	0x40007000
 8004648:	0ffffcff 	.word	0x0ffffcff
 800464c:	4baa      	ldr	r3, [pc, #680]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4aa9      	ldr	r2, [pc, #676]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004652:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004656:	6093      	str	r3, [r2, #8]
 8004658:	4ba7      	ldr	r3, [pc, #668]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004664:	49a4      	ldr	r1, [pc, #656]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004666:	4313      	orrs	r3, r2
 8004668:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	d010      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004676:	4ba0      	ldr	r3, [pc, #640]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800467c:	4a9e      	ldr	r2, [pc, #632]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800467e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004682:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004686:	4b9c      	ldr	r3, [pc, #624]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004688:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004690:	4999      	ldr	r1, [pc, #612]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a4:	4b94      	ldr	r3, [pc, #592]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046b2:	4991      	ldr	r1, [pc, #580]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046c6:	4b8c      	ldr	r3, [pc, #560]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046d4:	4988      	ldr	r1, [pc, #544]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046e8:	4b83      	ldr	r3, [pc, #524]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f6:	4980      	ldr	r1, [pc, #512]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800470a:	4b7b      	ldr	r3, [pc, #492]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004710:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004718:	4977      	ldr	r1, [pc, #476]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800472c:	4b72      	ldr	r3, [pc, #456]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004732:	f023 0203 	bic.w	r2, r3, #3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473a:	496f      	ldr	r1, [pc, #444]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800474e:	4b6a      	ldr	r3, [pc, #424]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004754:	f023 020c 	bic.w	r2, r3, #12
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800475c:	4966      	ldr	r1, [pc, #408]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004770:	4b61      	ldr	r3, [pc, #388]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004776:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477e:	495e      	ldr	r1, [pc, #376]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004792:	4b59      	ldr	r3, [pc, #356]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004798:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a0:	4955      	ldr	r1, [pc, #340]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047b4:	4b50      	ldr	r3, [pc, #320]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c2:	494d      	ldr	r1, [pc, #308]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047d6:	4b48      	ldr	r3, [pc, #288]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e4:	4944      	ldr	r1, [pc, #272]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047f8:	4b3f      	ldr	r3, [pc, #252]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004806:	493c      	ldr	r1, [pc, #240]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800481a:	4b37      	ldr	r3, [pc, #220]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004820:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004828:	4933      	ldr	r1, [pc, #204]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800483c:	4b2e      	ldr	r3, [pc, #184]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004842:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800484a:	492b      	ldr	r1, [pc, #172]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d011      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800485e:	4b26      	ldr	r3, [pc, #152]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004864:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800486c:	4922      	ldr	r1, [pc, #136]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004878:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800487c:	d101      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800487e:	2301      	movs	r3, #1
 8004880:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800488e:	2301      	movs	r3, #1
 8004890:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800489e:	4b16      	ldr	r3, [pc, #88]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ac:	4912      	ldr	r1, [pc, #72]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048c0:	4b0d      	ldr	r3, [pc, #52]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d0:	4909      	ldr	r1, [pc, #36]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d006      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 80d9 	beq.w	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048ec:	4b02      	ldr	r3, [pc, #8]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a01      	ldr	r2, [pc, #4]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048f6:	e001      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80048f8:	40023800 	.word	0x40023800
 80048fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fe:	f7fd fb59 	bl	8001fb4 <HAL_GetTick>
 8004902:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004906:	f7fd fb55 	bl	8001fb4 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b64      	cmp	r3, #100	@ 0x64
 8004912:	d901      	bls.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e194      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004918:	4b6c      	ldr	r3, [pc, #432]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1f0      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d021      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004934:	2b00      	cmp	r3, #0
 8004936:	d11d      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004938:	4b64      	ldr	r3, [pc, #400]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800493a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800493e:	0c1b      	lsrs	r3, r3, #16
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004946:	4b61      	ldr	r3, [pc, #388]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800494c:	0e1b      	lsrs	r3, r3, #24
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	019a      	lsls	r2, r3, #6
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	431a      	orrs	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	061b      	lsls	r3, r3, #24
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	071b      	lsls	r3, r3, #28
 800496c:	4957      	ldr	r1, [pc, #348]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d004      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004984:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004992:	2b00      	cmp	r3, #0
 8004994:	d02e      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800499e:	d129      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049a0:	4b4a      	ldr	r3, [pc, #296]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049ae:	4b47      	ldr	r3, [pc, #284]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049b4:	0f1b      	lsrs	r3, r3, #28
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	019a      	lsls	r2, r3, #6
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	041b      	lsls	r3, r3, #16
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	061b      	lsls	r3, r3, #24
 80049ce:	431a      	orrs	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	071b      	lsls	r3, r3, #28
 80049d4:	493d      	ldr	r1, [pc, #244]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049dc:	4b3b      	ldr	r3, [pc, #236]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049e2:	f023 021f 	bic.w	r2, r3, #31
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	3b01      	subs	r3, #1
 80049ec:	4937      	ldr	r1, [pc, #220]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01d      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a00:	4b32      	ldr	r3, [pc, #200]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a06:	0e1b      	lsrs	r3, r3, #24
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a14:	0f1b      	lsrs	r3, r3, #28
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	019a      	lsls	r2, r3, #6
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	071b      	lsls	r3, r3, #28
 8004a34:	4925      	ldr	r1, [pc, #148]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d011      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	019a      	lsls	r2, r3, #6
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	041b      	lsls	r3, r3, #16
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	061b      	lsls	r3, r3, #24
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	071b      	lsls	r3, r3, #28
 8004a64:	4919      	ldr	r1, [pc, #100]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a6c:	4b17      	ldr	r3, [pc, #92]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a16      	ldr	r2, [pc, #88]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a78:	f7fd fa9c 	bl	8001fb4 <HAL_GetTick>
 8004a7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a80:	f7fd fa98 	bl	8001fb4 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b64      	cmp	r3, #100	@ 0x64
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e0d7      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a92:	4b0e      	ldr	r3, [pc, #56]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	f040 80cd 	bne.w	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004aa6:	4b09      	ldr	r3, [pc, #36]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a08      	ldr	r2, [pc, #32]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab2:	f7fd fa7f 	bl	8001fb4 <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ab8:	e00a      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004aba:	f7fd fa7b 	bl	8001fb4 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b64      	cmp	r3, #100	@ 0x64
 8004ac6:	d903      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e0ba      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004acc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ad0:	4b5e      	ldr	r3, [pc, #376]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004adc:	d0ed      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d02e      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d12a      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b06:	4b51      	ldr	r3, [pc, #324]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b14:	4b4d      	ldr	r3, [pc, #308]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1a:	0f1b      	lsrs	r3, r3, #28
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	019a      	lsls	r2, r3, #6
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	061b      	lsls	r3, r3, #24
 8004b34:	431a      	orrs	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	071b      	lsls	r3, r3, #28
 8004b3a:	4944      	ldr	r1, [pc, #272]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b42:	4b42      	ldr	r3, [pc, #264]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b48:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b50:	3b01      	subs	r3, #1
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	493d      	ldr	r1, [pc, #244]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d022      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b70:	d11d      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b72:	4b36      	ldr	r3, [pc, #216]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b78:	0e1b      	lsrs	r3, r3, #24
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b80:	4b32      	ldr	r3, [pc, #200]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b86:	0f1b      	lsrs	r3, r3, #28
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	019a      	lsls	r2, r3, #6
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	041b      	lsls	r3, r3, #16
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	061b      	lsls	r3, r3, #24
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	071b      	lsls	r3, r3, #28
 8004ba6:	4929      	ldr	r1, [pc, #164]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d028      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bba:	4b24      	ldr	r3, [pc, #144]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc0:	0e1b      	lsrs	r3, r3, #24
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bc8:	4b20      	ldr	r3, [pc, #128]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bce:	0c1b      	lsrs	r3, r3, #16
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	019a      	lsls	r2, r3, #6
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	431a      	orrs	r2, r3
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	071b      	lsls	r3, r3, #28
 8004bee:	4917      	ldr	r1, [pc, #92]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bf6:	4b15      	ldr	r3, [pc, #84]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	4911      	ldr	r1, [pc, #68]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0e      	ldr	r2, [pc, #56]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c18:	f7fd f9cc 	bl	8001fb4 <HAL_GetTick>
 8004c1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c20:	f7fd f9c8 	bl	8001fb4 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	@ 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e007      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c32:	4b06      	ldr	r3, [pc, #24]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c3e:	d1ef      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40023800 	.word	0x40023800

08004c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e040      	b.n	8004ce4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fc ff28 	bl	8001ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2224      	movs	r2, #36	@ 0x24
 8004c7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0201 	bic.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fe66 	bl	8005968 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fbff 	bl	80054a0 <UART_SetConfig>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e01b      	b.n	8004ce4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fee5 	bl	8005aac <UART_CheckIdleState>
 8004ce2:	4603      	mov	r3, r0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	@ 0x28
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d177      	bne.n	8004df4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_UART_Transmit+0x24>
 8004d0a:	88fb      	ldrh	r3, [r7, #6]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e070      	b.n	8004df6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2221      	movs	r2, #33	@ 0x21
 8004d20:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d22:	f7fd f947 	bl	8001fb4 <HAL_GetTick>
 8004d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	88fa      	ldrh	r2, [r7, #6]
 8004d2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d40:	d108      	bne.n	8004d54 <HAL_UART_Transmit+0x68>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	e003      	b.n	8004d5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d5c:	e02f      	b.n	8004dbe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	2180      	movs	r1, #128	@ 0x80
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fef6 	bl	8005b5a <UART_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e03b      	b.n	8004df6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	3302      	adds	r3, #2
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	e007      	b.n	8004dac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	781a      	ldrb	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	3301      	adds	r3, #1
 8004daa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1c9      	bne.n	8004d5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2140      	movs	r1, #64	@ 0x40
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fec0 	bl	8005b5a <UART_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d004      	beq.n	8004dea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e005      	b.n	8004df6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	e000      	b.n	8004df6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004df4:	2302      	movs	r3, #2
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b08a      	sub	sp, #40	@ 0x28
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d132      	bne.n	8004e7c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_UART_Receive_IT+0x24>
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e02b      	b.n	8004e7e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d018      	beq.n	8004e6c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	613b      	str	r3, [r7, #16]
   return(result);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	623b      	str	r3, [r7, #32]
 8004e5a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	69f9      	ldr	r1, [r7, #28]
 8004e5e:	6a3a      	ldr	r2, [r7, #32]
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e6      	bne.n	8004e3a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 fede 	bl	8005c34 <UART_Start_Receive_IT>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	e000      	b.n	8004e7e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3728      	adds	r7, #40	@ 0x28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b0ba      	sub	sp, #232	@ 0xe8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004eae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004eb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004ebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d115      	bne.n	8004ef0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00f      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d009      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 82b1 	beq.w	8005448 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	4798      	blx	r3
      }
      return;
 8004eee:	e2ab      	b.n	8005448 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8117 	beq.w	8005128 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f0a:	4b85      	ldr	r3, [pc, #532]	@ (8005120 <HAL_UART_IRQHandler+0x298>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 810a 	beq.w	8005128 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d011      	beq.n	8004f44 <HAL_UART_IRQHandler+0xbc>
 8004f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00b      	beq.n	8004f44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2201      	movs	r2, #1
 8004f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f3a:	f043 0201 	orr.w	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d011      	beq.n	8004f74 <HAL_UART_IRQHandler+0xec>
 8004f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2202      	movs	r2, #2
 8004f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f6a:	f043 0204 	orr.w	r2, r3, #4
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d011      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x11c>
 8004f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00b      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2204      	movs	r2, #4
 8004f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f9a:	f043 0202 	orr.w	r2, r3, #2
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d017      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d105      	bne.n	8004fc8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00b      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2208      	movs	r2, #8
 8004fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd6:	f043 0208 	orr.w	r2, r3, #8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d012      	beq.n	8005012 <HAL_UART_IRQHandler+0x18a>
 8004fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ff0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00c      	beq.n	8005012 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005000:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005008:	f043 0220 	orr.w	r2, r3, #32
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 8217 	beq.w	800544c <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800501e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00d      	beq.n	8005046 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800502a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800504c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505a:	2b40      	cmp	r3, #64	@ 0x40
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800505e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005062:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005066:	2b00      	cmp	r3, #0
 8005068:	d04f      	beq.n	800510a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fea8 	bl	8005dc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507a:	2b40      	cmp	r3, #64	@ 0x40
 800507c:	d141      	bne.n	8005102 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3308      	adds	r3, #8
 8005084:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005094:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800509c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3308      	adds	r3, #8
 80050a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80050aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80050ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80050b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80050c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1d9      	bne.n	800507e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d013      	beq.n	80050fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d6:	4a13      	ldr	r2, [pc, #76]	@ (8005124 <HAL_UART_IRQHandler+0x29c>)
 80050d8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fd fe13 	bl	8002d0a <HAL_DMA_Abort_IT>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d017      	beq.n	800511a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050f4:	4610      	mov	r0, r2
 80050f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	e00f      	b.n	800511a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9ba 	bl	8005474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	e00b      	b.n	800511a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9b6 	bl	8005474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005108:	e007      	b.n	800511a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f9b2 	bl	8005474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005118:	e198      	b.n	800544c <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511a:	bf00      	nop
    return;
 800511c:	e196      	b.n	800544c <HAL_UART_IRQHandler+0x5c4>
 800511e:	bf00      	nop
 8005120:	04000120 	.word	0x04000120
 8005124:	08005e89 	.word	0x08005e89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800512c:	2b01      	cmp	r3, #1
 800512e:	f040 8166 	bne.w	80053fe <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 815f 	beq.w	80053fe <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8158 	beq.w	80053fe <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2210      	movs	r2, #16
 8005154:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005160:	2b40      	cmp	r3, #64	@ 0x40
 8005162:	f040 80d0 	bne.w	8005306 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005172:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 80ab 	beq.w	80052d2 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005186:	429a      	cmp	r2, r3
 8005188:	f080 80a3 	bcs.w	80052d2 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005192:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a0:	f000 8086 	beq.w	80052b0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80051b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80051ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1da      	bne.n	80051a4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3308      	adds	r3, #8
 80051f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3308      	adds	r3, #8
 800520e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005212:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005216:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800521a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005224:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e1      	bne.n	80051ee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3308      	adds	r3, #8
 8005230:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800523a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800523c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005240:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3308      	adds	r3, #8
 800524a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800524e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005250:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005254:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800525c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e3      	bne.n	800522a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800527e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005280:	f023 0310 	bic.w	r3, r3, #16
 8005284:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005292:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005294:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005298:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e4      	bne.n	8005270 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fd fcbd 	bl	8002c2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	4619      	mov	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f8dc 	bl	8005488 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80052d0:	e0be      	b.n	8005450 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80052d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052dc:	429a      	cmp	r2, r3
 80052de:	f040 80b7 	bne.w	8005450 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ec:	f040 80b0 	bne.w	8005450 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80052fc:	4619      	mov	r1, r3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f8c2 	bl	8005488 <HAL_UARTEx_RxEventCallback>
      return;
 8005304:	e0a4      	b.n	8005450 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005312:	b29b      	uxth	r3, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 8096 	beq.w	8005454 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8005328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8091 	beq.w	8005454 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005346:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005354:	647b      	str	r3, [r7, #68]	@ 0x44
 8005356:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800535a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e4      	bne.n	8005332 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	623b      	str	r3, [r7, #32]
   return(result);
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800538c:	633a      	str	r2, [r7, #48]	@ 0x30
 800538e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005394:	e841 2300 	strex	r3, r2, [r1]
 8005398:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e3      	bne.n	8005368 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f023 0310 	bic.w	r3, r3, #16
 80053c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	69b9      	ldr	r1, [r7, #24]
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	617b      	str	r3, [r7, #20]
   return(result);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e4      	bne.n	80053b4 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f846 	bl	8005488 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053fc:	e02a      	b.n	8005454 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00e      	beq.n	8005428 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800540a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800540e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01c      	beq.n	8005458 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	4798      	blx	r3
    }
    return;
 8005426:	e017      	b.n	8005458 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800542c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d012      	beq.n	800545a <HAL_UART_IRQHandler+0x5d2>
 8005434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00c      	beq.n	800545a <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fd33 	bl	8005eac <UART_EndTransmit_IT>
    return;
 8005446:	e008      	b.n	800545a <HAL_UART_IRQHandler+0x5d2>
      return;
 8005448:	bf00      	nop
 800544a:	e006      	b.n	800545a <HAL_UART_IRQHandler+0x5d2>
    return;
 800544c:	bf00      	nop
 800544e:	e004      	b.n	800545a <HAL_UART_IRQHandler+0x5d2>
      return;
 8005450:	bf00      	nop
 8005452:	e002      	b.n	800545a <HAL_UART_IRQHandler+0x5d2>
      return;
 8005454:	bf00      	nop
 8005456:	e000      	b.n	800545a <HAL_UART_IRQHandler+0x5d2>
    return;
 8005458:	bf00      	nop
  }

}
 800545a:	37e8      	adds	r7, #232	@ 0xe8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4ba6      	ldr	r3, [pc, #664]	@ (8005764 <UART_SetConfig+0x2c4>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	6979      	ldr	r1, [r7, #20]
 80054d4:	430b      	orrs	r3, r1
 80054d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a94      	ldr	r2, [pc, #592]	@ (8005768 <UART_SetConfig+0x2c8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d120      	bne.n	800555e <UART_SetConfig+0xbe>
 800551c:	4b93      	ldr	r3, [pc, #588]	@ (800576c <UART_SetConfig+0x2cc>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b03      	cmp	r3, #3
 8005528:	d816      	bhi.n	8005558 <UART_SetConfig+0xb8>
 800552a:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <UART_SetConfig+0x90>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005541 	.word	0x08005541
 8005534:	0800554d 	.word	0x0800554d
 8005538:	08005547 	.word	0x08005547
 800553c:	08005553 	.word	0x08005553
 8005540:	2301      	movs	r3, #1
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e150      	b.n	80057e8 <UART_SetConfig+0x348>
 8005546:	2302      	movs	r3, #2
 8005548:	77fb      	strb	r3, [r7, #31]
 800554a:	e14d      	b.n	80057e8 <UART_SetConfig+0x348>
 800554c:	2304      	movs	r3, #4
 800554e:	77fb      	strb	r3, [r7, #31]
 8005550:	e14a      	b.n	80057e8 <UART_SetConfig+0x348>
 8005552:	2308      	movs	r3, #8
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e147      	b.n	80057e8 <UART_SetConfig+0x348>
 8005558:	2310      	movs	r3, #16
 800555a:	77fb      	strb	r3, [r7, #31]
 800555c:	e144      	b.n	80057e8 <UART_SetConfig+0x348>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a83      	ldr	r2, [pc, #524]	@ (8005770 <UART_SetConfig+0x2d0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d132      	bne.n	80055ce <UART_SetConfig+0x12e>
 8005568:	4b80      	ldr	r3, [pc, #512]	@ (800576c <UART_SetConfig+0x2cc>)
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556e:	f003 030c 	and.w	r3, r3, #12
 8005572:	2b0c      	cmp	r3, #12
 8005574:	d828      	bhi.n	80055c8 <UART_SetConfig+0x128>
 8005576:	a201      	add	r2, pc, #4	@ (adr r2, 800557c <UART_SetConfig+0xdc>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	080055b1 	.word	0x080055b1
 8005580:	080055c9 	.word	0x080055c9
 8005584:	080055c9 	.word	0x080055c9
 8005588:	080055c9 	.word	0x080055c9
 800558c:	080055bd 	.word	0x080055bd
 8005590:	080055c9 	.word	0x080055c9
 8005594:	080055c9 	.word	0x080055c9
 8005598:	080055c9 	.word	0x080055c9
 800559c:	080055b7 	.word	0x080055b7
 80055a0:	080055c9 	.word	0x080055c9
 80055a4:	080055c9 	.word	0x080055c9
 80055a8:	080055c9 	.word	0x080055c9
 80055ac:	080055c3 	.word	0x080055c3
 80055b0:	2300      	movs	r3, #0
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e118      	b.n	80057e8 <UART_SetConfig+0x348>
 80055b6:	2302      	movs	r3, #2
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e115      	b.n	80057e8 <UART_SetConfig+0x348>
 80055bc:	2304      	movs	r3, #4
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e112      	b.n	80057e8 <UART_SetConfig+0x348>
 80055c2:	2308      	movs	r3, #8
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	e10f      	b.n	80057e8 <UART_SetConfig+0x348>
 80055c8:	2310      	movs	r3, #16
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e10c      	b.n	80057e8 <UART_SetConfig+0x348>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a68      	ldr	r2, [pc, #416]	@ (8005774 <UART_SetConfig+0x2d4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d120      	bne.n	800561a <UART_SetConfig+0x17a>
 80055d8:	4b64      	ldr	r3, [pc, #400]	@ (800576c <UART_SetConfig+0x2cc>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055e2:	2b30      	cmp	r3, #48	@ 0x30
 80055e4:	d013      	beq.n	800560e <UART_SetConfig+0x16e>
 80055e6:	2b30      	cmp	r3, #48	@ 0x30
 80055e8:	d814      	bhi.n	8005614 <UART_SetConfig+0x174>
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d009      	beq.n	8005602 <UART_SetConfig+0x162>
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d810      	bhi.n	8005614 <UART_SetConfig+0x174>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <UART_SetConfig+0x15c>
 80055f6:	2b10      	cmp	r3, #16
 80055f8:	d006      	beq.n	8005608 <UART_SetConfig+0x168>
 80055fa:	e00b      	b.n	8005614 <UART_SetConfig+0x174>
 80055fc:	2300      	movs	r3, #0
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e0f2      	b.n	80057e8 <UART_SetConfig+0x348>
 8005602:	2302      	movs	r3, #2
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e0ef      	b.n	80057e8 <UART_SetConfig+0x348>
 8005608:	2304      	movs	r3, #4
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e0ec      	b.n	80057e8 <UART_SetConfig+0x348>
 800560e:	2308      	movs	r3, #8
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e0e9      	b.n	80057e8 <UART_SetConfig+0x348>
 8005614:	2310      	movs	r3, #16
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e0e6      	b.n	80057e8 <UART_SetConfig+0x348>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a56      	ldr	r2, [pc, #344]	@ (8005778 <UART_SetConfig+0x2d8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d120      	bne.n	8005666 <UART_SetConfig+0x1c6>
 8005624:	4b51      	ldr	r3, [pc, #324]	@ (800576c <UART_SetConfig+0x2cc>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800562e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005630:	d013      	beq.n	800565a <UART_SetConfig+0x1ba>
 8005632:	2bc0      	cmp	r3, #192	@ 0xc0
 8005634:	d814      	bhi.n	8005660 <UART_SetConfig+0x1c0>
 8005636:	2b80      	cmp	r3, #128	@ 0x80
 8005638:	d009      	beq.n	800564e <UART_SetConfig+0x1ae>
 800563a:	2b80      	cmp	r3, #128	@ 0x80
 800563c:	d810      	bhi.n	8005660 <UART_SetConfig+0x1c0>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <UART_SetConfig+0x1a8>
 8005642:	2b40      	cmp	r3, #64	@ 0x40
 8005644:	d006      	beq.n	8005654 <UART_SetConfig+0x1b4>
 8005646:	e00b      	b.n	8005660 <UART_SetConfig+0x1c0>
 8005648:	2300      	movs	r3, #0
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e0cc      	b.n	80057e8 <UART_SetConfig+0x348>
 800564e:	2302      	movs	r3, #2
 8005650:	77fb      	strb	r3, [r7, #31]
 8005652:	e0c9      	b.n	80057e8 <UART_SetConfig+0x348>
 8005654:	2304      	movs	r3, #4
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e0c6      	b.n	80057e8 <UART_SetConfig+0x348>
 800565a:	2308      	movs	r3, #8
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e0c3      	b.n	80057e8 <UART_SetConfig+0x348>
 8005660:	2310      	movs	r3, #16
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	e0c0      	b.n	80057e8 <UART_SetConfig+0x348>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a44      	ldr	r2, [pc, #272]	@ (800577c <UART_SetConfig+0x2dc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d125      	bne.n	80056bc <UART_SetConfig+0x21c>
 8005670:	4b3e      	ldr	r3, [pc, #248]	@ (800576c <UART_SetConfig+0x2cc>)
 8005672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800567a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800567e:	d017      	beq.n	80056b0 <UART_SetConfig+0x210>
 8005680:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005684:	d817      	bhi.n	80056b6 <UART_SetConfig+0x216>
 8005686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800568a:	d00b      	beq.n	80056a4 <UART_SetConfig+0x204>
 800568c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005690:	d811      	bhi.n	80056b6 <UART_SetConfig+0x216>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <UART_SetConfig+0x1fe>
 8005696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800569a:	d006      	beq.n	80056aa <UART_SetConfig+0x20a>
 800569c:	e00b      	b.n	80056b6 <UART_SetConfig+0x216>
 800569e:	2300      	movs	r3, #0
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e0a1      	b.n	80057e8 <UART_SetConfig+0x348>
 80056a4:	2302      	movs	r3, #2
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e09e      	b.n	80057e8 <UART_SetConfig+0x348>
 80056aa:	2304      	movs	r3, #4
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e09b      	b.n	80057e8 <UART_SetConfig+0x348>
 80056b0:	2308      	movs	r3, #8
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e098      	b.n	80057e8 <UART_SetConfig+0x348>
 80056b6:	2310      	movs	r3, #16
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	e095      	b.n	80057e8 <UART_SetConfig+0x348>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a2f      	ldr	r2, [pc, #188]	@ (8005780 <UART_SetConfig+0x2e0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d125      	bne.n	8005712 <UART_SetConfig+0x272>
 80056c6:	4b29      	ldr	r3, [pc, #164]	@ (800576c <UART_SetConfig+0x2cc>)
 80056c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056d4:	d017      	beq.n	8005706 <UART_SetConfig+0x266>
 80056d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056da:	d817      	bhi.n	800570c <UART_SetConfig+0x26c>
 80056dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e0:	d00b      	beq.n	80056fa <UART_SetConfig+0x25a>
 80056e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e6:	d811      	bhi.n	800570c <UART_SetConfig+0x26c>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <UART_SetConfig+0x254>
 80056ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f0:	d006      	beq.n	8005700 <UART_SetConfig+0x260>
 80056f2:	e00b      	b.n	800570c <UART_SetConfig+0x26c>
 80056f4:	2301      	movs	r3, #1
 80056f6:	77fb      	strb	r3, [r7, #31]
 80056f8:	e076      	b.n	80057e8 <UART_SetConfig+0x348>
 80056fa:	2302      	movs	r3, #2
 80056fc:	77fb      	strb	r3, [r7, #31]
 80056fe:	e073      	b.n	80057e8 <UART_SetConfig+0x348>
 8005700:	2304      	movs	r3, #4
 8005702:	77fb      	strb	r3, [r7, #31]
 8005704:	e070      	b.n	80057e8 <UART_SetConfig+0x348>
 8005706:	2308      	movs	r3, #8
 8005708:	77fb      	strb	r3, [r7, #31]
 800570a:	e06d      	b.n	80057e8 <UART_SetConfig+0x348>
 800570c:	2310      	movs	r3, #16
 800570e:	77fb      	strb	r3, [r7, #31]
 8005710:	e06a      	b.n	80057e8 <UART_SetConfig+0x348>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1b      	ldr	r2, [pc, #108]	@ (8005784 <UART_SetConfig+0x2e4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d138      	bne.n	800578e <UART_SetConfig+0x2ee>
 800571c:	4b13      	ldr	r3, [pc, #76]	@ (800576c <UART_SetConfig+0x2cc>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005722:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005726:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800572a:	d017      	beq.n	800575c <UART_SetConfig+0x2bc>
 800572c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005730:	d82a      	bhi.n	8005788 <UART_SetConfig+0x2e8>
 8005732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005736:	d00b      	beq.n	8005750 <UART_SetConfig+0x2b0>
 8005738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800573c:	d824      	bhi.n	8005788 <UART_SetConfig+0x2e8>
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <UART_SetConfig+0x2aa>
 8005742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005746:	d006      	beq.n	8005756 <UART_SetConfig+0x2b6>
 8005748:	e01e      	b.n	8005788 <UART_SetConfig+0x2e8>
 800574a:	2300      	movs	r3, #0
 800574c:	77fb      	strb	r3, [r7, #31]
 800574e:	e04b      	b.n	80057e8 <UART_SetConfig+0x348>
 8005750:	2302      	movs	r3, #2
 8005752:	77fb      	strb	r3, [r7, #31]
 8005754:	e048      	b.n	80057e8 <UART_SetConfig+0x348>
 8005756:	2304      	movs	r3, #4
 8005758:	77fb      	strb	r3, [r7, #31]
 800575a:	e045      	b.n	80057e8 <UART_SetConfig+0x348>
 800575c:	2308      	movs	r3, #8
 800575e:	77fb      	strb	r3, [r7, #31]
 8005760:	e042      	b.n	80057e8 <UART_SetConfig+0x348>
 8005762:	bf00      	nop
 8005764:	efff69f3 	.word	0xefff69f3
 8005768:	40011000 	.word	0x40011000
 800576c:	40023800 	.word	0x40023800
 8005770:	40004400 	.word	0x40004400
 8005774:	40004800 	.word	0x40004800
 8005778:	40004c00 	.word	0x40004c00
 800577c:	40005000 	.word	0x40005000
 8005780:	40011400 	.word	0x40011400
 8005784:	40007800 	.word	0x40007800
 8005788:	2310      	movs	r3, #16
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e02c      	b.n	80057e8 <UART_SetConfig+0x348>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a72      	ldr	r2, [pc, #456]	@ (800595c <UART_SetConfig+0x4bc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d125      	bne.n	80057e4 <UART_SetConfig+0x344>
 8005798:	4b71      	ldr	r3, [pc, #452]	@ (8005960 <UART_SetConfig+0x4c0>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80057a2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80057a6:	d017      	beq.n	80057d8 <UART_SetConfig+0x338>
 80057a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80057ac:	d817      	bhi.n	80057de <UART_SetConfig+0x33e>
 80057ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b2:	d00b      	beq.n	80057cc <UART_SetConfig+0x32c>
 80057b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b8:	d811      	bhi.n	80057de <UART_SetConfig+0x33e>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <UART_SetConfig+0x326>
 80057be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057c2:	d006      	beq.n	80057d2 <UART_SetConfig+0x332>
 80057c4:	e00b      	b.n	80057de <UART_SetConfig+0x33e>
 80057c6:	2300      	movs	r3, #0
 80057c8:	77fb      	strb	r3, [r7, #31]
 80057ca:	e00d      	b.n	80057e8 <UART_SetConfig+0x348>
 80057cc:	2302      	movs	r3, #2
 80057ce:	77fb      	strb	r3, [r7, #31]
 80057d0:	e00a      	b.n	80057e8 <UART_SetConfig+0x348>
 80057d2:	2304      	movs	r3, #4
 80057d4:	77fb      	strb	r3, [r7, #31]
 80057d6:	e007      	b.n	80057e8 <UART_SetConfig+0x348>
 80057d8:	2308      	movs	r3, #8
 80057da:	77fb      	strb	r3, [r7, #31]
 80057dc:	e004      	b.n	80057e8 <UART_SetConfig+0x348>
 80057de:	2310      	movs	r3, #16
 80057e0:	77fb      	strb	r3, [r7, #31]
 80057e2:	e001      	b.n	80057e8 <UART_SetConfig+0x348>
 80057e4:	2310      	movs	r3, #16
 80057e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057f0:	d15b      	bne.n	80058aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80057f2:	7ffb      	ldrb	r3, [r7, #31]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d828      	bhi.n	800584a <UART_SetConfig+0x3aa>
 80057f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005800 <UART_SetConfig+0x360>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005825 	.word	0x08005825
 8005804:	0800582d 	.word	0x0800582d
 8005808:	08005835 	.word	0x08005835
 800580c:	0800584b 	.word	0x0800584b
 8005810:	0800583b 	.word	0x0800583b
 8005814:	0800584b 	.word	0x0800584b
 8005818:	0800584b 	.word	0x0800584b
 800581c:	0800584b 	.word	0x0800584b
 8005820:	08005843 	.word	0x08005843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005824:	f7fe fdfc 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8005828:	61b8      	str	r0, [r7, #24]
        break;
 800582a:	e013      	b.n	8005854 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800582c:	f7fe fe0c 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 8005830:	61b8      	str	r0, [r7, #24]
        break;
 8005832:	e00f      	b.n	8005854 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005834:	4b4b      	ldr	r3, [pc, #300]	@ (8005964 <UART_SetConfig+0x4c4>)
 8005836:	61bb      	str	r3, [r7, #24]
        break;
 8005838:	e00c      	b.n	8005854 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583a:	f7fe fcdf 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 800583e:	61b8      	str	r0, [r7, #24]
        break;
 8005840:	e008      	b.n	8005854 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005846:	61bb      	str	r3, [r7, #24]
        break;
 8005848:	e004      	b.n	8005854 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	77bb      	strb	r3, [r7, #30]
        break;
 8005852:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d074      	beq.n	8005944 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	005a      	lsls	r2, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	085b      	lsrs	r3, r3, #1
 8005864:	441a      	add	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	fbb2 f3f3 	udiv	r3, r2, r3
 800586e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2b0f      	cmp	r3, #15
 8005874:	d916      	bls.n	80058a4 <UART_SetConfig+0x404>
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800587c:	d212      	bcs.n	80058a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f023 030f 	bic.w	r3, r3, #15
 8005886:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	b29b      	uxth	r3, r3
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	b29a      	uxth	r2, r3
 8005894:	89fb      	ldrh	r3, [r7, #14]
 8005896:	4313      	orrs	r3, r2
 8005898:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	89fa      	ldrh	r2, [r7, #14]
 80058a0:	60da      	str	r2, [r3, #12]
 80058a2:	e04f      	b.n	8005944 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	77bb      	strb	r3, [r7, #30]
 80058a8:	e04c      	b.n	8005944 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058aa:	7ffb      	ldrb	r3, [r7, #31]
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d828      	bhi.n	8005902 <UART_SetConfig+0x462>
 80058b0:	a201      	add	r2, pc, #4	@ (adr r2, 80058b8 <UART_SetConfig+0x418>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	080058e5 	.word	0x080058e5
 80058c0:	080058ed 	.word	0x080058ed
 80058c4:	08005903 	.word	0x08005903
 80058c8:	080058f3 	.word	0x080058f3
 80058cc:	08005903 	.word	0x08005903
 80058d0:	08005903 	.word	0x08005903
 80058d4:	08005903 	.word	0x08005903
 80058d8:	080058fb 	.word	0x080058fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058dc:	f7fe fda0 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 80058e0:	61b8      	str	r0, [r7, #24]
        break;
 80058e2:	e013      	b.n	800590c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e4:	f7fe fdb0 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 80058e8:	61b8      	str	r0, [r7, #24]
        break;
 80058ea:	e00f      	b.n	800590c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005964 <UART_SetConfig+0x4c4>)
 80058ee:	61bb      	str	r3, [r7, #24]
        break;
 80058f0:	e00c      	b.n	800590c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f2:	f7fe fc83 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80058f6:	61b8      	str	r0, [r7, #24]
        break;
 80058f8:	e008      	b.n	800590c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058fe:	61bb      	str	r3, [r7, #24]
        break;
 8005900:	e004      	b.n	800590c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	77bb      	strb	r3, [r7, #30]
        break;
 800590a:	bf00      	nop
    }

    if (pclk != 0U)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d018      	beq.n	8005944 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	085a      	lsrs	r2, r3, #1
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	441a      	add	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b0f      	cmp	r3, #15
 800592a:	d909      	bls.n	8005940 <UART_SetConfig+0x4a0>
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005932:	d205      	bcs.n	8005940 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	b29a      	uxth	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	60da      	str	r2, [r3, #12]
 800593e:	e001      	b.n	8005944 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005950:	7fbb      	ldrb	r3, [r7, #30]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40007c00 	.word	0x40007c00
 8005960:	40023800 	.word	0x40023800
 8005964:	00f42400 	.word	0x00f42400

08005968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01a      	beq.n	8005a7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a66:	d10a      	bne.n	8005a7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	605a      	str	r2, [r3, #4]
  }
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08c      	sub	sp, #48	@ 0x30
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005abc:	f7fc fa7a 	bl	8001fb4 <HAL_GetTick>
 8005ac0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d12e      	bne.n	8005b2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f83b 	bl	8005b5a <UART_WaitOnFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d021      	beq.n	8005b2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005afe:	623b      	str	r3, [r7, #32]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	61fb      	str	r3, [r7, #28]
 8005b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	69b9      	ldr	r1, [r7, #24]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	617b      	str	r3, [r7, #20]
   return(result);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e6      	bne.n	8005aea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e011      	b.n	8005b52 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3728      	adds	r7, #40	@ 0x28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6a:	e04f      	b.n	8005c0c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b72:	d04b      	beq.n	8005c0c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b74:	f7fc fa1e 	bl	8001fb4 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <UART_WaitOnFlagUntilTimeout+0x30>
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e04e      	b.n	8005c2c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d037      	beq.n	8005c0c <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b80      	cmp	r3, #128	@ 0x80
 8005ba0:	d034      	beq.n	8005c0c <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b40      	cmp	r3, #64	@ 0x40
 8005ba6:	d031      	beq.n	8005c0c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d110      	bne.n	8005bd8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2208      	movs	r2, #8
 8005bbc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f8fe 	bl	8005dc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e029      	b.n	8005c2c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005be6:	d111      	bne.n	8005c0c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bf0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f8e4 	bl	8005dc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e00f      	b.n	8005c2c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69da      	ldr	r2, [r3, #28]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4013      	ands	r3, r2
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	bf0c      	ite	eq
 8005c1c:	2301      	moveq	r3, #1
 8005c1e:	2300      	movne	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d0a0      	beq.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b097      	sub	sp, #92	@ 0x5c
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c66:	d10e      	bne.n	8005c86 <UART_Start_Receive_IT+0x52>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d105      	bne.n	8005c7c <UART_Start_Receive_IT+0x48>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005c76:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c7a:	e02d      	b.n	8005cd8 <UART_Start_Receive_IT+0xa4>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	22ff      	movs	r2, #255	@ 0xff
 8005c80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c84:	e028      	b.n	8005cd8 <UART_Start_Receive_IT+0xa4>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10d      	bne.n	8005caa <UART_Start_Receive_IT+0x76>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d104      	bne.n	8005ca0 <UART_Start_Receive_IT+0x6c>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	22ff      	movs	r2, #255	@ 0xff
 8005c9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c9e:	e01b      	b.n	8005cd8 <UART_Start_Receive_IT+0xa4>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	227f      	movs	r2, #127	@ 0x7f
 8005ca4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ca8:	e016      	b.n	8005cd8 <UART_Start_Receive_IT+0xa4>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cb2:	d10d      	bne.n	8005cd0 <UART_Start_Receive_IT+0x9c>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d104      	bne.n	8005cc6 <UART_Start_Receive_IT+0x92>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	227f      	movs	r2, #127	@ 0x7f
 8005cc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005cc4:	e008      	b.n	8005cd8 <UART_Start_Receive_IT+0xa4>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	223f      	movs	r2, #63	@ 0x3f
 8005cca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005cce:	e003      	b.n	8005cd8 <UART_Start_Receive_IT+0xa4>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2222      	movs	r2, #34	@ 0x22
 8005ce4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3308      	adds	r3, #8
 8005cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3308      	adds	r3, #8
 8005d06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d08:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005d0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d24:	d107      	bne.n	8005d36 <UART_Start_Receive_IT+0x102>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4a21      	ldr	r2, [pc, #132]	@ (8005db8 <UART_Start_Receive_IT+0x184>)
 8005d32:	669a      	str	r2, [r3, #104]	@ 0x68
 8005d34:	e002      	b.n	8005d3c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4a20      	ldr	r2, [pc, #128]	@ (8005dbc <UART_Start_Receive_IT+0x188>)
 8005d3a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d019      	beq.n	8005d78 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d64:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e6      	bne.n	8005d44 <UART_Start_Receive_IT+0x110>
 8005d76:	e018      	b.n	8005daa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	613b      	str	r3, [r7, #16]
   return(result);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f043 0320 	orr.w	r3, r3, #32
 8005d8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d96:	623b      	str	r3, [r7, #32]
 8005d98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	69f9      	ldr	r1, [r7, #28]
 8005d9c:	6a3a      	ldr	r2, [r7, #32]
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e6      	bne.n	8005d78 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	375c      	adds	r7, #92	@ 0x5c
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	080060a9 	.word	0x080060a9
 8005dbc:	08005f01 	.word	0x08005f01

08005dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b095      	sub	sp, #84	@ 0x54
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005de6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005de8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e6      	bne.n	8005dc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3308      	adds	r3, #8
 8005e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f023 0301 	bic.w	r3, r3, #1
 8005e10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3308      	adds	r3, #8
 8005e18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e5      	bne.n	8005dfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d118      	bne.n	8005e68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f023 0310 	bic.w	r3, r3, #16
 8005e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6979      	ldr	r1, [r7, #20]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	613b      	str	r3, [r7, #16]
   return(result);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e6      	bne.n	8005e36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e7c:	bf00      	nop
 8005e7e:	3754      	adds	r7, #84	@ 0x54
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff fae8 	bl	8005474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	6979      	ldr	r1, [r7, #20]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	613b      	str	r3, [r7, #16]
   return(result);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e6      	bne.n	8005eb4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff fab4 	bl	8005460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ef8:	bf00      	nop
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b09c      	sub	sp, #112	@ 0x70
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f18:	2b22      	cmp	r3, #34	@ 0x22
 8005f1a:	f040 80b9 	bne.w	8006090 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005f2c:	b2d9      	uxtb	r1, r3
 8005f2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f38:	400a      	ands	r2, r1
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f040 809c 	bne.w	80060a0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e6      	bne.n	8005f68 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fac:	f023 0301 	bic.w	r3, r3, #1
 8005fb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005fba:	647a      	str	r2, [r7, #68]	@ 0x44
 8005fbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e5      	bne.n	8005f9a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d018      	beq.n	8006022 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006004:	663b      	str	r3, [r7, #96]	@ 0x60
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800600e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006010:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e6      	bne.n	8005ff0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006026:	2b01      	cmp	r3, #1
 8006028:	d12e      	bne.n	8006088 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	60fb      	str	r3, [r7, #12]
   return(result);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f023 0310 	bic.w	r3, r3, #16
 8006044:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	69b9      	ldr	r1, [r7, #24]
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	617b      	str	r3, [r7, #20]
   return(result);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e6      	bne.n	8006030 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b10      	cmp	r3, #16
 800606e:	d103      	bne.n	8006078 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2210      	movs	r2, #16
 8006076:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800607e:	4619      	mov	r1, r3
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7ff fa01 	bl	8005488 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006086:	e00b      	b.n	80060a0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7fb fb5b 	bl	8001744 <HAL_UART_RxCpltCallback>
}
 800608e:	e007      	b.n	80060a0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0208 	orr.w	r2, r2, #8
 800609e:	619a      	str	r2, [r3, #24]
}
 80060a0:	bf00      	nop
 80060a2:	3770      	adds	r7, #112	@ 0x70
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b09c      	sub	sp, #112	@ 0x70
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80060b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060c0:	2b22      	cmp	r3, #34	@ 0x22
 80060c2:	f040 80b9 	bne.w	8006238 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80060d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80060da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80060de:	4013      	ands	r3, r2
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ea:	1c9a      	adds	r2, r3, #2
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	f040 809c 	bne.w	8006248 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800611e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006124:	667b      	str	r3, [r7, #100]	@ 0x64
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800612e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006130:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006134:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800613c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e6      	bne.n	8006110 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3308      	adds	r3, #8
 8006148:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006154:	f023 0301 	bic.w	r3, r3, #1
 8006158:	663b      	str	r3, [r7, #96]	@ 0x60
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3308      	adds	r3, #8
 8006160:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006162:	643a      	str	r2, [r7, #64]	@ 0x40
 8006164:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006168:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e5      	bne.n	8006142 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d018      	beq.n	80061ca <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061b8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e6      	bne.n	8006198 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d12e      	bne.n	8006230 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f023 0310 	bic.w	r3, r3, #16
 80061ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6979      	ldr	r1, [r7, #20]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	613b      	str	r3, [r7, #16]
   return(result);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e6      	bne.n	80061d8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b10      	cmp	r3, #16
 8006216:	d103      	bne.n	8006220 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2210      	movs	r2, #16
 800621e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff f92d 	bl	8005488 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800622e:	e00b      	b.n	8006248 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7fb fa87 	bl	8001744 <HAL_UART_RxCpltCallback>
}
 8006236:	e007      	b.n	8006248 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0208 	orr.w	r2, r2, #8
 8006246:	619a      	str	r2, [r3, #24]
}
 8006248:	bf00      	nop
 800624a:	3770      	adds	r7, #112	@ 0x70
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006250:	b084      	sub	sp, #16
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	f107 001c 	add.w	r0, r7, #28
 800625e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006262:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006266:	2b01      	cmp	r3, #1
 8006268:	d121      	bne.n	80062ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	4b21      	ldr	r3, [pc, #132]	@ (8006300 <USB_CoreInit+0xb0>)
 800627c:	4013      	ands	r3, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800628e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006292:	2b01      	cmp	r3, #1
 8006294:	d105      	bne.n	80062a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa92 	bl	80067cc <USB_CoreReset>
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]
 80062ac:	e010      	b.n	80062d0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa86 	bl	80067cc <USB_CoreReset>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80062d0:	7fbb      	ldrb	r3, [r7, #30]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d10b      	bne.n	80062ee <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f043 0206 	orr.w	r2, r3, #6
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f043 0220 	orr.w	r2, r3, #32
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062fa:	b004      	add	sp, #16
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	ffbdffbf 	.word	0xffbdffbf

08006304 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f023 0201 	bic.w	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	460b      	mov	r3, r1
 8006330:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d115      	bne.n	8006374 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006354:	200a      	movs	r0, #10
 8006356:	f7fb fe39 	bl	8001fcc <HAL_Delay>
      ms += 10U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	330a      	adds	r3, #10
 800635e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fa25 	bl	80067b0 <USB_GetMode>
 8006366:	4603      	mov	r3, r0
 8006368:	2b01      	cmp	r3, #1
 800636a:	d01e      	beq.n	80063aa <USB_SetCurrentMode+0x84>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006370:	d9f0      	bls.n	8006354 <USB_SetCurrentMode+0x2e>
 8006372:	e01a      	b.n	80063aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d115      	bne.n	80063a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006386:	200a      	movs	r0, #10
 8006388:	f7fb fe20 	bl	8001fcc <HAL_Delay>
      ms += 10U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	330a      	adds	r3, #10
 8006390:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa0c 	bl	80067b0 <USB_GetMode>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <USB_SetCurrentMode+0x84>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80063a2:	d9f0      	bls.n	8006386 <USB_SetCurrentMode+0x60>
 80063a4:	e001      	b.n	80063aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e005      	b.n	80063b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80063ae:	d101      	bne.n	80063b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063c0:	b084      	sub	sp, #16
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b086      	sub	sp, #24
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80063ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063da:	2300      	movs	r3, #0
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	e009      	b.n	80063f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	3340      	adds	r3, #64	@ 0x40
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	2200      	movs	r2, #0
 80063ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	3301      	adds	r3, #1
 80063f2:	613b      	str	r3, [r7, #16]
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b0e      	cmp	r3, #14
 80063f8:	d9f2      	bls.n	80063e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d11c      	bne.n	800643c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006410:	f043 0302 	orr.w	r3, r3, #2
 8006414:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	e005      	b.n	8006448 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006440:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800644e:	461a      	mov	r2, r3
 8006450:	2300      	movs	r3, #0
 8006452:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006454:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006458:	2b01      	cmp	r3, #1
 800645a:	d10d      	bne.n	8006478 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800645c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006460:	2b00      	cmp	r3, #0
 8006462:	d104      	bne.n	800646e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006464:	2100      	movs	r1, #0
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f968 	bl	800673c <USB_SetDevSpeed>
 800646c:	e008      	b.n	8006480 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800646e:	2101      	movs	r1, #1
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f963 	bl	800673c <USB_SetDevSpeed>
 8006476:	e003      	b.n	8006480 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006478:	2103      	movs	r1, #3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f95e 	bl	800673c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006480:	2110      	movs	r1, #16
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f8fa 	bl	800667c <USB_FlushTxFifo>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f924 	bl	80066e0 <USB_FlushRxFifo>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a8:	461a      	mov	r2, r3
 80064aa:	2300      	movs	r3, #0
 80064ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064b4:	461a      	mov	r2, r3
 80064b6:	2300      	movs	r3, #0
 80064b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c0:	461a      	mov	r2, r3
 80064c2:	2300      	movs	r3, #0
 80064c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	e043      	b.n	8006554 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064e2:	d118      	bne.n	8006516 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f6:	461a      	mov	r2, r3
 80064f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	e013      	b.n	8006528 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800650c:	461a      	mov	r2, r3
 800650e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	e008      	b.n	8006528 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006522:	461a      	mov	r2, r3
 8006524:	2300      	movs	r3, #0
 8006526:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006534:	461a      	mov	r2, r3
 8006536:	2300      	movs	r3, #0
 8006538:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006546:	461a      	mov	r2, r3
 8006548:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800654c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	3301      	adds	r3, #1
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006558:	461a      	mov	r2, r3
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	4293      	cmp	r3, r2
 800655e:	d3b5      	bcc.n	80064cc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006560:	2300      	movs	r3, #0
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	e043      	b.n	80065ee <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006578:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800657c:	d118      	bne.n	80065b0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006590:	461a      	mov	r2, r3
 8006592:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	e013      	b.n	80065c2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a6:	461a      	mov	r2, r3
 80065a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e008      	b.n	80065c2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065bc:	461a      	mov	r2, r3
 80065be:	2300      	movs	r3, #0
 80065c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ce:	461a      	mov	r2, r3
 80065d0:	2300      	movs	r3, #0
 80065d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e0:	461a      	mov	r2, r3
 80065e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	3301      	adds	r3, #1
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065f2:	461a      	mov	r2, r3
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d3b5      	bcc.n	8006566 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800660c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800661a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800661c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006620:	2b00      	cmp	r3, #0
 8006622:	d105      	bne.n	8006630 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	f043 0210 	orr.w	r2, r3, #16
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699a      	ldr	r2, [r3, #24]
 8006634:	4b0f      	ldr	r3, [pc, #60]	@ (8006674 <USB_DevInit+0x2b4>)
 8006636:	4313      	orrs	r3, r2
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800663c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	f043 0208 	orr.w	r2, r3, #8
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006650:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006654:	2b01      	cmp	r3, #1
 8006656:	d105      	bne.n	8006664 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <USB_DevInit+0x2b8>)
 800665e:	4313      	orrs	r3, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006664:	7dfb      	ldrb	r3, [r7, #23]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006670:	b004      	add	sp, #16
 8006672:	4770      	bx	lr
 8006674:	803c3800 	.word	0x803c3800
 8006678:	40000004 	.word	0x40000004

0800667c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006696:	d901      	bls.n	800669c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e01b      	b.n	80066d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	daf2      	bge.n	800668a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	019b      	lsls	r3, r3, #6
 80066ac:	f043 0220 	orr.w	r2, r3, #32
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066c0:	d901      	bls.n	80066c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e006      	b.n	80066d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d0f0      	beq.n	80066b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066f8:	d901      	bls.n	80066fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e018      	b.n	8006730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	daf2      	bge.n	80066ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2210      	movs	r2, #16
 800670e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3301      	adds	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800671c:	d901      	bls.n	8006722 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e006      	b.n	8006730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b10      	cmp	r3, #16
 800672c:	d0f0      	beq.n	8006710 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800675c:	4313      	orrs	r3, r2
 800675e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006788:	f023 0303 	bic.w	r3, r3, #3
 800678c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800679c:	f043 0302 	orr.w	r3, r3, #2
 80067a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	f003 0301 	and.w	r3, r3, #1
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3301      	adds	r3, #1
 80067dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067e4:	d901      	bls.n	80067ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e022      	b.n	8006830 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	daf2      	bge.n	80067d8 <USB_CoreReset+0xc>

  count = 10U;
 80067f2:	230a      	movs	r3, #10
 80067f4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80067f6:	e002      	b.n	80067fe <USB_CoreReset+0x32>
  {
    count--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f9      	bne.n	80067f8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f043 0201 	orr.w	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800681c:	d901      	bls.n	8006822 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e006      	b.n	8006830 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b01      	cmp	r3, #1
 800682c:	d0f0      	beq.n	8006810 <USB_CoreReset+0x44>

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <atof>:
 800683c:	2100      	movs	r1, #0
 800683e:	f000 be03 	b.w	8007448 <strtod>

08006842 <sulp>:
 8006842:	b570      	push	{r4, r5, r6, lr}
 8006844:	4604      	mov	r4, r0
 8006846:	460d      	mov	r5, r1
 8006848:	ec45 4b10 	vmov	d0, r4, r5
 800684c:	4616      	mov	r6, r2
 800684e:	f003 fa3b 	bl	8009cc8 <__ulp>
 8006852:	ec51 0b10 	vmov	r0, r1, d0
 8006856:	b17e      	cbz	r6, 8006878 <sulp+0x36>
 8006858:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800685c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006860:	2b00      	cmp	r3, #0
 8006862:	dd09      	ble.n	8006878 <sulp+0x36>
 8006864:	051b      	lsls	r3, r3, #20
 8006866:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800686a:	2400      	movs	r4, #0
 800686c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006870:	4622      	mov	r2, r4
 8006872:	462b      	mov	r3, r5
 8006874:	f7f9 fee0 	bl	8000638 <__aeabi_dmul>
 8006878:	ec41 0b10 	vmov	d0, r0, r1
 800687c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006880 <_strtod_l>:
 8006880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	b09f      	sub	sp, #124	@ 0x7c
 8006886:	460c      	mov	r4, r1
 8006888:	9217      	str	r2, [sp, #92]	@ 0x5c
 800688a:	2200      	movs	r2, #0
 800688c:	921a      	str	r2, [sp, #104]	@ 0x68
 800688e:	9005      	str	r0, [sp, #20]
 8006890:	f04f 0a00 	mov.w	sl, #0
 8006894:	f04f 0b00 	mov.w	fp, #0
 8006898:	460a      	mov	r2, r1
 800689a:	9219      	str	r2, [sp, #100]	@ 0x64
 800689c:	7811      	ldrb	r1, [r2, #0]
 800689e:	292b      	cmp	r1, #43	@ 0x2b
 80068a0:	d04a      	beq.n	8006938 <_strtod_l+0xb8>
 80068a2:	d838      	bhi.n	8006916 <_strtod_l+0x96>
 80068a4:	290d      	cmp	r1, #13
 80068a6:	d832      	bhi.n	800690e <_strtod_l+0x8e>
 80068a8:	2908      	cmp	r1, #8
 80068aa:	d832      	bhi.n	8006912 <_strtod_l+0x92>
 80068ac:	2900      	cmp	r1, #0
 80068ae:	d03b      	beq.n	8006928 <_strtod_l+0xa8>
 80068b0:	2200      	movs	r2, #0
 80068b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80068b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80068b6:	782a      	ldrb	r2, [r5, #0]
 80068b8:	2a30      	cmp	r2, #48	@ 0x30
 80068ba:	f040 80b3 	bne.w	8006a24 <_strtod_l+0x1a4>
 80068be:	786a      	ldrb	r2, [r5, #1]
 80068c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80068c4:	2a58      	cmp	r2, #88	@ 0x58
 80068c6:	d16e      	bne.n	80069a6 <_strtod_l+0x126>
 80068c8:	9302      	str	r3, [sp, #8]
 80068ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068cc:	9301      	str	r3, [sp, #4]
 80068ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	4a8e      	ldr	r2, [pc, #568]	@ (8006b0c <_strtod_l+0x28c>)
 80068d4:	9805      	ldr	r0, [sp, #20]
 80068d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80068d8:	a919      	add	r1, sp, #100	@ 0x64
 80068da:	f002 fae7 	bl	8008eac <__gethex>
 80068de:	f010 060f 	ands.w	r6, r0, #15
 80068e2:	4604      	mov	r4, r0
 80068e4:	d005      	beq.n	80068f2 <_strtod_l+0x72>
 80068e6:	2e06      	cmp	r6, #6
 80068e8:	d128      	bne.n	800693c <_strtod_l+0xbc>
 80068ea:	3501      	adds	r5, #1
 80068ec:	2300      	movs	r3, #0
 80068ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80068f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 858e 	bne.w	8007416 <_strtod_l+0xb96>
 80068fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068fc:	b1cb      	cbz	r3, 8006932 <_strtod_l+0xb2>
 80068fe:	4652      	mov	r2, sl
 8006900:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006904:	ec43 2b10 	vmov	d0, r2, r3
 8006908:	b01f      	add	sp, #124	@ 0x7c
 800690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690e:	2920      	cmp	r1, #32
 8006910:	d1ce      	bne.n	80068b0 <_strtod_l+0x30>
 8006912:	3201      	adds	r2, #1
 8006914:	e7c1      	b.n	800689a <_strtod_l+0x1a>
 8006916:	292d      	cmp	r1, #45	@ 0x2d
 8006918:	d1ca      	bne.n	80068b0 <_strtod_l+0x30>
 800691a:	2101      	movs	r1, #1
 800691c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800691e:	1c51      	adds	r1, r2, #1
 8006920:	9119      	str	r1, [sp, #100]	@ 0x64
 8006922:	7852      	ldrb	r2, [r2, #1]
 8006924:	2a00      	cmp	r2, #0
 8006926:	d1c5      	bne.n	80068b4 <_strtod_l+0x34>
 8006928:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800692a:	9419      	str	r4, [sp, #100]	@ 0x64
 800692c:	2b00      	cmp	r3, #0
 800692e:	f040 8570 	bne.w	8007412 <_strtod_l+0xb92>
 8006932:	4652      	mov	r2, sl
 8006934:	465b      	mov	r3, fp
 8006936:	e7e5      	b.n	8006904 <_strtod_l+0x84>
 8006938:	2100      	movs	r1, #0
 800693a:	e7ef      	b.n	800691c <_strtod_l+0x9c>
 800693c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800693e:	b13a      	cbz	r2, 8006950 <_strtod_l+0xd0>
 8006940:	2135      	movs	r1, #53	@ 0x35
 8006942:	a81c      	add	r0, sp, #112	@ 0x70
 8006944:	f003 faba 	bl	8009ebc <__copybits>
 8006948:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800694a:	9805      	ldr	r0, [sp, #20]
 800694c:	f002 fe88 	bl	8009660 <_Bfree>
 8006950:	3e01      	subs	r6, #1
 8006952:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006954:	2e04      	cmp	r6, #4
 8006956:	d806      	bhi.n	8006966 <_strtod_l+0xe6>
 8006958:	e8df f006 	tbb	[pc, r6]
 800695c:	201d0314 	.word	0x201d0314
 8006960:	14          	.byte	0x14
 8006961:	00          	.byte	0x00
 8006962:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006966:	05e1      	lsls	r1, r4, #23
 8006968:	bf48      	it	mi
 800696a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800696e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006972:	0d1b      	lsrs	r3, r3, #20
 8006974:	051b      	lsls	r3, r3, #20
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1bb      	bne.n	80068f2 <_strtod_l+0x72>
 800697a:	f001 fb53 	bl	8008024 <__errno>
 800697e:	2322      	movs	r3, #34	@ 0x22
 8006980:	6003      	str	r3, [r0, #0]
 8006982:	e7b6      	b.n	80068f2 <_strtod_l+0x72>
 8006984:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006988:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800698c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006990:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006994:	e7e7      	b.n	8006966 <_strtod_l+0xe6>
 8006996:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006b14 <_strtod_l+0x294>
 800699a:	e7e4      	b.n	8006966 <_strtod_l+0xe6>
 800699c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80069a0:	f04f 3aff 	mov.w	sl, #4294967295
 80069a4:	e7df      	b.n	8006966 <_strtod_l+0xe6>
 80069a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	2b30      	cmp	r3, #48	@ 0x30
 80069b0:	d0f9      	beq.n	80069a6 <_strtod_l+0x126>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d09d      	beq.n	80068f2 <_strtod_l+0x72>
 80069b6:	2301      	movs	r3, #1
 80069b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80069be:	2300      	movs	r3, #0
 80069c0:	9308      	str	r3, [sp, #32]
 80069c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80069c4:	461f      	mov	r7, r3
 80069c6:	220a      	movs	r2, #10
 80069c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80069ca:	7805      	ldrb	r5, [r0, #0]
 80069cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80069d0:	b2d9      	uxtb	r1, r3
 80069d2:	2909      	cmp	r1, #9
 80069d4:	d928      	bls.n	8006a28 <_strtod_l+0x1a8>
 80069d6:	494e      	ldr	r1, [pc, #312]	@ (8006b10 <_strtod_l+0x290>)
 80069d8:	2201      	movs	r2, #1
 80069da:	f001 fac6 	bl	8007f6a <strncmp>
 80069de:	2800      	cmp	r0, #0
 80069e0:	d032      	beq.n	8006a48 <_strtod_l+0x1c8>
 80069e2:	2000      	movs	r0, #0
 80069e4:	462a      	mov	r2, r5
 80069e6:	4681      	mov	r9, r0
 80069e8:	463d      	mov	r5, r7
 80069ea:	4603      	mov	r3, r0
 80069ec:	2a65      	cmp	r2, #101	@ 0x65
 80069ee:	d001      	beq.n	80069f4 <_strtod_l+0x174>
 80069f0:	2a45      	cmp	r2, #69	@ 0x45
 80069f2:	d114      	bne.n	8006a1e <_strtod_l+0x19e>
 80069f4:	b91d      	cbnz	r5, 80069fe <_strtod_l+0x17e>
 80069f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069f8:	4302      	orrs	r2, r0
 80069fa:	d095      	beq.n	8006928 <_strtod_l+0xa8>
 80069fc:	2500      	movs	r5, #0
 80069fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006a00:	1c62      	adds	r2, r4, #1
 8006a02:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a04:	7862      	ldrb	r2, [r4, #1]
 8006a06:	2a2b      	cmp	r2, #43	@ 0x2b
 8006a08:	d077      	beq.n	8006afa <_strtod_l+0x27a>
 8006a0a:	2a2d      	cmp	r2, #45	@ 0x2d
 8006a0c:	d07b      	beq.n	8006b06 <_strtod_l+0x286>
 8006a0e:	f04f 0c00 	mov.w	ip, #0
 8006a12:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006a16:	2909      	cmp	r1, #9
 8006a18:	f240 8082 	bls.w	8006b20 <_strtod_l+0x2a0>
 8006a1c:	9419      	str	r4, [sp, #100]	@ 0x64
 8006a1e:	f04f 0800 	mov.w	r8, #0
 8006a22:	e0a2      	b.n	8006b6a <_strtod_l+0x2ea>
 8006a24:	2300      	movs	r3, #0
 8006a26:	e7c7      	b.n	80069b8 <_strtod_l+0x138>
 8006a28:	2f08      	cmp	r7, #8
 8006a2a:	bfd5      	itete	le
 8006a2c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006a2e:	9908      	ldrgt	r1, [sp, #32]
 8006a30:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a34:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006a38:	f100 0001 	add.w	r0, r0, #1
 8006a3c:	bfd4      	ite	le
 8006a3e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006a40:	9308      	strgt	r3, [sp, #32]
 8006a42:	3701      	adds	r7, #1
 8006a44:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a46:	e7bf      	b.n	80069c8 <_strtod_l+0x148>
 8006a48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a4e:	785a      	ldrb	r2, [r3, #1]
 8006a50:	b37f      	cbz	r7, 8006ab2 <_strtod_l+0x232>
 8006a52:	4681      	mov	r9, r0
 8006a54:	463d      	mov	r5, r7
 8006a56:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006a5a:	2b09      	cmp	r3, #9
 8006a5c:	d912      	bls.n	8006a84 <_strtod_l+0x204>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e7c4      	b.n	80069ec <_strtod_l+0x16c>
 8006a62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a68:	785a      	ldrb	r2, [r3, #1]
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	2a30      	cmp	r2, #48	@ 0x30
 8006a6e:	d0f8      	beq.n	8006a62 <_strtod_l+0x1e2>
 8006a70:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	f200 84d3 	bhi.w	8007420 <_strtod_l+0xba0>
 8006a7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a7e:	4681      	mov	r9, r0
 8006a80:	2000      	movs	r0, #0
 8006a82:	4605      	mov	r5, r0
 8006a84:	3a30      	subs	r2, #48	@ 0x30
 8006a86:	f100 0301 	add.w	r3, r0, #1
 8006a8a:	d02a      	beq.n	8006ae2 <_strtod_l+0x262>
 8006a8c:	4499      	add	r9, r3
 8006a8e:	eb00 0c05 	add.w	ip, r0, r5
 8006a92:	462b      	mov	r3, r5
 8006a94:	210a      	movs	r1, #10
 8006a96:	4563      	cmp	r3, ip
 8006a98:	d10d      	bne.n	8006ab6 <_strtod_l+0x236>
 8006a9a:	1c69      	adds	r1, r5, #1
 8006a9c:	4401      	add	r1, r0
 8006a9e:	4428      	add	r0, r5
 8006aa0:	2808      	cmp	r0, #8
 8006aa2:	dc16      	bgt.n	8006ad2 <_strtod_l+0x252>
 8006aa4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006aa6:	230a      	movs	r3, #10
 8006aa8:	fb03 2300 	mla	r3, r3, r0, r2
 8006aac:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e018      	b.n	8006ae4 <_strtod_l+0x264>
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	e7da      	b.n	8006a6c <_strtod_l+0x1ec>
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	f103 0301 	add.w	r3, r3, #1
 8006abc:	dc03      	bgt.n	8006ac6 <_strtod_l+0x246>
 8006abe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006ac0:	434e      	muls	r6, r1
 8006ac2:	960a      	str	r6, [sp, #40]	@ 0x28
 8006ac4:	e7e7      	b.n	8006a96 <_strtod_l+0x216>
 8006ac6:	2b10      	cmp	r3, #16
 8006ac8:	bfde      	ittt	le
 8006aca:	9e08      	ldrle	r6, [sp, #32]
 8006acc:	434e      	mulle	r6, r1
 8006ace:	9608      	strle	r6, [sp, #32]
 8006ad0:	e7e1      	b.n	8006a96 <_strtod_l+0x216>
 8006ad2:	280f      	cmp	r0, #15
 8006ad4:	dceb      	bgt.n	8006aae <_strtod_l+0x22e>
 8006ad6:	9808      	ldr	r0, [sp, #32]
 8006ad8:	230a      	movs	r3, #10
 8006ada:	fb03 2300 	mla	r3, r3, r0, r2
 8006ade:	9308      	str	r3, [sp, #32]
 8006ae0:	e7e5      	b.n	8006aae <_strtod_l+0x22e>
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ae6:	1c50      	adds	r0, r2, #1
 8006ae8:	9019      	str	r0, [sp, #100]	@ 0x64
 8006aea:	7852      	ldrb	r2, [r2, #1]
 8006aec:	4618      	mov	r0, r3
 8006aee:	460d      	mov	r5, r1
 8006af0:	e7b1      	b.n	8006a56 <_strtod_l+0x1d6>
 8006af2:	f04f 0900 	mov.w	r9, #0
 8006af6:	2301      	movs	r3, #1
 8006af8:	e77d      	b.n	80069f6 <_strtod_l+0x176>
 8006afa:	f04f 0c00 	mov.w	ip, #0
 8006afe:	1ca2      	adds	r2, r4, #2
 8006b00:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b02:	78a2      	ldrb	r2, [r4, #2]
 8006b04:	e785      	b.n	8006a12 <_strtod_l+0x192>
 8006b06:	f04f 0c01 	mov.w	ip, #1
 8006b0a:	e7f8      	b.n	8006afe <_strtod_l+0x27e>
 8006b0c:	0800aa54 	.word	0x0800aa54
 8006b10:	0800aa3c 	.word	0x0800aa3c
 8006b14:	7ff00000 	.word	0x7ff00000
 8006b18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b1a:	1c51      	adds	r1, r2, #1
 8006b1c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b1e:	7852      	ldrb	r2, [r2, #1]
 8006b20:	2a30      	cmp	r2, #48	@ 0x30
 8006b22:	d0f9      	beq.n	8006b18 <_strtod_l+0x298>
 8006b24:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006b28:	2908      	cmp	r1, #8
 8006b2a:	f63f af78 	bhi.w	8006a1e <_strtod_l+0x19e>
 8006b2e:	3a30      	subs	r2, #48	@ 0x30
 8006b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b34:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006b36:	f04f 080a 	mov.w	r8, #10
 8006b3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b3c:	1c56      	adds	r6, r2, #1
 8006b3e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006b40:	7852      	ldrb	r2, [r2, #1]
 8006b42:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006b46:	f1be 0f09 	cmp.w	lr, #9
 8006b4a:	d939      	bls.n	8006bc0 <_strtod_l+0x340>
 8006b4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006b4e:	1a76      	subs	r6, r6, r1
 8006b50:	2e08      	cmp	r6, #8
 8006b52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006b56:	dc03      	bgt.n	8006b60 <_strtod_l+0x2e0>
 8006b58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006b5a:	4588      	cmp	r8, r1
 8006b5c:	bfa8      	it	ge
 8006b5e:	4688      	movge	r8, r1
 8006b60:	f1bc 0f00 	cmp.w	ip, #0
 8006b64:	d001      	beq.n	8006b6a <_strtod_l+0x2ea>
 8006b66:	f1c8 0800 	rsb	r8, r8, #0
 8006b6a:	2d00      	cmp	r5, #0
 8006b6c:	d14e      	bne.n	8006c0c <_strtod_l+0x38c>
 8006b6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b70:	4308      	orrs	r0, r1
 8006b72:	f47f aebe 	bne.w	80068f2 <_strtod_l+0x72>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f47f aed6 	bne.w	8006928 <_strtod_l+0xa8>
 8006b7c:	2a69      	cmp	r2, #105	@ 0x69
 8006b7e:	d028      	beq.n	8006bd2 <_strtod_l+0x352>
 8006b80:	dc25      	bgt.n	8006bce <_strtod_l+0x34e>
 8006b82:	2a49      	cmp	r2, #73	@ 0x49
 8006b84:	d025      	beq.n	8006bd2 <_strtod_l+0x352>
 8006b86:	2a4e      	cmp	r2, #78	@ 0x4e
 8006b88:	f47f aece 	bne.w	8006928 <_strtod_l+0xa8>
 8006b8c:	499b      	ldr	r1, [pc, #620]	@ (8006dfc <_strtod_l+0x57c>)
 8006b8e:	a819      	add	r0, sp, #100	@ 0x64
 8006b90:	f002 fbae 	bl	80092f0 <__match>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	f43f aec7 	beq.w	8006928 <_strtod_l+0xa8>
 8006b9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b28      	cmp	r3, #40	@ 0x28
 8006ba0:	d12e      	bne.n	8006c00 <_strtod_l+0x380>
 8006ba2:	4997      	ldr	r1, [pc, #604]	@ (8006e00 <_strtod_l+0x580>)
 8006ba4:	aa1c      	add	r2, sp, #112	@ 0x70
 8006ba6:	a819      	add	r0, sp, #100	@ 0x64
 8006ba8:	f002 fbb6 	bl	8009318 <__hexnan>
 8006bac:	2805      	cmp	r0, #5
 8006bae:	d127      	bne.n	8006c00 <_strtod_l+0x380>
 8006bb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006bb2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006bb6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006bba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006bbe:	e698      	b.n	80068f2 <_strtod_l+0x72>
 8006bc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006bc2:	fb08 2101 	mla	r1, r8, r1, r2
 8006bc6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006bca:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bcc:	e7b5      	b.n	8006b3a <_strtod_l+0x2ba>
 8006bce:	2a6e      	cmp	r2, #110	@ 0x6e
 8006bd0:	e7da      	b.n	8006b88 <_strtod_l+0x308>
 8006bd2:	498c      	ldr	r1, [pc, #560]	@ (8006e04 <_strtod_l+0x584>)
 8006bd4:	a819      	add	r0, sp, #100	@ 0x64
 8006bd6:	f002 fb8b 	bl	80092f0 <__match>
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	f43f aea4 	beq.w	8006928 <_strtod_l+0xa8>
 8006be0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006be2:	4989      	ldr	r1, [pc, #548]	@ (8006e08 <_strtod_l+0x588>)
 8006be4:	3b01      	subs	r3, #1
 8006be6:	a819      	add	r0, sp, #100	@ 0x64
 8006be8:	9319      	str	r3, [sp, #100]	@ 0x64
 8006bea:	f002 fb81 	bl	80092f0 <__match>
 8006bee:	b910      	cbnz	r0, 8006bf6 <_strtod_l+0x376>
 8006bf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	9319      	str	r3, [sp, #100]	@ 0x64
 8006bf6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006e18 <_strtod_l+0x598>
 8006bfa:	f04f 0a00 	mov.w	sl, #0
 8006bfe:	e678      	b.n	80068f2 <_strtod_l+0x72>
 8006c00:	4882      	ldr	r0, [pc, #520]	@ (8006e0c <_strtod_l+0x58c>)
 8006c02:	f001 fa4d 	bl	80080a0 <nan>
 8006c06:	ec5b ab10 	vmov	sl, fp, d0
 8006c0a:	e672      	b.n	80068f2 <_strtod_l+0x72>
 8006c0c:	eba8 0309 	sub.w	r3, r8, r9
 8006c10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c14:	2f00      	cmp	r7, #0
 8006c16:	bf08      	it	eq
 8006c18:	462f      	moveq	r7, r5
 8006c1a:	2d10      	cmp	r5, #16
 8006c1c:	462c      	mov	r4, r5
 8006c1e:	bfa8      	it	ge
 8006c20:	2410      	movge	r4, #16
 8006c22:	f7f9 fc8f 	bl	8000544 <__aeabi_ui2d>
 8006c26:	2d09      	cmp	r5, #9
 8006c28:	4682      	mov	sl, r0
 8006c2a:	468b      	mov	fp, r1
 8006c2c:	dc13      	bgt.n	8006c56 <_strtod_l+0x3d6>
 8006c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f43f ae5e 	beq.w	80068f2 <_strtod_l+0x72>
 8006c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c38:	dd78      	ble.n	8006d2c <_strtod_l+0x4ac>
 8006c3a:	2b16      	cmp	r3, #22
 8006c3c:	dc5f      	bgt.n	8006cfe <_strtod_l+0x47e>
 8006c3e:	4974      	ldr	r1, [pc, #464]	@ (8006e10 <_strtod_l+0x590>)
 8006c40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c48:	4652      	mov	r2, sl
 8006c4a:	465b      	mov	r3, fp
 8006c4c:	f7f9 fcf4 	bl	8000638 <__aeabi_dmul>
 8006c50:	4682      	mov	sl, r0
 8006c52:	468b      	mov	fp, r1
 8006c54:	e64d      	b.n	80068f2 <_strtod_l+0x72>
 8006c56:	4b6e      	ldr	r3, [pc, #440]	@ (8006e10 <_strtod_l+0x590>)
 8006c58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006c60:	f7f9 fcea 	bl	8000638 <__aeabi_dmul>
 8006c64:	4682      	mov	sl, r0
 8006c66:	9808      	ldr	r0, [sp, #32]
 8006c68:	468b      	mov	fp, r1
 8006c6a:	f7f9 fc6b 	bl	8000544 <__aeabi_ui2d>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4650      	mov	r0, sl
 8006c74:	4659      	mov	r1, fp
 8006c76:	f7f9 fb29 	bl	80002cc <__adddf3>
 8006c7a:	2d0f      	cmp	r5, #15
 8006c7c:	4682      	mov	sl, r0
 8006c7e:	468b      	mov	fp, r1
 8006c80:	ddd5      	ble.n	8006c2e <_strtod_l+0x3ae>
 8006c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c84:	1b2c      	subs	r4, r5, r4
 8006c86:	441c      	add	r4, r3
 8006c88:	2c00      	cmp	r4, #0
 8006c8a:	f340 8096 	ble.w	8006dba <_strtod_l+0x53a>
 8006c8e:	f014 030f 	ands.w	r3, r4, #15
 8006c92:	d00a      	beq.n	8006caa <_strtod_l+0x42a>
 8006c94:	495e      	ldr	r1, [pc, #376]	@ (8006e10 <_strtod_l+0x590>)
 8006c96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c9a:	4652      	mov	r2, sl
 8006c9c:	465b      	mov	r3, fp
 8006c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ca2:	f7f9 fcc9 	bl	8000638 <__aeabi_dmul>
 8006ca6:	4682      	mov	sl, r0
 8006ca8:	468b      	mov	fp, r1
 8006caa:	f034 040f 	bics.w	r4, r4, #15
 8006cae:	d073      	beq.n	8006d98 <_strtod_l+0x518>
 8006cb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006cb4:	dd48      	ble.n	8006d48 <_strtod_l+0x4c8>
 8006cb6:	2400      	movs	r4, #0
 8006cb8:	46a0      	mov	r8, r4
 8006cba:	940a      	str	r4, [sp, #40]	@ 0x28
 8006cbc:	46a1      	mov	r9, r4
 8006cbe:	9a05      	ldr	r2, [sp, #20]
 8006cc0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006e18 <_strtod_l+0x598>
 8006cc4:	2322      	movs	r3, #34	@ 0x22
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	f04f 0a00 	mov.w	sl, #0
 8006ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f43f ae0f 	beq.w	80068f2 <_strtod_l+0x72>
 8006cd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cd6:	9805      	ldr	r0, [sp, #20]
 8006cd8:	f002 fcc2 	bl	8009660 <_Bfree>
 8006cdc:	9805      	ldr	r0, [sp, #20]
 8006cde:	4649      	mov	r1, r9
 8006ce0:	f002 fcbe 	bl	8009660 <_Bfree>
 8006ce4:	9805      	ldr	r0, [sp, #20]
 8006ce6:	4641      	mov	r1, r8
 8006ce8:	f002 fcba 	bl	8009660 <_Bfree>
 8006cec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006cee:	9805      	ldr	r0, [sp, #20]
 8006cf0:	f002 fcb6 	bl	8009660 <_Bfree>
 8006cf4:	9805      	ldr	r0, [sp, #20]
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	f002 fcb2 	bl	8009660 <_Bfree>
 8006cfc:	e5f9      	b.n	80068f2 <_strtod_l+0x72>
 8006cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006d04:	4293      	cmp	r3, r2
 8006d06:	dbbc      	blt.n	8006c82 <_strtod_l+0x402>
 8006d08:	4c41      	ldr	r4, [pc, #260]	@ (8006e10 <_strtod_l+0x590>)
 8006d0a:	f1c5 050f 	rsb	r5, r5, #15
 8006d0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d12:	4652      	mov	r2, sl
 8006d14:	465b      	mov	r3, fp
 8006d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d1a:	f7f9 fc8d 	bl	8000638 <__aeabi_dmul>
 8006d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d20:	1b5d      	subs	r5, r3, r5
 8006d22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d2a:	e78f      	b.n	8006c4c <_strtod_l+0x3cc>
 8006d2c:	3316      	adds	r3, #22
 8006d2e:	dba8      	blt.n	8006c82 <_strtod_l+0x402>
 8006d30:	4b37      	ldr	r3, [pc, #220]	@ (8006e10 <_strtod_l+0x590>)
 8006d32:	eba9 0808 	sub.w	r8, r9, r8
 8006d36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006d3a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006d3e:	4650      	mov	r0, sl
 8006d40:	4659      	mov	r1, fp
 8006d42:	f7f9 fda3 	bl	800088c <__aeabi_ddiv>
 8006d46:	e783      	b.n	8006c50 <_strtod_l+0x3d0>
 8006d48:	4b32      	ldr	r3, [pc, #200]	@ (8006e14 <_strtod_l+0x594>)
 8006d4a:	9308      	str	r3, [sp, #32]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	1124      	asrs	r4, r4, #4
 8006d50:	4650      	mov	r0, sl
 8006d52:	4659      	mov	r1, fp
 8006d54:	461e      	mov	r6, r3
 8006d56:	2c01      	cmp	r4, #1
 8006d58:	dc21      	bgt.n	8006d9e <_strtod_l+0x51e>
 8006d5a:	b10b      	cbz	r3, 8006d60 <_strtod_l+0x4e0>
 8006d5c:	4682      	mov	sl, r0
 8006d5e:	468b      	mov	fp, r1
 8006d60:	492c      	ldr	r1, [pc, #176]	@ (8006e14 <_strtod_l+0x594>)
 8006d62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006d66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006d6a:	4652      	mov	r2, sl
 8006d6c:	465b      	mov	r3, fp
 8006d6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d72:	f7f9 fc61 	bl	8000638 <__aeabi_dmul>
 8006d76:	4b28      	ldr	r3, [pc, #160]	@ (8006e18 <_strtod_l+0x598>)
 8006d78:	460a      	mov	r2, r1
 8006d7a:	400b      	ands	r3, r1
 8006d7c:	4927      	ldr	r1, [pc, #156]	@ (8006e1c <_strtod_l+0x59c>)
 8006d7e:	428b      	cmp	r3, r1
 8006d80:	4682      	mov	sl, r0
 8006d82:	d898      	bhi.n	8006cb6 <_strtod_l+0x436>
 8006d84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006d88:	428b      	cmp	r3, r1
 8006d8a:	bf86      	itte	hi
 8006d8c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006e20 <_strtod_l+0x5a0>
 8006d90:	f04f 3aff 	movhi.w	sl, #4294967295
 8006d94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006d98:	2300      	movs	r3, #0
 8006d9a:	9308      	str	r3, [sp, #32]
 8006d9c:	e07a      	b.n	8006e94 <_strtod_l+0x614>
 8006d9e:	07e2      	lsls	r2, r4, #31
 8006da0:	d505      	bpl.n	8006dae <_strtod_l+0x52e>
 8006da2:	9b08      	ldr	r3, [sp, #32]
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f7f9 fc46 	bl	8000638 <__aeabi_dmul>
 8006dac:	2301      	movs	r3, #1
 8006dae:	9a08      	ldr	r2, [sp, #32]
 8006db0:	3208      	adds	r2, #8
 8006db2:	3601      	adds	r6, #1
 8006db4:	1064      	asrs	r4, r4, #1
 8006db6:	9208      	str	r2, [sp, #32]
 8006db8:	e7cd      	b.n	8006d56 <_strtod_l+0x4d6>
 8006dba:	d0ed      	beq.n	8006d98 <_strtod_l+0x518>
 8006dbc:	4264      	negs	r4, r4
 8006dbe:	f014 020f 	ands.w	r2, r4, #15
 8006dc2:	d00a      	beq.n	8006dda <_strtod_l+0x55a>
 8006dc4:	4b12      	ldr	r3, [pc, #72]	@ (8006e10 <_strtod_l+0x590>)
 8006dc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dca:	4650      	mov	r0, sl
 8006dcc:	4659      	mov	r1, fp
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f7f9 fd5b 	bl	800088c <__aeabi_ddiv>
 8006dd6:	4682      	mov	sl, r0
 8006dd8:	468b      	mov	fp, r1
 8006dda:	1124      	asrs	r4, r4, #4
 8006ddc:	d0dc      	beq.n	8006d98 <_strtod_l+0x518>
 8006dde:	2c1f      	cmp	r4, #31
 8006de0:	dd20      	ble.n	8006e24 <_strtod_l+0x5a4>
 8006de2:	2400      	movs	r4, #0
 8006de4:	46a0      	mov	r8, r4
 8006de6:	940a      	str	r4, [sp, #40]	@ 0x28
 8006de8:	46a1      	mov	r9, r4
 8006dea:	9a05      	ldr	r2, [sp, #20]
 8006dec:	2322      	movs	r3, #34	@ 0x22
 8006dee:	f04f 0a00 	mov.w	sl, #0
 8006df2:	f04f 0b00 	mov.w	fp, #0
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	e768      	b.n	8006ccc <_strtod_l+0x44c>
 8006dfa:	bf00      	nop
 8006dfc:	0800aa9d 	.word	0x0800aa9d
 8006e00:	0800aa40 	.word	0x0800aa40
 8006e04:	0800aa95 	.word	0x0800aa95
 8006e08:	0800aacf 	.word	0x0800aacf
 8006e0c:	0800ae5d 	.word	0x0800ae5d
 8006e10:	0800ac48 	.word	0x0800ac48
 8006e14:	0800ac20 	.word	0x0800ac20
 8006e18:	7ff00000 	.word	0x7ff00000
 8006e1c:	7ca00000 	.word	0x7ca00000
 8006e20:	7fefffff 	.word	0x7fefffff
 8006e24:	f014 0310 	ands.w	r3, r4, #16
 8006e28:	bf18      	it	ne
 8006e2a:	236a      	movne	r3, #106	@ 0x6a
 8006e2c:	4ea9      	ldr	r6, [pc, #676]	@ (80070d4 <_strtod_l+0x854>)
 8006e2e:	9308      	str	r3, [sp, #32]
 8006e30:	4650      	mov	r0, sl
 8006e32:	4659      	mov	r1, fp
 8006e34:	2300      	movs	r3, #0
 8006e36:	07e2      	lsls	r2, r4, #31
 8006e38:	d504      	bpl.n	8006e44 <_strtod_l+0x5c4>
 8006e3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e3e:	f7f9 fbfb 	bl	8000638 <__aeabi_dmul>
 8006e42:	2301      	movs	r3, #1
 8006e44:	1064      	asrs	r4, r4, #1
 8006e46:	f106 0608 	add.w	r6, r6, #8
 8006e4a:	d1f4      	bne.n	8006e36 <_strtod_l+0x5b6>
 8006e4c:	b10b      	cbz	r3, 8006e52 <_strtod_l+0x5d2>
 8006e4e:	4682      	mov	sl, r0
 8006e50:	468b      	mov	fp, r1
 8006e52:	9b08      	ldr	r3, [sp, #32]
 8006e54:	b1b3      	cbz	r3, 8006e84 <_strtod_l+0x604>
 8006e56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006e5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	4659      	mov	r1, fp
 8006e62:	dd0f      	ble.n	8006e84 <_strtod_l+0x604>
 8006e64:	2b1f      	cmp	r3, #31
 8006e66:	dd55      	ble.n	8006f14 <_strtod_l+0x694>
 8006e68:	2b34      	cmp	r3, #52	@ 0x34
 8006e6a:	bfde      	ittt	le
 8006e6c:	f04f 33ff 	movle.w	r3, #4294967295
 8006e70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006e74:	4093      	lslle	r3, r2
 8006e76:	f04f 0a00 	mov.w	sl, #0
 8006e7a:	bfcc      	ite	gt
 8006e7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006e80:	ea03 0b01 	andle.w	fp, r3, r1
 8006e84:	2200      	movs	r2, #0
 8006e86:	2300      	movs	r3, #0
 8006e88:	4650      	mov	r0, sl
 8006e8a:	4659      	mov	r1, fp
 8006e8c:	f7f9 fe3c 	bl	8000b08 <__aeabi_dcmpeq>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d1a6      	bne.n	8006de2 <_strtod_l+0x562>
 8006e94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006e9a:	9805      	ldr	r0, [sp, #20]
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	463a      	mov	r2, r7
 8006ea0:	f002 fc46 	bl	8009730 <__s2b>
 8006ea4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f43f af05 	beq.w	8006cb6 <_strtod_l+0x436>
 8006eac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eae:	2a00      	cmp	r2, #0
 8006eb0:	eba9 0308 	sub.w	r3, r9, r8
 8006eb4:	bfa8      	it	ge
 8006eb6:	2300      	movge	r3, #0
 8006eb8:	9312      	str	r3, [sp, #72]	@ 0x48
 8006eba:	2400      	movs	r4, #0
 8006ebc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006ec0:	9316      	str	r3, [sp, #88]	@ 0x58
 8006ec2:	46a0      	mov	r8, r4
 8006ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ec6:	9805      	ldr	r0, [sp, #20]
 8006ec8:	6859      	ldr	r1, [r3, #4]
 8006eca:	f002 fb89 	bl	80095e0 <_Balloc>
 8006ece:	4681      	mov	r9, r0
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	f43f aef4 	beq.w	8006cbe <_strtod_l+0x43e>
 8006ed6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ed8:	691a      	ldr	r2, [r3, #16]
 8006eda:	3202      	adds	r2, #2
 8006edc:	f103 010c 	add.w	r1, r3, #12
 8006ee0:	0092      	lsls	r2, r2, #2
 8006ee2:	300c      	adds	r0, #12
 8006ee4:	f001 f8cb 	bl	800807e <memcpy>
 8006ee8:	ec4b ab10 	vmov	d0, sl, fp
 8006eec:	9805      	ldr	r0, [sp, #20]
 8006eee:	aa1c      	add	r2, sp, #112	@ 0x70
 8006ef0:	a91b      	add	r1, sp, #108	@ 0x6c
 8006ef2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006ef6:	f002 ff57 	bl	8009da8 <__d2b>
 8006efa:	901a      	str	r0, [sp, #104]	@ 0x68
 8006efc:	2800      	cmp	r0, #0
 8006efe:	f43f aede 	beq.w	8006cbe <_strtod_l+0x43e>
 8006f02:	9805      	ldr	r0, [sp, #20]
 8006f04:	2101      	movs	r1, #1
 8006f06:	f002 fca9 	bl	800985c <__i2b>
 8006f0a:	4680      	mov	r8, r0
 8006f0c:	b948      	cbnz	r0, 8006f22 <_strtod_l+0x6a2>
 8006f0e:	f04f 0800 	mov.w	r8, #0
 8006f12:	e6d4      	b.n	8006cbe <_strtod_l+0x43e>
 8006f14:	f04f 32ff 	mov.w	r2, #4294967295
 8006f18:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1c:	ea03 0a0a 	and.w	sl, r3, sl
 8006f20:	e7b0      	b.n	8006e84 <_strtod_l+0x604>
 8006f22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006f24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006f26:	2d00      	cmp	r5, #0
 8006f28:	bfab      	itete	ge
 8006f2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006f2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006f2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006f30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006f32:	bfac      	ite	ge
 8006f34:	18ef      	addge	r7, r5, r3
 8006f36:	1b5e      	sublt	r6, r3, r5
 8006f38:	9b08      	ldr	r3, [sp, #32]
 8006f3a:	1aed      	subs	r5, r5, r3
 8006f3c:	4415      	add	r5, r2
 8006f3e:	4b66      	ldr	r3, [pc, #408]	@ (80070d8 <_strtod_l+0x858>)
 8006f40:	3d01      	subs	r5, #1
 8006f42:	429d      	cmp	r5, r3
 8006f44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006f48:	da50      	bge.n	8006fec <_strtod_l+0x76c>
 8006f4a:	1b5b      	subs	r3, r3, r5
 8006f4c:	2b1f      	cmp	r3, #31
 8006f4e:	eba2 0203 	sub.w	r2, r2, r3
 8006f52:	f04f 0101 	mov.w	r1, #1
 8006f56:	dc3d      	bgt.n	8006fd4 <_strtod_l+0x754>
 8006f58:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f62:	18bd      	adds	r5, r7, r2
 8006f64:	9b08      	ldr	r3, [sp, #32]
 8006f66:	42af      	cmp	r7, r5
 8006f68:	4416      	add	r6, r2
 8006f6a:	441e      	add	r6, r3
 8006f6c:	463b      	mov	r3, r7
 8006f6e:	bfa8      	it	ge
 8006f70:	462b      	movge	r3, r5
 8006f72:	42b3      	cmp	r3, r6
 8006f74:	bfa8      	it	ge
 8006f76:	4633      	movge	r3, r6
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	bfc2      	ittt	gt
 8006f7c:	1aed      	subgt	r5, r5, r3
 8006f7e:	1af6      	subgt	r6, r6, r3
 8006f80:	1aff      	subgt	r7, r7, r3
 8006f82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	dd16      	ble.n	8006fb6 <_strtod_l+0x736>
 8006f88:	4641      	mov	r1, r8
 8006f8a:	9805      	ldr	r0, [sp, #20]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f002 fd25 	bl	80099dc <__pow5mult>
 8006f92:	4680      	mov	r8, r0
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d0ba      	beq.n	8006f0e <_strtod_l+0x68e>
 8006f98:	4601      	mov	r1, r0
 8006f9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006f9c:	9805      	ldr	r0, [sp, #20]
 8006f9e:	f002 fc73 	bl	8009888 <__multiply>
 8006fa2:	900e      	str	r0, [sp, #56]	@ 0x38
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	f43f ae8a 	beq.w	8006cbe <_strtod_l+0x43e>
 8006faa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fac:	9805      	ldr	r0, [sp, #20]
 8006fae:	f002 fb57 	bl	8009660 <_Bfree>
 8006fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fb6:	2d00      	cmp	r5, #0
 8006fb8:	dc1d      	bgt.n	8006ff6 <_strtod_l+0x776>
 8006fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dd23      	ble.n	8007008 <_strtod_l+0x788>
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006fc4:	9805      	ldr	r0, [sp, #20]
 8006fc6:	f002 fd09 	bl	80099dc <__pow5mult>
 8006fca:	4681      	mov	r9, r0
 8006fcc:	b9e0      	cbnz	r0, 8007008 <_strtod_l+0x788>
 8006fce:	f04f 0900 	mov.w	r9, #0
 8006fd2:	e674      	b.n	8006cbe <_strtod_l+0x43e>
 8006fd4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006fd8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006fdc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006fe0:	35e2      	adds	r5, #226	@ 0xe2
 8006fe2:	fa01 f305 	lsl.w	r3, r1, r5
 8006fe6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fe8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006fea:	e7ba      	b.n	8006f62 <_strtod_l+0x6e2>
 8006fec:	2300      	movs	r3, #0
 8006fee:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ff4:	e7b5      	b.n	8006f62 <_strtod_l+0x6e2>
 8006ff6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ff8:	9805      	ldr	r0, [sp, #20]
 8006ffa:	462a      	mov	r2, r5
 8006ffc:	f002 fd48 	bl	8009a90 <__lshift>
 8007000:	901a      	str	r0, [sp, #104]	@ 0x68
 8007002:	2800      	cmp	r0, #0
 8007004:	d1d9      	bne.n	8006fba <_strtod_l+0x73a>
 8007006:	e65a      	b.n	8006cbe <_strtod_l+0x43e>
 8007008:	2e00      	cmp	r6, #0
 800700a:	dd07      	ble.n	800701c <_strtod_l+0x79c>
 800700c:	4649      	mov	r1, r9
 800700e:	9805      	ldr	r0, [sp, #20]
 8007010:	4632      	mov	r2, r6
 8007012:	f002 fd3d 	bl	8009a90 <__lshift>
 8007016:	4681      	mov	r9, r0
 8007018:	2800      	cmp	r0, #0
 800701a:	d0d8      	beq.n	8006fce <_strtod_l+0x74e>
 800701c:	2f00      	cmp	r7, #0
 800701e:	dd08      	ble.n	8007032 <_strtod_l+0x7b2>
 8007020:	4641      	mov	r1, r8
 8007022:	9805      	ldr	r0, [sp, #20]
 8007024:	463a      	mov	r2, r7
 8007026:	f002 fd33 	bl	8009a90 <__lshift>
 800702a:	4680      	mov	r8, r0
 800702c:	2800      	cmp	r0, #0
 800702e:	f43f ae46 	beq.w	8006cbe <_strtod_l+0x43e>
 8007032:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007034:	9805      	ldr	r0, [sp, #20]
 8007036:	464a      	mov	r2, r9
 8007038:	f002 fdb2 	bl	8009ba0 <__mdiff>
 800703c:	4604      	mov	r4, r0
 800703e:	2800      	cmp	r0, #0
 8007040:	f43f ae3d 	beq.w	8006cbe <_strtod_l+0x43e>
 8007044:	68c3      	ldr	r3, [r0, #12]
 8007046:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007048:	2300      	movs	r3, #0
 800704a:	60c3      	str	r3, [r0, #12]
 800704c:	4641      	mov	r1, r8
 800704e:	f002 fd8b 	bl	8009b68 <__mcmp>
 8007052:	2800      	cmp	r0, #0
 8007054:	da46      	bge.n	80070e4 <_strtod_l+0x864>
 8007056:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007058:	ea53 030a 	orrs.w	r3, r3, sl
 800705c:	d16c      	bne.n	8007138 <_strtod_l+0x8b8>
 800705e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007062:	2b00      	cmp	r3, #0
 8007064:	d168      	bne.n	8007138 <_strtod_l+0x8b8>
 8007066:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800706a:	0d1b      	lsrs	r3, r3, #20
 800706c:	051b      	lsls	r3, r3, #20
 800706e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007072:	d961      	bls.n	8007138 <_strtod_l+0x8b8>
 8007074:	6963      	ldr	r3, [r4, #20]
 8007076:	b913      	cbnz	r3, 800707e <_strtod_l+0x7fe>
 8007078:	6923      	ldr	r3, [r4, #16]
 800707a:	2b01      	cmp	r3, #1
 800707c:	dd5c      	ble.n	8007138 <_strtod_l+0x8b8>
 800707e:	4621      	mov	r1, r4
 8007080:	2201      	movs	r2, #1
 8007082:	9805      	ldr	r0, [sp, #20]
 8007084:	f002 fd04 	bl	8009a90 <__lshift>
 8007088:	4641      	mov	r1, r8
 800708a:	4604      	mov	r4, r0
 800708c:	f002 fd6c 	bl	8009b68 <__mcmp>
 8007090:	2800      	cmp	r0, #0
 8007092:	dd51      	ble.n	8007138 <_strtod_l+0x8b8>
 8007094:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007098:	9a08      	ldr	r2, [sp, #32]
 800709a:	0d1b      	lsrs	r3, r3, #20
 800709c:	051b      	lsls	r3, r3, #20
 800709e:	2a00      	cmp	r2, #0
 80070a0:	d06b      	beq.n	800717a <_strtod_l+0x8fa>
 80070a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80070a6:	d868      	bhi.n	800717a <_strtod_l+0x8fa>
 80070a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80070ac:	f67f ae9d 	bls.w	8006dea <_strtod_l+0x56a>
 80070b0:	4b0a      	ldr	r3, [pc, #40]	@ (80070dc <_strtod_l+0x85c>)
 80070b2:	4650      	mov	r0, sl
 80070b4:	4659      	mov	r1, fp
 80070b6:	2200      	movs	r2, #0
 80070b8:	f7f9 fabe 	bl	8000638 <__aeabi_dmul>
 80070bc:	4b08      	ldr	r3, [pc, #32]	@ (80070e0 <_strtod_l+0x860>)
 80070be:	400b      	ands	r3, r1
 80070c0:	4682      	mov	sl, r0
 80070c2:	468b      	mov	fp, r1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f47f ae05 	bne.w	8006cd4 <_strtod_l+0x454>
 80070ca:	9a05      	ldr	r2, [sp, #20]
 80070cc:	2322      	movs	r3, #34	@ 0x22
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	e600      	b.n	8006cd4 <_strtod_l+0x454>
 80070d2:	bf00      	nop
 80070d4:	0800aa68 	.word	0x0800aa68
 80070d8:	fffffc02 	.word	0xfffffc02
 80070dc:	39500000 	.word	0x39500000
 80070e0:	7ff00000 	.word	0x7ff00000
 80070e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80070e8:	d165      	bne.n	80071b6 <_strtod_l+0x936>
 80070ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80070ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070f0:	b35a      	cbz	r2, 800714a <_strtod_l+0x8ca>
 80070f2:	4a9f      	ldr	r2, [pc, #636]	@ (8007370 <_strtod_l+0xaf0>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d12b      	bne.n	8007150 <_strtod_l+0x8d0>
 80070f8:	9b08      	ldr	r3, [sp, #32]
 80070fa:	4651      	mov	r1, sl
 80070fc:	b303      	cbz	r3, 8007140 <_strtod_l+0x8c0>
 80070fe:	4b9d      	ldr	r3, [pc, #628]	@ (8007374 <_strtod_l+0xaf4>)
 8007100:	465a      	mov	r2, fp
 8007102:	4013      	ands	r3, r2
 8007104:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007108:	f04f 32ff 	mov.w	r2, #4294967295
 800710c:	d81b      	bhi.n	8007146 <_strtod_l+0x8c6>
 800710e:	0d1b      	lsrs	r3, r3, #20
 8007110:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007114:	fa02 f303 	lsl.w	r3, r2, r3
 8007118:	4299      	cmp	r1, r3
 800711a:	d119      	bne.n	8007150 <_strtod_l+0x8d0>
 800711c:	4b96      	ldr	r3, [pc, #600]	@ (8007378 <_strtod_l+0xaf8>)
 800711e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007120:	429a      	cmp	r2, r3
 8007122:	d102      	bne.n	800712a <_strtod_l+0x8aa>
 8007124:	3101      	adds	r1, #1
 8007126:	f43f adca 	beq.w	8006cbe <_strtod_l+0x43e>
 800712a:	4b92      	ldr	r3, [pc, #584]	@ (8007374 <_strtod_l+0xaf4>)
 800712c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800712e:	401a      	ands	r2, r3
 8007130:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007134:	f04f 0a00 	mov.w	sl, #0
 8007138:	9b08      	ldr	r3, [sp, #32]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1b8      	bne.n	80070b0 <_strtod_l+0x830>
 800713e:	e5c9      	b.n	8006cd4 <_strtod_l+0x454>
 8007140:	f04f 33ff 	mov.w	r3, #4294967295
 8007144:	e7e8      	b.n	8007118 <_strtod_l+0x898>
 8007146:	4613      	mov	r3, r2
 8007148:	e7e6      	b.n	8007118 <_strtod_l+0x898>
 800714a:	ea53 030a 	orrs.w	r3, r3, sl
 800714e:	d0a1      	beq.n	8007094 <_strtod_l+0x814>
 8007150:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007152:	b1db      	cbz	r3, 800718c <_strtod_l+0x90c>
 8007154:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007156:	4213      	tst	r3, r2
 8007158:	d0ee      	beq.n	8007138 <_strtod_l+0x8b8>
 800715a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800715c:	9a08      	ldr	r2, [sp, #32]
 800715e:	4650      	mov	r0, sl
 8007160:	4659      	mov	r1, fp
 8007162:	b1bb      	cbz	r3, 8007194 <_strtod_l+0x914>
 8007164:	f7ff fb6d 	bl	8006842 <sulp>
 8007168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800716c:	ec53 2b10 	vmov	r2, r3, d0
 8007170:	f7f9 f8ac 	bl	80002cc <__adddf3>
 8007174:	4682      	mov	sl, r0
 8007176:	468b      	mov	fp, r1
 8007178:	e7de      	b.n	8007138 <_strtod_l+0x8b8>
 800717a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800717e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007182:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007186:	f04f 3aff 	mov.w	sl, #4294967295
 800718a:	e7d5      	b.n	8007138 <_strtod_l+0x8b8>
 800718c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800718e:	ea13 0f0a 	tst.w	r3, sl
 8007192:	e7e1      	b.n	8007158 <_strtod_l+0x8d8>
 8007194:	f7ff fb55 	bl	8006842 <sulp>
 8007198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800719c:	ec53 2b10 	vmov	r2, r3, d0
 80071a0:	f7f9 f892 	bl	80002c8 <__aeabi_dsub>
 80071a4:	2200      	movs	r2, #0
 80071a6:	2300      	movs	r3, #0
 80071a8:	4682      	mov	sl, r0
 80071aa:	468b      	mov	fp, r1
 80071ac:	f7f9 fcac 	bl	8000b08 <__aeabi_dcmpeq>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d0c1      	beq.n	8007138 <_strtod_l+0x8b8>
 80071b4:	e619      	b.n	8006dea <_strtod_l+0x56a>
 80071b6:	4641      	mov	r1, r8
 80071b8:	4620      	mov	r0, r4
 80071ba:	f002 fe4d 	bl	8009e58 <__ratio>
 80071be:	ec57 6b10 	vmov	r6, r7, d0
 80071c2:	2200      	movs	r2, #0
 80071c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80071c8:	4630      	mov	r0, r6
 80071ca:	4639      	mov	r1, r7
 80071cc:	f7f9 fcb0 	bl	8000b30 <__aeabi_dcmple>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d06f      	beq.n	80072b4 <_strtod_l+0xa34>
 80071d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d17a      	bne.n	80072d0 <_strtod_l+0xa50>
 80071da:	f1ba 0f00 	cmp.w	sl, #0
 80071de:	d158      	bne.n	8007292 <_strtod_l+0xa12>
 80071e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d15a      	bne.n	80072a0 <_strtod_l+0xa20>
 80071ea:	4b64      	ldr	r3, [pc, #400]	@ (800737c <_strtod_l+0xafc>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	4630      	mov	r0, r6
 80071f0:	4639      	mov	r1, r7
 80071f2:	f7f9 fc93 	bl	8000b1c <__aeabi_dcmplt>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d159      	bne.n	80072ae <_strtod_l+0xa2e>
 80071fa:	4630      	mov	r0, r6
 80071fc:	4639      	mov	r1, r7
 80071fe:	4b60      	ldr	r3, [pc, #384]	@ (8007380 <_strtod_l+0xb00>)
 8007200:	2200      	movs	r2, #0
 8007202:	f7f9 fa19 	bl	8000638 <__aeabi_dmul>
 8007206:	4606      	mov	r6, r0
 8007208:	460f      	mov	r7, r1
 800720a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800720e:	9606      	str	r6, [sp, #24]
 8007210:	9307      	str	r3, [sp, #28]
 8007212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007216:	4d57      	ldr	r5, [pc, #348]	@ (8007374 <_strtod_l+0xaf4>)
 8007218:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800721c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800721e:	401d      	ands	r5, r3
 8007220:	4b58      	ldr	r3, [pc, #352]	@ (8007384 <_strtod_l+0xb04>)
 8007222:	429d      	cmp	r5, r3
 8007224:	f040 80b2 	bne.w	800738c <_strtod_l+0xb0c>
 8007228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800722a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800722e:	ec4b ab10 	vmov	d0, sl, fp
 8007232:	f002 fd49 	bl	8009cc8 <__ulp>
 8007236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800723a:	ec51 0b10 	vmov	r0, r1, d0
 800723e:	f7f9 f9fb 	bl	8000638 <__aeabi_dmul>
 8007242:	4652      	mov	r2, sl
 8007244:	465b      	mov	r3, fp
 8007246:	f7f9 f841 	bl	80002cc <__adddf3>
 800724a:	460b      	mov	r3, r1
 800724c:	4949      	ldr	r1, [pc, #292]	@ (8007374 <_strtod_l+0xaf4>)
 800724e:	4a4e      	ldr	r2, [pc, #312]	@ (8007388 <_strtod_l+0xb08>)
 8007250:	4019      	ands	r1, r3
 8007252:	4291      	cmp	r1, r2
 8007254:	4682      	mov	sl, r0
 8007256:	d942      	bls.n	80072de <_strtod_l+0xa5e>
 8007258:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800725a:	4b47      	ldr	r3, [pc, #284]	@ (8007378 <_strtod_l+0xaf8>)
 800725c:	429a      	cmp	r2, r3
 800725e:	d103      	bne.n	8007268 <_strtod_l+0x9e8>
 8007260:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007262:	3301      	adds	r3, #1
 8007264:	f43f ad2b 	beq.w	8006cbe <_strtod_l+0x43e>
 8007268:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007378 <_strtod_l+0xaf8>
 800726c:	f04f 3aff 	mov.w	sl, #4294967295
 8007270:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007272:	9805      	ldr	r0, [sp, #20]
 8007274:	f002 f9f4 	bl	8009660 <_Bfree>
 8007278:	9805      	ldr	r0, [sp, #20]
 800727a:	4649      	mov	r1, r9
 800727c:	f002 f9f0 	bl	8009660 <_Bfree>
 8007280:	9805      	ldr	r0, [sp, #20]
 8007282:	4641      	mov	r1, r8
 8007284:	f002 f9ec 	bl	8009660 <_Bfree>
 8007288:	9805      	ldr	r0, [sp, #20]
 800728a:	4621      	mov	r1, r4
 800728c:	f002 f9e8 	bl	8009660 <_Bfree>
 8007290:	e618      	b.n	8006ec4 <_strtod_l+0x644>
 8007292:	f1ba 0f01 	cmp.w	sl, #1
 8007296:	d103      	bne.n	80072a0 <_strtod_l+0xa20>
 8007298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800729a:	2b00      	cmp	r3, #0
 800729c:	f43f ada5 	beq.w	8006dea <_strtod_l+0x56a>
 80072a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007350 <_strtod_l+0xad0>
 80072a4:	4f35      	ldr	r7, [pc, #212]	@ (800737c <_strtod_l+0xafc>)
 80072a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80072aa:	2600      	movs	r6, #0
 80072ac:	e7b1      	b.n	8007212 <_strtod_l+0x992>
 80072ae:	4f34      	ldr	r7, [pc, #208]	@ (8007380 <_strtod_l+0xb00>)
 80072b0:	2600      	movs	r6, #0
 80072b2:	e7aa      	b.n	800720a <_strtod_l+0x98a>
 80072b4:	4b32      	ldr	r3, [pc, #200]	@ (8007380 <_strtod_l+0xb00>)
 80072b6:	4630      	mov	r0, r6
 80072b8:	4639      	mov	r1, r7
 80072ba:	2200      	movs	r2, #0
 80072bc:	f7f9 f9bc 	bl	8000638 <__aeabi_dmul>
 80072c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072c2:	4606      	mov	r6, r0
 80072c4:	460f      	mov	r7, r1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d09f      	beq.n	800720a <_strtod_l+0x98a>
 80072ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80072ce:	e7a0      	b.n	8007212 <_strtod_l+0x992>
 80072d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007358 <_strtod_l+0xad8>
 80072d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80072d8:	ec57 6b17 	vmov	r6, r7, d7
 80072dc:	e799      	b.n	8007212 <_strtod_l+0x992>
 80072de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80072e2:	9b08      	ldr	r3, [sp, #32]
 80072e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1c1      	bne.n	8007270 <_strtod_l+0x9f0>
 80072ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072f0:	0d1b      	lsrs	r3, r3, #20
 80072f2:	051b      	lsls	r3, r3, #20
 80072f4:	429d      	cmp	r5, r3
 80072f6:	d1bb      	bne.n	8007270 <_strtod_l+0x9f0>
 80072f8:	4630      	mov	r0, r6
 80072fa:	4639      	mov	r1, r7
 80072fc:	f7f9 fcfc 	bl	8000cf8 <__aeabi_d2lz>
 8007300:	f7f9 f96c 	bl	80005dc <__aeabi_l2d>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4630      	mov	r0, r6
 800730a:	4639      	mov	r1, r7
 800730c:	f7f8 ffdc 	bl	80002c8 <__aeabi_dsub>
 8007310:	460b      	mov	r3, r1
 8007312:	4602      	mov	r2, r0
 8007314:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007318:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800731c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800731e:	ea46 060a 	orr.w	r6, r6, sl
 8007322:	431e      	orrs	r6, r3
 8007324:	d06f      	beq.n	8007406 <_strtod_l+0xb86>
 8007326:	a30e      	add	r3, pc, #56	@ (adr r3, 8007360 <_strtod_l+0xae0>)
 8007328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732c:	f7f9 fbf6 	bl	8000b1c <__aeabi_dcmplt>
 8007330:	2800      	cmp	r0, #0
 8007332:	f47f accf 	bne.w	8006cd4 <_strtod_l+0x454>
 8007336:	a30c      	add	r3, pc, #48	@ (adr r3, 8007368 <_strtod_l+0xae8>)
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007340:	f7f9 fc0a 	bl	8000b58 <__aeabi_dcmpgt>
 8007344:	2800      	cmp	r0, #0
 8007346:	d093      	beq.n	8007270 <_strtod_l+0x9f0>
 8007348:	e4c4      	b.n	8006cd4 <_strtod_l+0x454>
 800734a:	bf00      	nop
 800734c:	f3af 8000 	nop.w
 8007350:	00000000 	.word	0x00000000
 8007354:	bff00000 	.word	0xbff00000
 8007358:	00000000 	.word	0x00000000
 800735c:	3ff00000 	.word	0x3ff00000
 8007360:	94a03595 	.word	0x94a03595
 8007364:	3fdfffff 	.word	0x3fdfffff
 8007368:	35afe535 	.word	0x35afe535
 800736c:	3fe00000 	.word	0x3fe00000
 8007370:	000fffff 	.word	0x000fffff
 8007374:	7ff00000 	.word	0x7ff00000
 8007378:	7fefffff 	.word	0x7fefffff
 800737c:	3ff00000 	.word	0x3ff00000
 8007380:	3fe00000 	.word	0x3fe00000
 8007384:	7fe00000 	.word	0x7fe00000
 8007388:	7c9fffff 	.word	0x7c9fffff
 800738c:	9b08      	ldr	r3, [sp, #32]
 800738e:	b323      	cbz	r3, 80073da <_strtod_l+0xb5a>
 8007390:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007394:	d821      	bhi.n	80073da <_strtod_l+0xb5a>
 8007396:	a328      	add	r3, pc, #160	@ (adr r3, 8007438 <_strtod_l+0xbb8>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	4630      	mov	r0, r6
 800739e:	4639      	mov	r1, r7
 80073a0:	f7f9 fbc6 	bl	8000b30 <__aeabi_dcmple>
 80073a4:	b1a0      	cbz	r0, 80073d0 <_strtod_l+0xb50>
 80073a6:	4639      	mov	r1, r7
 80073a8:	4630      	mov	r0, r6
 80073aa:	f7f9 fc1d 	bl	8000be8 <__aeabi_d2uiz>
 80073ae:	2801      	cmp	r0, #1
 80073b0:	bf38      	it	cc
 80073b2:	2001      	movcc	r0, #1
 80073b4:	f7f9 f8c6 	bl	8000544 <__aeabi_ui2d>
 80073b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073ba:	4606      	mov	r6, r0
 80073bc:	460f      	mov	r7, r1
 80073be:	b9fb      	cbnz	r3, 8007400 <_strtod_l+0xb80>
 80073c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073c4:	9014      	str	r0, [sp, #80]	@ 0x50
 80073c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80073c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80073cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80073d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80073d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80073d6:	1b5b      	subs	r3, r3, r5
 80073d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80073da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80073de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80073e2:	f002 fc71 	bl	8009cc8 <__ulp>
 80073e6:	4650      	mov	r0, sl
 80073e8:	ec53 2b10 	vmov	r2, r3, d0
 80073ec:	4659      	mov	r1, fp
 80073ee:	f7f9 f923 	bl	8000638 <__aeabi_dmul>
 80073f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073f6:	f7f8 ff69 	bl	80002cc <__adddf3>
 80073fa:	4682      	mov	sl, r0
 80073fc:	468b      	mov	fp, r1
 80073fe:	e770      	b.n	80072e2 <_strtod_l+0xa62>
 8007400:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007404:	e7e0      	b.n	80073c8 <_strtod_l+0xb48>
 8007406:	a30e      	add	r3, pc, #56	@ (adr r3, 8007440 <_strtod_l+0xbc0>)
 8007408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740c:	f7f9 fb86 	bl	8000b1c <__aeabi_dcmplt>
 8007410:	e798      	b.n	8007344 <_strtod_l+0xac4>
 8007412:	2300      	movs	r3, #0
 8007414:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007416:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007418:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	f7ff ba6d 	b.w	80068fa <_strtod_l+0x7a>
 8007420:	2a65      	cmp	r2, #101	@ 0x65
 8007422:	f43f ab66 	beq.w	8006af2 <_strtod_l+0x272>
 8007426:	2a45      	cmp	r2, #69	@ 0x45
 8007428:	f43f ab63 	beq.w	8006af2 <_strtod_l+0x272>
 800742c:	2301      	movs	r3, #1
 800742e:	f7ff bb9e 	b.w	8006b6e <_strtod_l+0x2ee>
 8007432:	bf00      	nop
 8007434:	f3af 8000 	nop.w
 8007438:	ffc00000 	.word	0xffc00000
 800743c:	41dfffff 	.word	0x41dfffff
 8007440:	94a03595 	.word	0x94a03595
 8007444:	3fcfffff 	.word	0x3fcfffff

08007448 <strtod>:
 8007448:	460a      	mov	r2, r1
 800744a:	4601      	mov	r1, r0
 800744c:	4802      	ldr	r0, [pc, #8]	@ (8007458 <strtod+0x10>)
 800744e:	4b03      	ldr	r3, [pc, #12]	@ (800745c <strtod+0x14>)
 8007450:	6800      	ldr	r0, [r0, #0]
 8007452:	f7ff ba15 	b.w	8006880 <_strtod_l>
 8007456:	bf00      	nop
 8007458:	20000184 	.word	0x20000184
 800745c:	20000018 	.word	0x20000018

08007460 <__cvt>:
 8007460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007464:	ec57 6b10 	vmov	r6, r7, d0
 8007468:	2f00      	cmp	r7, #0
 800746a:	460c      	mov	r4, r1
 800746c:	4619      	mov	r1, r3
 800746e:	463b      	mov	r3, r7
 8007470:	bfbb      	ittet	lt
 8007472:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007476:	461f      	movlt	r7, r3
 8007478:	2300      	movge	r3, #0
 800747a:	232d      	movlt	r3, #45	@ 0x2d
 800747c:	700b      	strb	r3, [r1, #0]
 800747e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007480:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007484:	4691      	mov	r9, r2
 8007486:	f023 0820 	bic.w	r8, r3, #32
 800748a:	bfbc      	itt	lt
 800748c:	4632      	movlt	r2, r6
 800748e:	4616      	movlt	r6, r2
 8007490:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007494:	d005      	beq.n	80074a2 <__cvt+0x42>
 8007496:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800749a:	d100      	bne.n	800749e <__cvt+0x3e>
 800749c:	3401      	adds	r4, #1
 800749e:	2102      	movs	r1, #2
 80074a0:	e000      	b.n	80074a4 <__cvt+0x44>
 80074a2:	2103      	movs	r1, #3
 80074a4:	ab03      	add	r3, sp, #12
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	ab02      	add	r3, sp, #8
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	ec47 6b10 	vmov	d0, r6, r7
 80074b0:	4653      	mov	r3, sl
 80074b2:	4622      	mov	r2, r4
 80074b4:	f000 fe84 	bl	80081c0 <_dtoa_r>
 80074b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80074bc:	4605      	mov	r5, r0
 80074be:	d119      	bne.n	80074f4 <__cvt+0x94>
 80074c0:	f019 0f01 	tst.w	r9, #1
 80074c4:	d00e      	beq.n	80074e4 <__cvt+0x84>
 80074c6:	eb00 0904 	add.w	r9, r0, r4
 80074ca:	2200      	movs	r2, #0
 80074cc:	2300      	movs	r3, #0
 80074ce:	4630      	mov	r0, r6
 80074d0:	4639      	mov	r1, r7
 80074d2:	f7f9 fb19 	bl	8000b08 <__aeabi_dcmpeq>
 80074d6:	b108      	cbz	r0, 80074dc <__cvt+0x7c>
 80074d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80074dc:	2230      	movs	r2, #48	@ 0x30
 80074de:	9b03      	ldr	r3, [sp, #12]
 80074e0:	454b      	cmp	r3, r9
 80074e2:	d31e      	bcc.n	8007522 <__cvt+0xc2>
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074e8:	1b5b      	subs	r3, r3, r5
 80074ea:	4628      	mov	r0, r5
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	b004      	add	sp, #16
 80074f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074f8:	eb00 0904 	add.w	r9, r0, r4
 80074fc:	d1e5      	bne.n	80074ca <__cvt+0x6a>
 80074fe:	7803      	ldrb	r3, [r0, #0]
 8007500:	2b30      	cmp	r3, #48	@ 0x30
 8007502:	d10a      	bne.n	800751a <__cvt+0xba>
 8007504:	2200      	movs	r2, #0
 8007506:	2300      	movs	r3, #0
 8007508:	4630      	mov	r0, r6
 800750a:	4639      	mov	r1, r7
 800750c:	f7f9 fafc 	bl	8000b08 <__aeabi_dcmpeq>
 8007510:	b918      	cbnz	r0, 800751a <__cvt+0xba>
 8007512:	f1c4 0401 	rsb	r4, r4, #1
 8007516:	f8ca 4000 	str.w	r4, [sl]
 800751a:	f8da 3000 	ldr.w	r3, [sl]
 800751e:	4499      	add	r9, r3
 8007520:	e7d3      	b.n	80074ca <__cvt+0x6a>
 8007522:	1c59      	adds	r1, r3, #1
 8007524:	9103      	str	r1, [sp, #12]
 8007526:	701a      	strb	r2, [r3, #0]
 8007528:	e7d9      	b.n	80074de <__cvt+0x7e>

0800752a <__exponent>:
 800752a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800752c:	2900      	cmp	r1, #0
 800752e:	bfba      	itte	lt
 8007530:	4249      	neglt	r1, r1
 8007532:	232d      	movlt	r3, #45	@ 0x2d
 8007534:	232b      	movge	r3, #43	@ 0x2b
 8007536:	2909      	cmp	r1, #9
 8007538:	7002      	strb	r2, [r0, #0]
 800753a:	7043      	strb	r3, [r0, #1]
 800753c:	dd29      	ble.n	8007592 <__exponent+0x68>
 800753e:	f10d 0307 	add.w	r3, sp, #7
 8007542:	461d      	mov	r5, r3
 8007544:	270a      	movs	r7, #10
 8007546:	461a      	mov	r2, r3
 8007548:	fbb1 f6f7 	udiv	r6, r1, r7
 800754c:	fb07 1416 	mls	r4, r7, r6, r1
 8007550:	3430      	adds	r4, #48	@ 0x30
 8007552:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007556:	460c      	mov	r4, r1
 8007558:	2c63      	cmp	r4, #99	@ 0x63
 800755a:	f103 33ff 	add.w	r3, r3, #4294967295
 800755e:	4631      	mov	r1, r6
 8007560:	dcf1      	bgt.n	8007546 <__exponent+0x1c>
 8007562:	3130      	adds	r1, #48	@ 0x30
 8007564:	1e94      	subs	r4, r2, #2
 8007566:	f803 1c01 	strb.w	r1, [r3, #-1]
 800756a:	1c41      	adds	r1, r0, #1
 800756c:	4623      	mov	r3, r4
 800756e:	42ab      	cmp	r3, r5
 8007570:	d30a      	bcc.n	8007588 <__exponent+0x5e>
 8007572:	f10d 0309 	add.w	r3, sp, #9
 8007576:	1a9b      	subs	r3, r3, r2
 8007578:	42ac      	cmp	r4, r5
 800757a:	bf88      	it	hi
 800757c:	2300      	movhi	r3, #0
 800757e:	3302      	adds	r3, #2
 8007580:	4403      	add	r3, r0
 8007582:	1a18      	subs	r0, r3, r0
 8007584:	b003      	add	sp, #12
 8007586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007588:	f813 6b01 	ldrb.w	r6, [r3], #1
 800758c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007590:	e7ed      	b.n	800756e <__exponent+0x44>
 8007592:	2330      	movs	r3, #48	@ 0x30
 8007594:	3130      	adds	r1, #48	@ 0x30
 8007596:	7083      	strb	r3, [r0, #2]
 8007598:	70c1      	strb	r1, [r0, #3]
 800759a:	1d03      	adds	r3, r0, #4
 800759c:	e7f1      	b.n	8007582 <__exponent+0x58>
	...

080075a0 <_printf_float>:
 80075a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a4:	b08d      	sub	sp, #52	@ 0x34
 80075a6:	460c      	mov	r4, r1
 80075a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80075ac:	4616      	mov	r6, r2
 80075ae:	461f      	mov	r7, r3
 80075b0:	4605      	mov	r5, r0
 80075b2:	f000 fced 	bl	8007f90 <_localeconv_r>
 80075b6:	6803      	ldr	r3, [r0, #0]
 80075b8:	9304      	str	r3, [sp, #16]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7f8 fe78 	bl	80002b0 <strlen>
 80075c0:	2300      	movs	r3, #0
 80075c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075c4:	f8d8 3000 	ldr.w	r3, [r8]
 80075c8:	9005      	str	r0, [sp, #20]
 80075ca:	3307      	adds	r3, #7
 80075cc:	f023 0307 	bic.w	r3, r3, #7
 80075d0:	f103 0208 	add.w	r2, r3, #8
 80075d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80075d8:	f8d4 b000 	ldr.w	fp, [r4]
 80075dc:	f8c8 2000 	str.w	r2, [r8]
 80075e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80075e8:	9307      	str	r3, [sp, #28]
 80075ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80075ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80075f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075f6:	4b9c      	ldr	r3, [pc, #624]	@ (8007868 <_printf_float+0x2c8>)
 80075f8:	f04f 32ff 	mov.w	r2, #4294967295
 80075fc:	f7f9 fab6 	bl	8000b6c <__aeabi_dcmpun>
 8007600:	bb70      	cbnz	r0, 8007660 <_printf_float+0xc0>
 8007602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007606:	4b98      	ldr	r3, [pc, #608]	@ (8007868 <_printf_float+0x2c8>)
 8007608:	f04f 32ff 	mov.w	r2, #4294967295
 800760c:	f7f9 fa90 	bl	8000b30 <__aeabi_dcmple>
 8007610:	bb30      	cbnz	r0, 8007660 <_printf_float+0xc0>
 8007612:	2200      	movs	r2, #0
 8007614:	2300      	movs	r3, #0
 8007616:	4640      	mov	r0, r8
 8007618:	4649      	mov	r1, r9
 800761a:	f7f9 fa7f 	bl	8000b1c <__aeabi_dcmplt>
 800761e:	b110      	cbz	r0, 8007626 <_printf_float+0x86>
 8007620:	232d      	movs	r3, #45	@ 0x2d
 8007622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007626:	4a91      	ldr	r2, [pc, #580]	@ (800786c <_printf_float+0x2cc>)
 8007628:	4b91      	ldr	r3, [pc, #580]	@ (8007870 <_printf_float+0x2d0>)
 800762a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800762e:	bf94      	ite	ls
 8007630:	4690      	movls	r8, r2
 8007632:	4698      	movhi	r8, r3
 8007634:	2303      	movs	r3, #3
 8007636:	6123      	str	r3, [r4, #16]
 8007638:	f02b 0304 	bic.w	r3, fp, #4
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	f04f 0900 	mov.w	r9, #0
 8007642:	9700      	str	r7, [sp, #0]
 8007644:	4633      	mov	r3, r6
 8007646:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007648:	4621      	mov	r1, r4
 800764a:	4628      	mov	r0, r5
 800764c:	f000 f9d2 	bl	80079f4 <_printf_common>
 8007650:	3001      	adds	r0, #1
 8007652:	f040 808d 	bne.w	8007770 <_printf_float+0x1d0>
 8007656:	f04f 30ff 	mov.w	r0, #4294967295
 800765a:	b00d      	add	sp, #52	@ 0x34
 800765c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007660:	4642      	mov	r2, r8
 8007662:	464b      	mov	r3, r9
 8007664:	4640      	mov	r0, r8
 8007666:	4649      	mov	r1, r9
 8007668:	f7f9 fa80 	bl	8000b6c <__aeabi_dcmpun>
 800766c:	b140      	cbz	r0, 8007680 <_printf_float+0xe0>
 800766e:	464b      	mov	r3, r9
 8007670:	2b00      	cmp	r3, #0
 8007672:	bfbc      	itt	lt
 8007674:	232d      	movlt	r3, #45	@ 0x2d
 8007676:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800767a:	4a7e      	ldr	r2, [pc, #504]	@ (8007874 <_printf_float+0x2d4>)
 800767c:	4b7e      	ldr	r3, [pc, #504]	@ (8007878 <_printf_float+0x2d8>)
 800767e:	e7d4      	b.n	800762a <_printf_float+0x8a>
 8007680:	6863      	ldr	r3, [r4, #4]
 8007682:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007686:	9206      	str	r2, [sp, #24]
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	d13b      	bne.n	8007704 <_printf_float+0x164>
 800768c:	2306      	movs	r3, #6
 800768e:	6063      	str	r3, [r4, #4]
 8007690:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007694:	2300      	movs	r3, #0
 8007696:	6022      	str	r2, [r4, #0]
 8007698:	9303      	str	r3, [sp, #12]
 800769a:	ab0a      	add	r3, sp, #40	@ 0x28
 800769c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80076a0:	ab09      	add	r3, sp, #36	@ 0x24
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	6861      	ldr	r1, [r4, #4]
 80076a6:	ec49 8b10 	vmov	d0, r8, r9
 80076aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80076ae:	4628      	mov	r0, r5
 80076b0:	f7ff fed6 	bl	8007460 <__cvt>
 80076b4:	9b06      	ldr	r3, [sp, #24]
 80076b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076b8:	2b47      	cmp	r3, #71	@ 0x47
 80076ba:	4680      	mov	r8, r0
 80076bc:	d129      	bne.n	8007712 <_printf_float+0x172>
 80076be:	1cc8      	adds	r0, r1, #3
 80076c0:	db02      	blt.n	80076c8 <_printf_float+0x128>
 80076c2:	6863      	ldr	r3, [r4, #4]
 80076c4:	4299      	cmp	r1, r3
 80076c6:	dd41      	ble.n	800774c <_printf_float+0x1ac>
 80076c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80076cc:	fa5f fa8a 	uxtb.w	sl, sl
 80076d0:	3901      	subs	r1, #1
 80076d2:	4652      	mov	r2, sl
 80076d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80076d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80076da:	f7ff ff26 	bl	800752a <__exponent>
 80076de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076e0:	1813      	adds	r3, r2, r0
 80076e2:	2a01      	cmp	r2, #1
 80076e4:	4681      	mov	r9, r0
 80076e6:	6123      	str	r3, [r4, #16]
 80076e8:	dc02      	bgt.n	80076f0 <_printf_float+0x150>
 80076ea:	6822      	ldr	r2, [r4, #0]
 80076ec:	07d2      	lsls	r2, r2, #31
 80076ee:	d501      	bpl.n	80076f4 <_printf_float+0x154>
 80076f0:	3301      	adds	r3, #1
 80076f2:	6123      	str	r3, [r4, #16]
 80076f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0a2      	beq.n	8007642 <_printf_float+0xa2>
 80076fc:	232d      	movs	r3, #45	@ 0x2d
 80076fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007702:	e79e      	b.n	8007642 <_printf_float+0xa2>
 8007704:	9a06      	ldr	r2, [sp, #24]
 8007706:	2a47      	cmp	r2, #71	@ 0x47
 8007708:	d1c2      	bne.n	8007690 <_printf_float+0xf0>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1c0      	bne.n	8007690 <_printf_float+0xf0>
 800770e:	2301      	movs	r3, #1
 8007710:	e7bd      	b.n	800768e <_printf_float+0xee>
 8007712:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007716:	d9db      	bls.n	80076d0 <_printf_float+0x130>
 8007718:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800771c:	d118      	bne.n	8007750 <_printf_float+0x1b0>
 800771e:	2900      	cmp	r1, #0
 8007720:	6863      	ldr	r3, [r4, #4]
 8007722:	dd0b      	ble.n	800773c <_printf_float+0x19c>
 8007724:	6121      	str	r1, [r4, #16]
 8007726:	b913      	cbnz	r3, 800772e <_printf_float+0x18e>
 8007728:	6822      	ldr	r2, [r4, #0]
 800772a:	07d0      	lsls	r0, r2, #31
 800772c:	d502      	bpl.n	8007734 <_printf_float+0x194>
 800772e:	3301      	adds	r3, #1
 8007730:	440b      	add	r3, r1
 8007732:	6123      	str	r3, [r4, #16]
 8007734:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007736:	f04f 0900 	mov.w	r9, #0
 800773a:	e7db      	b.n	80076f4 <_printf_float+0x154>
 800773c:	b913      	cbnz	r3, 8007744 <_printf_float+0x1a4>
 800773e:	6822      	ldr	r2, [r4, #0]
 8007740:	07d2      	lsls	r2, r2, #31
 8007742:	d501      	bpl.n	8007748 <_printf_float+0x1a8>
 8007744:	3302      	adds	r3, #2
 8007746:	e7f4      	b.n	8007732 <_printf_float+0x192>
 8007748:	2301      	movs	r3, #1
 800774a:	e7f2      	b.n	8007732 <_printf_float+0x192>
 800774c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007752:	4299      	cmp	r1, r3
 8007754:	db05      	blt.n	8007762 <_printf_float+0x1c2>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	6121      	str	r1, [r4, #16]
 800775a:	07d8      	lsls	r0, r3, #31
 800775c:	d5ea      	bpl.n	8007734 <_printf_float+0x194>
 800775e:	1c4b      	adds	r3, r1, #1
 8007760:	e7e7      	b.n	8007732 <_printf_float+0x192>
 8007762:	2900      	cmp	r1, #0
 8007764:	bfd4      	ite	le
 8007766:	f1c1 0202 	rsble	r2, r1, #2
 800776a:	2201      	movgt	r2, #1
 800776c:	4413      	add	r3, r2
 800776e:	e7e0      	b.n	8007732 <_printf_float+0x192>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	055a      	lsls	r2, r3, #21
 8007774:	d407      	bmi.n	8007786 <_printf_float+0x1e6>
 8007776:	6923      	ldr	r3, [r4, #16]
 8007778:	4642      	mov	r2, r8
 800777a:	4631      	mov	r1, r6
 800777c:	4628      	mov	r0, r5
 800777e:	47b8      	blx	r7
 8007780:	3001      	adds	r0, #1
 8007782:	d12b      	bne.n	80077dc <_printf_float+0x23c>
 8007784:	e767      	b.n	8007656 <_printf_float+0xb6>
 8007786:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800778a:	f240 80dd 	bls.w	8007948 <_printf_float+0x3a8>
 800778e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007792:	2200      	movs	r2, #0
 8007794:	2300      	movs	r3, #0
 8007796:	f7f9 f9b7 	bl	8000b08 <__aeabi_dcmpeq>
 800779a:	2800      	cmp	r0, #0
 800779c:	d033      	beq.n	8007806 <_printf_float+0x266>
 800779e:	4a37      	ldr	r2, [pc, #220]	@ (800787c <_printf_float+0x2dc>)
 80077a0:	2301      	movs	r3, #1
 80077a2:	4631      	mov	r1, r6
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b8      	blx	r7
 80077a8:	3001      	adds	r0, #1
 80077aa:	f43f af54 	beq.w	8007656 <_printf_float+0xb6>
 80077ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80077b2:	4543      	cmp	r3, r8
 80077b4:	db02      	blt.n	80077bc <_printf_float+0x21c>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	07d8      	lsls	r0, r3, #31
 80077ba:	d50f      	bpl.n	80077dc <_printf_float+0x23c>
 80077bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077c0:	4631      	mov	r1, r6
 80077c2:	4628      	mov	r0, r5
 80077c4:	47b8      	blx	r7
 80077c6:	3001      	adds	r0, #1
 80077c8:	f43f af45 	beq.w	8007656 <_printf_float+0xb6>
 80077cc:	f04f 0900 	mov.w	r9, #0
 80077d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80077d4:	f104 0a1a 	add.w	sl, r4, #26
 80077d8:	45c8      	cmp	r8, r9
 80077da:	dc09      	bgt.n	80077f0 <_printf_float+0x250>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	079b      	lsls	r3, r3, #30
 80077e0:	f100 8103 	bmi.w	80079ea <_printf_float+0x44a>
 80077e4:	68e0      	ldr	r0, [r4, #12]
 80077e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077e8:	4298      	cmp	r0, r3
 80077ea:	bfb8      	it	lt
 80077ec:	4618      	movlt	r0, r3
 80077ee:	e734      	b.n	800765a <_printf_float+0xba>
 80077f0:	2301      	movs	r3, #1
 80077f2:	4652      	mov	r2, sl
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b8      	blx	r7
 80077fa:	3001      	adds	r0, #1
 80077fc:	f43f af2b 	beq.w	8007656 <_printf_float+0xb6>
 8007800:	f109 0901 	add.w	r9, r9, #1
 8007804:	e7e8      	b.n	80077d8 <_printf_float+0x238>
 8007806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	dc39      	bgt.n	8007880 <_printf_float+0x2e0>
 800780c:	4a1b      	ldr	r2, [pc, #108]	@ (800787c <_printf_float+0x2dc>)
 800780e:	2301      	movs	r3, #1
 8007810:	4631      	mov	r1, r6
 8007812:	4628      	mov	r0, r5
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	f43f af1d 	beq.w	8007656 <_printf_float+0xb6>
 800781c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007820:	ea59 0303 	orrs.w	r3, r9, r3
 8007824:	d102      	bne.n	800782c <_printf_float+0x28c>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	07d9      	lsls	r1, r3, #31
 800782a:	d5d7      	bpl.n	80077dc <_printf_float+0x23c>
 800782c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007830:	4631      	mov	r1, r6
 8007832:	4628      	mov	r0, r5
 8007834:	47b8      	blx	r7
 8007836:	3001      	adds	r0, #1
 8007838:	f43f af0d 	beq.w	8007656 <_printf_float+0xb6>
 800783c:	f04f 0a00 	mov.w	sl, #0
 8007840:	f104 0b1a 	add.w	fp, r4, #26
 8007844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007846:	425b      	negs	r3, r3
 8007848:	4553      	cmp	r3, sl
 800784a:	dc01      	bgt.n	8007850 <_printf_float+0x2b0>
 800784c:	464b      	mov	r3, r9
 800784e:	e793      	b.n	8007778 <_printf_float+0x1d8>
 8007850:	2301      	movs	r3, #1
 8007852:	465a      	mov	r2, fp
 8007854:	4631      	mov	r1, r6
 8007856:	4628      	mov	r0, r5
 8007858:	47b8      	blx	r7
 800785a:	3001      	adds	r0, #1
 800785c:	f43f aefb 	beq.w	8007656 <_printf_float+0xb6>
 8007860:	f10a 0a01 	add.w	sl, sl, #1
 8007864:	e7ee      	b.n	8007844 <_printf_float+0x2a4>
 8007866:	bf00      	nop
 8007868:	7fefffff 	.word	0x7fefffff
 800786c:	0800aa90 	.word	0x0800aa90
 8007870:	0800aa94 	.word	0x0800aa94
 8007874:	0800aa98 	.word	0x0800aa98
 8007878:	0800aa9c 	.word	0x0800aa9c
 800787c:	0800aaa0 	.word	0x0800aaa0
 8007880:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007882:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007886:	4553      	cmp	r3, sl
 8007888:	bfa8      	it	ge
 800788a:	4653      	movge	r3, sl
 800788c:	2b00      	cmp	r3, #0
 800788e:	4699      	mov	r9, r3
 8007890:	dc36      	bgt.n	8007900 <_printf_float+0x360>
 8007892:	f04f 0b00 	mov.w	fp, #0
 8007896:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800789a:	f104 021a 	add.w	r2, r4, #26
 800789e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078a0:	9306      	str	r3, [sp, #24]
 80078a2:	eba3 0309 	sub.w	r3, r3, r9
 80078a6:	455b      	cmp	r3, fp
 80078a8:	dc31      	bgt.n	800790e <_printf_float+0x36e>
 80078aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ac:	459a      	cmp	sl, r3
 80078ae:	dc3a      	bgt.n	8007926 <_printf_float+0x386>
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	07da      	lsls	r2, r3, #31
 80078b4:	d437      	bmi.n	8007926 <_printf_float+0x386>
 80078b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b8:	ebaa 0903 	sub.w	r9, sl, r3
 80078bc:	9b06      	ldr	r3, [sp, #24]
 80078be:	ebaa 0303 	sub.w	r3, sl, r3
 80078c2:	4599      	cmp	r9, r3
 80078c4:	bfa8      	it	ge
 80078c6:	4699      	movge	r9, r3
 80078c8:	f1b9 0f00 	cmp.w	r9, #0
 80078cc:	dc33      	bgt.n	8007936 <_printf_float+0x396>
 80078ce:	f04f 0800 	mov.w	r8, #0
 80078d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078d6:	f104 0b1a 	add.w	fp, r4, #26
 80078da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078dc:	ebaa 0303 	sub.w	r3, sl, r3
 80078e0:	eba3 0309 	sub.w	r3, r3, r9
 80078e4:	4543      	cmp	r3, r8
 80078e6:	f77f af79 	ble.w	80077dc <_printf_float+0x23c>
 80078ea:	2301      	movs	r3, #1
 80078ec:	465a      	mov	r2, fp
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b8      	blx	r7
 80078f4:	3001      	adds	r0, #1
 80078f6:	f43f aeae 	beq.w	8007656 <_printf_float+0xb6>
 80078fa:	f108 0801 	add.w	r8, r8, #1
 80078fe:	e7ec      	b.n	80078da <_printf_float+0x33a>
 8007900:	4642      	mov	r2, r8
 8007902:	4631      	mov	r1, r6
 8007904:	4628      	mov	r0, r5
 8007906:	47b8      	blx	r7
 8007908:	3001      	adds	r0, #1
 800790a:	d1c2      	bne.n	8007892 <_printf_float+0x2f2>
 800790c:	e6a3      	b.n	8007656 <_printf_float+0xb6>
 800790e:	2301      	movs	r3, #1
 8007910:	4631      	mov	r1, r6
 8007912:	4628      	mov	r0, r5
 8007914:	9206      	str	r2, [sp, #24]
 8007916:	47b8      	blx	r7
 8007918:	3001      	adds	r0, #1
 800791a:	f43f ae9c 	beq.w	8007656 <_printf_float+0xb6>
 800791e:	9a06      	ldr	r2, [sp, #24]
 8007920:	f10b 0b01 	add.w	fp, fp, #1
 8007924:	e7bb      	b.n	800789e <_printf_float+0x2fe>
 8007926:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800792a:	4631      	mov	r1, r6
 800792c:	4628      	mov	r0, r5
 800792e:	47b8      	blx	r7
 8007930:	3001      	adds	r0, #1
 8007932:	d1c0      	bne.n	80078b6 <_printf_float+0x316>
 8007934:	e68f      	b.n	8007656 <_printf_float+0xb6>
 8007936:	9a06      	ldr	r2, [sp, #24]
 8007938:	464b      	mov	r3, r9
 800793a:	4442      	add	r2, r8
 800793c:	4631      	mov	r1, r6
 800793e:	4628      	mov	r0, r5
 8007940:	47b8      	blx	r7
 8007942:	3001      	adds	r0, #1
 8007944:	d1c3      	bne.n	80078ce <_printf_float+0x32e>
 8007946:	e686      	b.n	8007656 <_printf_float+0xb6>
 8007948:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800794c:	f1ba 0f01 	cmp.w	sl, #1
 8007950:	dc01      	bgt.n	8007956 <_printf_float+0x3b6>
 8007952:	07db      	lsls	r3, r3, #31
 8007954:	d536      	bpl.n	80079c4 <_printf_float+0x424>
 8007956:	2301      	movs	r3, #1
 8007958:	4642      	mov	r2, r8
 800795a:	4631      	mov	r1, r6
 800795c:	4628      	mov	r0, r5
 800795e:	47b8      	blx	r7
 8007960:	3001      	adds	r0, #1
 8007962:	f43f ae78 	beq.w	8007656 <_printf_float+0xb6>
 8007966:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800796a:	4631      	mov	r1, r6
 800796c:	4628      	mov	r0, r5
 800796e:	47b8      	blx	r7
 8007970:	3001      	adds	r0, #1
 8007972:	f43f ae70 	beq.w	8007656 <_printf_float+0xb6>
 8007976:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800797a:	2200      	movs	r2, #0
 800797c:	2300      	movs	r3, #0
 800797e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007982:	f7f9 f8c1 	bl	8000b08 <__aeabi_dcmpeq>
 8007986:	b9c0      	cbnz	r0, 80079ba <_printf_float+0x41a>
 8007988:	4653      	mov	r3, sl
 800798a:	f108 0201 	add.w	r2, r8, #1
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	47b8      	blx	r7
 8007994:	3001      	adds	r0, #1
 8007996:	d10c      	bne.n	80079b2 <_printf_float+0x412>
 8007998:	e65d      	b.n	8007656 <_printf_float+0xb6>
 800799a:	2301      	movs	r3, #1
 800799c:	465a      	mov	r2, fp
 800799e:	4631      	mov	r1, r6
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b8      	blx	r7
 80079a4:	3001      	adds	r0, #1
 80079a6:	f43f ae56 	beq.w	8007656 <_printf_float+0xb6>
 80079aa:	f108 0801 	add.w	r8, r8, #1
 80079ae:	45d0      	cmp	r8, sl
 80079b0:	dbf3      	blt.n	800799a <_printf_float+0x3fa>
 80079b2:	464b      	mov	r3, r9
 80079b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079b8:	e6df      	b.n	800777a <_printf_float+0x1da>
 80079ba:	f04f 0800 	mov.w	r8, #0
 80079be:	f104 0b1a 	add.w	fp, r4, #26
 80079c2:	e7f4      	b.n	80079ae <_printf_float+0x40e>
 80079c4:	2301      	movs	r3, #1
 80079c6:	4642      	mov	r2, r8
 80079c8:	e7e1      	b.n	800798e <_printf_float+0x3ee>
 80079ca:	2301      	movs	r3, #1
 80079cc:	464a      	mov	r2, r9
 80079ce:	4631      	mov	r1, r6
 80079d0:	4628      	mov	r0, r5
 80079d2:	47b8      	blx	r7
 80079d4:	3001      	adds	r0, #1
 80079d6:	f43f ae3e 	beq.w	8007656 <_printf_float+0xb6>
 80079da:	f108 0801 	add.w	r8, r8, #1
 80079de:	68e3      	ldr	r3, [r4, #12]
 80079e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079e2:	1a5b      	subs	r3, r3, r1
 80079e4:	4543      	cmp	r3, r8
 80079e6:	dcf0      	bgt.n	80079ca <_printf_float+0x42a>
 80079e8:	e6fc      	b.n	80077e4 <_printf_float+0x244>
 80079ea:	f04f 0800 	mov.w	r8, #0
 80079ee:	f104 0919 	add.w	r9, r4, #25
 80079f2:	e7f4      	b.n	80079de <_printf_float+0x43e>

080079f4 <_printf_common>:
 80079f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f8:	4616      	mov	r6, r2
 80079fa:	4698      	mov	r8, r3
 80079fc:	688a      	ldr	r2, [r1, #8]
 80079fe:	690b      	ldr	r3, [r1, #16]
 8007a00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a04:	4293      	cmp	r3, r2
 8007a06:	bfb8      	it	lt
 8007a08:	4613      	movlt	r3, r2
 8007a0a:	6033      	str	r3, [r6, #0]
 8007a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a10:	4607      	mov	r7, r0
 8007a12:	460c      	mov	r4, r1
 8007a14:	b10a      	cbz	r2, 8007a1a <_printf_common+0x26>
 8007a16:	3301      	adds	r3, #1
 8007a18:	6033      	str	r3, [r6, #0]
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	0699      	lsls	r1, r3, #26
 8007a1e:	bf42      	ittt	mi
 8007a20:	6833      	ldrmi	r3, [r6, #0]
 8007a22:	3302      	addmi	r3, #2
 8007a24:	6033      	strmi	r3, [r6, #0]
 8007a26:	6825      	ldr	r5, [r4, #0]
 8007a28:	f015 0506 	ands.w	r5, r5, #6
 8007a2c:	d106      	bne.n	8007a3c <_printf_common+0x48>
 8007a2e:	f104 0a19 	add.w	sl, r4, #25
 8007a32:	68e3      	ldr	r3, [r4, #12]
 8007a34:	6832      	ldr	r2, [r6, #0]
 8007a36:	1a9b      	subs	r3, r3, r2
 8007a38:	42ab      	cmp	r3, r5
 8007a3a:	dc26      	bgt.n	8007a8a <_printf_common+0x96>
 8007a3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a40:	6822      	ldr	r2, [r4, #0]
 8007a42:	3b00      	subs	r3, #0
 8007a44:	bf18      	it	ne
 8007a46:	2301      	movne	r3, #1
 8007a48:	0692      	lsls	r2, r2, #26
 8007a4a:	d42b      	bmi.n	8007aa4 <_printf_common+0xb0>
 8007a4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a50:	4641      	mov	r1, r8
 8007a52:	4638      	mov	r0, r7
 8007a54:	47c8      	blx	r9
 8007a56:	3001      	adds	r0, #1
 8007a58:	d01e      	beq.n	8007a98 <_printf_common+0xa4>
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	6922      	ldr	r2, [r4, #16]
 8007a5e:	f003 0306 	and.w	r3, r3, #6
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	bf02      	ittt	eq
 8007a66:	68e5      	ldreq	r5, [r4, #12]
 8007a68:	6833      	ldreq	r3, [r6, #0]
 8007a6a:	1aed      	subeq	r5, r5, r3
 8007a6c:	68a3      	ldr	r3, [r4, #8]
 8007a6e:	bf0c      	ite	eq
 8007a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a74:	2500      	movne	r5, #0
 8007a76:	4293      	cmp	r3, r2
 8007a78:	bfc4      	itt	gt
 8007a7a:	1a9b      	subgt	r3, r3, r2
 8007a7c:	18ed      	addgt	r5, r5, r3
 8007a7e:	2600      	movs	r6, #0
 8007a80:	341a      	adds	r4, #26
 8007a82:	42b5      	cmp	r5, r6
 8007a84:	d11a      	bne.n	8007abc <_printf_common+0xc8>
 8007a86:	2000      	movs	r0, #0
 8007a88:	e008      	b.n	8007a9c <_printf_common+0xa8>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	4652      	mov	r2, sl
 8007a8e:	4641      	mov	r1, r8
 8007a90:	4638      	mov	r0, r7
 8007a92:	47c8      	blx	r9
 8007a94:	3001      	adds	r0, #1
 8007a96:	d103      	bne.n	8007aa0 <_printf_common+0xac>
 8007a98:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aa0:	3501      	adds	r5, #1
 8007aa2:	e7c6      	b.n	8007a32 <_printf_common+0x3e>
 8007aa4:	18e1      	adds	r1, r4, r3
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	2030      	movs	r0, #48	@ 0x30
 8007aaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007aae:	4422      	add	r2, r4
 8007ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ab4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ab8:	3302      	adds	r3, #2
 8007aba:	e7c7      	b.n	8007a4c <_printf_common+0x58>
 8007abc:	2301      	movs	r3, #1
 8007abe:	4622      	mov	r2, r4
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	47c8      	blx	r9
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d0e6      	beq.n	8007a98 <_printf_common+0xa4>
 8007aca:	3601      	adds	r6, #1
 8007acc:	e7d9      	b.n	8007a82 <_printf_common+0x8e>
	...

08007ad0 <_printf_i>:
 8007ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad4:	7e0f      	ldrb	r7, [r1, #24]
 8007ad6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ad8:	2f78      	cmp	r7, #120	@ 0x78
 8007ada:	4691      	mov	r9, r2
 8007adc:	4680      	mov	r8, r0
 8007ade:	460c      	mov	r4, r1
 8007ae0:	469a      	mov	sl, r3
 8007ae2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ae6:	d807      	bhi.n	8007af8 <_printf_i+0x28>
 8007ae8:	2f62      	cmp	r7, #98	@ 0x62
 8007aea:	d80a      	bhi.n	8007b02 <_printf_i+0x32>
 8007aec:	2f00      	cmp	r7, #0
 8007aee:	f000 80d2 	beq.w	8007c96 <_printf_i+0x1c6>
 8007af2:	2f58      	cmp	r7, #88	@ 0x58
 8007af4:	f000 80b9 	beq.w	8007c6a <_printf_i+0x19a>
 8007af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007afc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b00:	e03a      	b.n	8007b78 <_printf_i+0xa8>
 8007b02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b06:	2b15      	cmp	r3, #21
 8007b08:	d8f6      	bhi.n	8007af8 <_printf_i+0x28>
 8007b0a:	a101      	add	r1, pc, #4	@ (adr r1, 8007b10 <_printf_i+0x40>)
 8007b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b10:	08007b69 	.word	0x08007b69
 8007b14:	08007b7d 	.word	0x08007b7d
 8007b18:	08007af9 	.word	0x08007af9
 8007b1c:	08007af9 	.word	0x08007af9
 8007b20:	08007af9 	.word	0x08007af9
 8007b24:	08007af9 	.word	0x08007af9
 8007b28:	08007b7d 	.word	0x08007b7d
 8007b2c:	08007af9 	.word	0x08007af9
 8007b30:	08007af9 	.word	0x08007af9
 8007b34:	08007af9 	.word	0x08007af9
 8007b38:	08007af9 	.word	0x08007af9
 8007b3c:	08007c7d 	.word	0x08007c7d
 8007b40:	08007ba7 	.word	0x08007ba7
 8007b44:	08007c37 	.word	0x08007c37
 8007b48:	08007af9 	.word	0x08007af9
 8007b4c:	08007af9 	.word	0x08007af9
 8007b50:	08007c9f 	.word	0x08007c9f
 8007b54:	08007af9 	.word	0x08007af9
 8007b58:	08007ba7 	.word	0x08007ba7
 8007b5c:	08007af9 	.word	0x08007af9
 8007b60:	08007af9 	.word	0x08007af9
 8007b64:	08007c3f 	.word	0x08007c3f
 8007b68:	6833      	ldr	r3, [r6, #0]
 8007b6a:	1d1a      	adds	r2, r3, #4
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6032      	str	r2, [r6, #0]
 8007b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e09d      	b.n	8007cb8 <_printf_i+0x1e8>
 8007b7c:	6833      	ldr	r3, [r6, #0]
 8007b7e:	6820      	ldr	r0, [r4, #0]
 8007b80:	1d19      	adds	r1, r3, #4
 8007b82:	6031      	str	r1, [r6, #0]
 8007b84:	0606      	lsls	r6, r0, #24
 8007b86:	d501      	bpl.n	8007b8c <_printf_i+0xbc>
 8007b88:	681d      	ldr	r5, [r3, #0]
 8007b8a:	e003      	b.n	8007b94 <_printf_i+0xc4>
 8007b8c:	0645      	lsls	r5, r0, #25
 8007b8e:	d5fb      	bpl.n	8007b88 <_printf_i+0xb8>
 8007b90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b94:	2d00      	cmp	r5, #0
 8007b96:	da03      	bge.n	8007ba0 <_printf_i+0xd0>
 8007b98:	232d      	movs	r3, #45	@ 0x2d
 8007b9a:	426d      	negs	r5, r5
 8007b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ba0:	4859      	ldr	r0, [pc, #356]	@ (8007d08 <_printf_i+0x238>)
 8007ba2:	230a      	movs	r3, #10
 8007ba4:	e011      	b.n	8007bca <_printf_i+0xfa>
 8007ba6:	6821      	ldr	r1, [r4, #0]
 8007ba8:	6833      	ldr	r3, [r6, #0]
 8007baa:	0608      	lsls	r0, r1, #24
 8007bac:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bb0:	d402      	bmi.n	8007bb8 <_printf_i+0xe8>
 8007bb2:	0649      	lsls	r1, r1, #25
 8007bb4:	bf48      	it	mi
 8007bb6:	b2ad      	uxthmi	r5, r5
 8007bb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bba:	4853      	ldr	r0, [pc, #332]	@ (8007d08 <_printf_i+0x238>)
 8007bbc:	6033      	str	r3, [r6, #0]
 8007bbe:	bf14      	ite	ne
 8007bc0:	230a      	movne	r3, #10
 8007bc2:	2308      	moveq	r3, #8
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007bca:	6866      	ldr	r6, [r4, #4]
 8007bcc:	60a6      	str	r6, [r4, #8]
 8007bce:	2e00      	cmp	r6, #0
 8007bd0:	bfa2      	ittt	ge
 8007bd2:	6821      	ldrge	r1, [r4, #0]
 8007bd4:	f021 0104 	bicge.w	r1, r1, #4
 8007bd8:	6021      	strge	r1, [r4, #0]
 8007bda:	b90d      	cbnz	r5, 8007be0 <_printf_i+0x110>
 8007bdc:	2e00      	cmp	r6, #0
 8007bde:	d04b      	beq.n	8007c78 <_printf_i+0x1a8>
 8007be0:	4616      	mov	r6, r2
 8007be2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007be6:	fb03 5711 	mls	r7, r3, r1, r5
 8007bea:	5dc7      	ldrb	r7, [r0, r7]
 8007bec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bf0:	462f      	mov	r7, r5
 8007bf2:	42bb      	cmp	r3, r7
 8007bf4:	460d      	mov	r5, r1
 8007bf6:	d9f4      	bls.n	8007be2 <_printf_i+0x112>
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d10b      	bne.n	8007c14 <_printf_i+0x144>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	07df      	lsls	r7, r3, #31
 8007c00:	d508      	bpl.n	8007c14 <_printf_i+0x144>
 8007c02:	6923      	ldr	r3, [r4, #16]
 8007c04:	6861      	ldr	r1, [r4, #4]
 8007c06:	4299      	cmp	r1, r3
 8007c08:	bfde      	ittt	le
 8007c0a:	2330      	movle	r3, #48	@ 0x30
 8007c0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c14:	1b92      	subs	r2, r2, r6
 8007c16:	6122      	str	r2, [r4, #16]
 8007c18:	f8cd a000 	str.w	sl, [sp]
 8007c1c:	464b      	mov	r3, r9
 8007c1e:	aa03      	add	r2, sp, #12
 8007c20:	4621      	mov	r1, r4
 8007c22:	4640      	mov	r0, r8
 8007c24:	f7ff fee6 	bl	80079f4 <_printf_common>
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d14a      	bne.n	8007cc2 <_printf_i+0x1f2>
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c30:	b004      	add	sp, #16
 8007c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	f043 0320 	orr.w	r3, r3, #32
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	4833      	ldr	r0, [pc, #204]	@ (8007d0c <_printf_i+0x23c>)
 8007c40:	2778      	movs	r7, #120	@ 0x78
 8007c42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	6831      	ldr	r1, [r6, #0]
 8007c4a:	061f      	lsls	r7, r3, #24
 8007c4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c50:	d402      	bmi.n	8007c58 <_printf_i+0x188>
 8007c52:	065f      	lsls	r7, r3, #25
 8007c54:	bf48      	it	mi
 8007c56:	b2ad      	uxthmi	r5, r5
 8007c58:	6031      	str	r1, [r6, #0]
 8007c5a:	07d9      	lsls	r1, r3, #31
 8007c5c:	bf44      	itt	mi
 8007c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8007c62:	6023      	strmi	r3, [r4, #0]
 8007c64:	b11d      	cbz	r5, 8007c6e <_printf_i+0x19e>
 8007c66:	2310      	movs	r3, #16
 8007c68:	e7ac      	b.n	8007bc4 <_printf_i+0xf4>
 8007c6a:	4827      	ldr	r0, [pc, #156]	@ (8007d08 <_printf_i+0x238>)
 8007c6c:	e7e9      	b.n	8007c42 <_printf_i+0x172>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	f023 0320 	bic.w	r3, r3, #32
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	e7f6      	b.n	8007c66 <_printf_i+0x196>
 8007c78:	4616      	mov	r6, r2
 8007c7a:	e7bd      	b.n	8007bf8 <_printf_i+0x128>
 8007c7c:	6833      	ldr	r3, [r6, #0]
 8007c7e:	6825      	ldr	r5, [r4, #0]
 8007c80:	6961      	ldr	r1, [r4, #20]
 8007c82:	1d18      	adds	r0, r3, #4
 8007c84:	6030      	str	r0, [r6, #0]
 8007c86:	062e      	lsls	r6, r5, #24
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	d501      	bpl.n	8007c90 <_printf_i+0x1c0>
 8007c8c:	6019      	str	r1, [r3, #0]
 8007c8e:	e002      	b.n	8007c96 <_printf_i+0x1c6>
 8007c90:	0668      	lsls	r0, r5, #25
 8007c92:	d5fb      	bpl.n	8007c8c <_printf_i+0x1bc>
 8007c94:	8019      	strh	r1, [r3, #0]
 8007c96:	2300      	movs	r3, #0
 8007c98:	6123      	str	r3, [r4, #16]
 8007c9a:	4616      	mov	r6, r2
 8007c9c:	e7bc      	b.n	8007c18 <_printf_i+0x148>
 8007c9e:	6833      	ldr	r3, [r6, #0]
 8007ca0:	1d1a      	adds	r2, r3, #4
 8007ca2:	6032      	str	r2, [r6, #0]
 8007ca4:	681e      	ldr	r6, [r3, #0]
 8007ca6:	6862      	ldr	r2, [r4, #4]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7f8 fab0 	bl	8000210 <memchr>
 8007cb0:	b108      	cbz	r0, 8007cb6 <_printf_i+0x1e6>
 8007cb2:	1b80      	subs	r0, r0, r6
 8007cb4:	6060      	str	r0, [r4, #4]
 8007cb6:	6863      	ldr	r3, [r4, #4]
 8007cb8:	6123      	str	r3, [r4, #16]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cc0:	e7aa      	b.n	8007c18 <_printf_i+0x148>
 8007cc2:	6923      	ldr	r3, [r4, #16]
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	4640      	mov	r0, r8
 8007cca:	47d0      	blx	sl
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d0ad      	beq.n	8007c2c <_printf_i+0x15c>
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	079b      	lsls	r3, r3, #30
 8007cd4:	d413      	bmi.n	8007cfe <_printf_i+0x22e>
 8007cd6:	68e0      	ldr	r0, [r4, #12]
 8007cd8:	9b03      	ldr	r3, [sp, #12]
 8007cda:	4298      	cmp	r0, r3
 8007cdc:	bfb8      	it	lt
 8007cde:	4618      	movlt	r0, r3
 8007ce0:	e7a6      	b.n	8007c30 <_printf_i+0x160>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4632      	mov	r2, r6
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	4640      	mov	r0, r8
 8007cea:	47d0      	blx	sl
 8007cec:	3001      	adds	r0, #1
 8007cee:	d09d      	beq.n	8007c2c <_printf_i+0x15c>
 8007cf0:	3501      	adds	r5, #1
 8007cf2:	68e3      	ldr	r3, [r4, #12]
 8007cf4:	9903      	ldr	r1, [sp, #12]
 8007cf6:	1a5b      	subs	r3, r3, r1
 8007cf8:	42ab      	cmp	r3, r5
 8007cfa:	dcf2      	bgt.n	8007ce2 <_printf_i+0x212>
 8007cfc:	e7eb      	b.n	8007cd6 <_printf_i+0x206>
 8007cfe:	2500      	movs	r5, #0
 8007d00:	f104 0619 	add.w	r6, r4, #25
 8007d04:	e7f5      	b.n	8007cf2 <_printf_i+0x222>
 8007d06:	bf00      	nop
 8007d08:	0800aaa2 	.word	0x0800aaa2
 8007d0c:	0800aab3 	.word	0x0800aab3

08007d10 <std>:
 8007d10:	2300      	movs	r3, #0
 8007d12:	b510      	push	{r4, lr}
 8007d14:	4604      	mov	r4, r0
 8007d16:	e9c0 3300 	strd	r3, r3, [r0]
 8007d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d1e:	6083      	str	r3, [r0, #8]
 8007d20:	8181      	strh	r1, [r0, #12]
 8007d22:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d24:	81c2      	strh	r2, [r0, #14]
 8007d26:	6183      	str	r3, [r0, #24]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	2208      	movs	r2, #8
 8007d2c:	305c      	adds	r0, #92	@ 0x5c
 8007d2e:	f000 f914 	bl	8007f5a <memset>
 8007d32:	4b0d      	ldr	r3, [pc, #52]	@ (8007d68 <std+0x58>)
 8007d34:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d36:	4b0d      	ldr	r3, [pc, #52]	@ (8007d6c <std+0x5c>)
 8007d38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d70 <std+0x60>)
 8007d3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d74 <std+0x64>)
 8007d40:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d42:	4b0d      	ldr	r3, [pc, #52]	@ (8007d78 <std+0x68>)
 8007d44:	6224      	str	r4, [r4, #32]
 8007d46:	429c      	cmp	r4, r3
 8007d48:	d006      	beq.n	8007d58 <std+0x48>
 8007d4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d4e:	4294      	cmp	r4, r2
 8007d50:	d002      	beq.n	8007d58 <std+0x48>
 8007d52:	33d0      	adds	r3, #208	@ 0xd0
 8007d54:	429c      	cmp	r4, r3
 8007d56:	d105      	bne.n	8007d64 <std+0x54>
 8007d58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d60:	f000 b98a 	b.w	8008078 <__retarget_lock_init_recursive>
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	bf00      	nop
 8007d68:	08007ed5 	.word	0x08007ed5
 8007d6c:	08007ef7 	.word	0x08007ef7
 8007d70:	08007f2f 	.word	0x08007f2f
 8007d74:	08007f53 	.word	0x08007f53
 8007d78:	20000a30 	.word	0x20000a30

08007d7c <stdio_exit_handler>:
 8007d7c:	4a02      	ldr	r2, [pc, #8]	@ (8007d88 <stdio_exit_handler+0xc>)
 8007d7e:	4903      	ldr	r1, [pc, #12]	@ (8007d8c <stdio_exit_handler+0x10>)
 8007d80:	4803      	ldr	r0, [pc, #12]	@ (8007d90 <stdio_exit_handler+0x14>)
 8007d82:	f000 b869 	b.w	8007e58 <_fwalk_sglue>
 8007d86:	bf00      	nop
 8007d88:	2000000c 	.word	0x2000000c
 8007d8c:	0800a315 	.word	0x0800a315
 8007d90:	20000188 	.word	0x20000188

08007d94 <cleanup_stdio>:
 8007d94:	6841      	ldr	r1, [r0, #4]
 8007d96:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc8 <cleanup_stdio+0x34>)
 8007d98:	4299      	cmp	r1, r3
 8007d9a:	b510      	push	{r4, lr}
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	d001      	beq.n	8007da4 <cleanup_stdio+0x10>
 8007da0:	f002 fab8 	bl	800a314 <_fflush_r>
 8007da4:	68a1      	ldr	r1, [r4, #8]
 8007da6:	4b09      	ldr	r3, [pc, #36]	@ (8007dcc <cleanup_stdio+0x38>)
 8007da8:	4299      	cmp	r1, r3
 8007daa:	d002      	beq.n	8007db2 <cleanup_stdio+0x1e>
 8007dac:	4620      	mov	r0, r4
 8007dae:	f002 fab1 	bl	800a314 <_fflush_r>
 8007db2:	68e1      	ldr	r1, [r4, #12]
 8007db4:	4b06      	ldr	r3, [pc, #24]	@ (8007dd0 <cleanup_stdio+0x3c>)
 8007db6:	4299      	cmp	r1, r3
 8007db8:	d004      	beq.n	8007dc4 <cleanup_stdio+0x30>
 8007dba:	4620      	mov	r0, r4
 8007dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc0:	f002 baa8 	b.w	800a314 <_fflush_r>
 8007dc4:	bd10      	pop	{r4, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20000a30 	.word	0x20000a30
 8007dcc:	20000a98 	.word	0x20000a98
 8007dd0:	20000b00 	.word	0x20000b00

08007dd4 <global_stdio_init.part.0>:
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007e04 <global_stdio_init.part.0+0x30>)
 8007dd8:	4c0b      	ldr	r4, [pc, #44]	@ (8007e08 <global_stdio_init.part.0+0x34>)
 8007dda:	4a0c      	ldr	r2, [pc, #48]	@ (8007e0c <global_stdio_init.part.0+0x38>)
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	4620      	mov	r0, r4
 8007de0:	2200      	movs	r2, #0
 8007de2:	2104      	movs	r1, #4
 8007de4:	f7ff ff94 	bl	8007d10 <std>
 8007de8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007dec:	2201      	movs	r2, #1
 8007dee:	2109      	movs	r1, #9
 8007df0:	f7ff ff8e 	bl	8007d10 <std>
 8007df4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007df8:	2202      	movs	r2, #2
 8007dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dfe:	2112      	movs	r1, #18
 8007e00:	f7ff bf86 	b.w	8007d10 <std>
 8007e04:	20000b68 	.word	0x20000b68
 8007e08:	20000a30 	.word	0x20000a30
 8007e0c:	08007d7d 	.word	0x08007d7d

08007e10 <__sfp_lock_acquire>:
 8007e10:	4801      	ldr	r0, [pc, #4]	@ (8007e18 <__sfp_lock_acquire+0x8>)
 8007e12:	f000 b932 	b.w	800807a <__retarget_lock_acquire_recursive>
 8007e16:	bf00      	nop
 8007e18:	20000b71 	.word	0x20000b71

08007e1c <__sfp_lock_release>:
 8007e1c:	4801      	ldr	r0, [pc, #4]	@ (8007e24 <__sfp_lock_release+0x8>)
 8007e1e:	f000 b92d 	b.w	800807c <__retarget_lock_release_recursive>
 8007e22:	bf00      	nop
 8007e24:	20000b71 	.word	0x20000b71

08007e28 <__sinit>:
 8007e28:	b510      	push	{r4, lr}
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	f7ff fff0 	bl	8007e10 <__sfp_lock_acquire>
 8007e30:	6a23      	ldr	r3, [r4, #32]
 8007e32:	b11b      	cbz	r3, 8007e3c <__sinit+0x14>
 8007e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e38:	f7ff bff0 	b.w	8007e1c <__sfp_lock_release>
 8007e3c:	4b04      	ldr	r3, [pc, #16]	@ (8007e50 <__sinit+0x28>)
 8007e3e:	6223      	str	r3, [r4, #32]
 8007e40:	4b04      	ldr	r3, [pc, #16]	@ (8007e54 <__sinit+0x2c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1f5      	bne.n	8007e34 <__sinit+0xc>
 8007e48:	f7ff ffc4 	bl	8007dd4 <global_stdio_init.part.0>
 8007e4c:	e7f2      	b.n	8007e34 <__sinit+0xc>
 8007e4e:	bf00      	nop
 8007e50:	08007d95 	.word	0x08007d95
 8007e54:	20000b68 	.word	0x20000b68

08007e58 <_fwalk_sglue>:
 8007e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	4688      	mov	r8, r1
 8007e60:	4614      	mov	r4, r2
 8007e62:	2600      	movs	r6, #0
 8007e64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e68:	f1b9 0901 	subs.w	r9, r9, #1
 8007e6c:	d505      	bpl.n	8007e7a <_fwalk_sglue+0x22>
 8007e6e:	6824      	ldr	r4, [r4, #0]
 8007e70:	2c00      	cmp	r4, #0
 8007e72:	d1f7      	bne.n	8007e64 <_fwalk_sglue+0xc>
 8007e74:	4630      	mov	r0, r6
 8007e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e7a:	89ab      	ldrh	r3, [r5, #12]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d907      	bls.n	8007e90 <_fwalk_sglue+0x38>
 8007e80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e84:	3301      	adds	r3, #1
 8007e86:	d003      	beq.n	8007e90 <_fwalk_sglue+0x38>
 8007e88:	4629      	mov	r1, r5
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	47c0      	blx	r8
 8007e8e:	4306      	orrs	r6, r0
 8007e90:	3568      	adds	r5, #104	@ 0x68
 8007e92:	e7e9      	b.n	8007e68 <_fwalk_sglue+0x10>

08007e94 <siprintf>:
 8007e94:	b40e      	push	{r1, r2, r3}
 8007e96:	b500      	push	{lr}
 8007e98:	b09c      	sub	sp, #112	@ 0x70
 8007e9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007e9c:	9002      	str	r0, [sp, #8]
 8007e9e:	9006      	str	r0, [sp, #24]
 8007ea0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ea4:	4809      	ldr	r0, [pc, #36]	@ (8007ecc <siprintf+0x38>)
 8007ea6:	9107      	str	r1, [sp, #28]
 8007ea8:	9104      	str	r1, [sp, #16]
 8007eaa:	4909      	ldr	r1, [pc, #36]	@ (8007ed0 <siprintf+0x3c>)
 8007eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb0:	9105      	str	r1, [sp, #20]
 8007eb2:	6800      	ldr	r0, [r0, #0]
 8007eb4:	9301      	str	r3, [sp, #4]
 8007eb6:	a902      	add	r1, sp, #8
 8007eb8:	f002 f8ac 	bl	800a014 <_svfiprintf_r>
 8007ebc:	9b02      	ldr	r3, [sp, #8]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	701a      	strb	r2, [r3, #0]
 8007ec2:	b01c      	add	sp, #112	@ 0x70
 8007ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ec8:	b003      	add	sp, #12
 8007eca:	4770      	bx	lr
 8007ecc:	20000184 	.word	0x20000184
 8007ed0:	ffff0208 	.word	0xffff0208

08007ed4 <__sread>:
 8007ed4:	b510      	push	{r4, lr}
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007edc:	f000 f87e 	bl	8007fdc <_read_r>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	bfab      	itete	ge
 8007ee4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ee8:	181b      	addge	r3, r3, r0
 8007eea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007eee:	bfac      	ite	ge
 8007ef0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ef2:	81a3      	strhlt	r3, [r4, #12]
 8007ef4:	bd10      	pop	{r4, pc}

08007ef6 <__swrite>:
 8007ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efa:	461f      	mov	r7, r3
 8007efc:	898b      	ldrh	r3, [r1, #12]
 8007efe:	05db      	lsls	r3, r3, #23
 8007f00:	4605      	mov	r5, r0
 8007f02:	460c      	mov	r4, r1
 8007f04:	4616      	mov	r6, r2
 8007f06:	d505      	bpl.n	8007f14 <__swrite+0x1e>
 8007f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f000 f852 	bl	8007fb8 <_lseek_r>
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	4632      	mov	r2, r6
 8007f22:	463b      	mov	r3, r7
 8007f24:	4628      	mov	r0, r5
 8007f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2a:	f000 b869 	b.w	8008000 <_write_r>

08007f2e <__sseek>:
 8007f2e:	b510      	push	{r4, lr}
 8007f30:	460c      	mov	r4, r1
 8007f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f36:	f000 f83f 	bl	8007fb8 <_lseek_r>
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	bf15      	itete	ne
 8007f40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f4a:	81a3      	strheq	r3, [r4, #12]
 8007f4c:	bf18      	it	ne
 8007f4e:	81a3      	strhne	r3, [r4, #12]
 8007f50:	bd10      	pop	{r4, pc}

08007f52 <__sclose>:
 8007f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f56:	f000 b81f 	b.w	8007f98 <_close_r>

08007f5a <memset>:
 8007f5a:	4402      	add	r2, r0
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d100      	bne.n	8007f64 <memset+0xa>
 8007f62:	4770      	bx	lr
 8007f64:	f803 1b01 	strb.w	r1, [r3], #1
 8007f68:	e7f9      	b.n	8007f5e <memset+0x4>

08007f6a <strncmp>:
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	b16a      	cbz	r2, 8007f8a <strncmp+0x20>
 8007f6e:	3901      	subs	r1, #1
 8007f70:	1884      	adds	r4, r0, r2
 8007f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d103      	bne.n	8007f86 <strncmp+0x1c>
 8007f7e:	42a0      	cmp	r0, r4
 8007f80:	d001      	beq.n	8007f86 <strncmp+0x1c>
 8007f82:	2a00      	cmp	r2, #0
 8007f84:	d1f5      	bne.n	8007f72 <strncmp+0x8>
 8007f86:	1ad0      	subs	r0, r2, r3
 8007f88:	bd10      	pop	{r4, pc}
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	e7fc      	b.n	8007f88 <strncmp+0x1e>
	...

08007f90 <_localeconv_r>:
 8007f90:	4800      	ldr	r0, [pc, #0]	@ (8007f94 <_localeconv_r+0x4>)
 8007f92:	4770      	bx	lr
 8007f94:	20000108 	.word	0x20000108

08007f98 <_close_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4d06      	ldr	r5, [pc, #24]	@ (8007fb4 <_close_r+0x1c>)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	602b      	str	r3, [r5, #0]
 8007fa4:	f7f9 ff10 	bl	8001dc8 <_close>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d102      	bne.n	8007fb2 <_close_r+0x1a>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	b103      	cbz	r3, 8007fb2 <_close_r+0x1a>
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	20000b6c 	.word	0x20000b6c

08007fb8 <_lseek_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4d07      	ldr	r5, [pc, #28]	@ (8007fd8 <_lseek_r+0x20>)
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	4608      	mov	r0, r1
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	602a      	str	r2, [r5, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f7f9 ff25 	bl	8001e16 <_lseek>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_lseek_r+0x1e>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_lseek_r+0x1e>
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	20000b6c 	.word	0x20000b6c

08007fdc <_read_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4d07      	ldr	r5, [pc, #28]	@ (8007ffc <_read_r+0x20>)
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	4608      	mov	r0, r1
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	602a      	str	r2, [r5, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	f7f9 feb3 	bl	8001d56 <_read>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d102      	bne.n	8007ffa <_read_r+0x1e>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	b103      	cbz	r3, 8007ffa <_read_r+0x1e>
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	20000b6c 	.word	0x20000b6c

08008000 <_write_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4d07      	ldr	r5, [pc, #28]	@ (8008020 <_write_r+0x20>)
 8008004:	4604      	mov	r4, r0
 8008006:	4608      	mov	r0, r1
 8008008:	4611      	mov	r1, r2
 800800a:	2200      	movs	r2, #0
 800800c:	602a      	str	r2, [r5, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	f7f9 febe 	bl	8001d90 <_write>
 8008014:	1c43      	adds	r3, r0, #1
 8008016:	d102      	bne.n	800801e <_write_r+0x1e>
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	b103      	cbz	r3, 800801e <_write_r+0x1e>
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	bd38      	pop	{r3, r4, r5, pc}
 8008020:	20000b6c 	.word	0x20000b6c

08008024 <__errno>:
 8008024:	4b01      	ldr	r3, [pc, #4]	@ (800802c <__errno+0x8>)
 8008026:	6818      	ldr	r0, [r3, #0]
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	20000184 	.word	0x20000184

08008030 <__libc_init_array>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	4d0d      	ldr	r5, [pc, #52]	@ (8008068 <__libc_init_array+0x38>)
 8008034:	4c0d      	ldr	r4, [pc, #52]	@ (800806c <__libc_init_array+0x3c>)
 8008036:	1b64      	subs	r4, r4, r5
 8008038:	10a4      	asrs	r4, r4, #2
 800803a:	2600      	movs	r6, #0
 800803c:	42a6      	cmp	r6, r4
 800803e:	d109      	bne.n	8008054 <__libc_init_array+0x24>
 8008040:	4d0b      	ldr	r5, [pc, #44]	@ (8008070 <__libc_init_array+0x40>)
 8008042:	4c0c      	ldr	r4, [pc, #48]	@ (8008074 <__libc_init_array+0x44>)
 8008044:	f002 fcd6 	bl	800a9f4 <_init>
 8008048:	1b64      	subs	r4, r4, r5
 800804a:	10a4      	asrs	r4, r4, #2
 800804c:	2600      	movs	r6, #0
 800804e:	42a6      	cmp	r6, r4
 8008050:	d105      	bne.n	800805e <__libc_init_array+0x2e>
 8008052:	bd70      	pop	{r4, r5, r6, pc}
 8008054:	f855 3b04 	ldr.w	r3, [r5], #4
 8008058:	4798      	blx	r3
 800805a:	3601      	adds	r6, #1
 800805c:	e7ee      	b.n	800803c <__libc_init_array+0xc>
 800805e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008062:	4798      	blx	r3
 8008064:	3601      	adds	r6, #1
 8008066:	e7f2      	b.n	800804e <__libc_init_array+0x1e>
 8008068:	0800ae68 	.word	0x0800ae68
 800806c:	0800ae68 	.word	0x0800ae68
 8008070:	0800ae68 	.word	0x0800ae68
 8008074:	0800ae6c 	.word	0x0800ae6c

08008078 <__retarget_lock_init_recursive>:
 8008078:	4770      	bx	lr

0800807a <__retarget_lock_acquire_recursive>:
 800807a:	4770      	bx	lr

0800807c <__retarget_lock_release_recursive>:
 800807c:	4770      	bx	lr

0800807e <memcpy>:
 800807e:	440a      	add	r2, r1
 8008080:	4291      	cmp	r1, r2
 8008082:	f100 33ff 	add.w	r3, r0, #4294967295
 8008086:	d100      	bne.n	800808a <memcpy+0xc>
 8008088:	4770      	bx	lr
 800808a:	b510      	push	{r4, lr}
 800808c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008094:	4291      	cmp	r1, r2
 8008096:	d1f9      	bne.n	800808c <memcpy+0xe>
 8008098:	bd10      	pop	{r4, pc}
 800809a:	0000      	movs	r0, r0
 800809c:	0000      	movs	r0, r0
	...

080080a0 <nan>:
 80080a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80080a8 <nan+0x8>
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	00000000 	.word	0x00000000
 80080ac:	7ff80000 	.word	0x7ff80000

080080b0 <quorem>:
 80080b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	6903      	ldr	r3, [r0, #16]
 80080b6:	690c      	ldr	r4, [r1, #16]
 80080b8:	42a3      	cmp	r3, r4
 80080ba:	4607      	mov	r7, r0
 80080bc:	db7e      	blt.n	80081bc <quorem+0x10c>
 80080be:	3c01      	subs	r4, #1
 80080c0:	f101 0814 	add.w	r8, r1, #20
 80080c4:	00a3      	lsls	r3, r4, #2
 80080c6:	f100 0514 	add.w	r5, r0, #20
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080da:	3301      	adds	r3, #1
 80080dc:	429a      	cmp	r2, r3
 80080de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80080e6:	d32e      	bcc.n	8008146 <quorem+0x96>
 80080e8:	f04f 0a00 	mov.w	sl, #0
 80080ec:	46c4      	mov	ip, r8
 80080ee:	46ae      	mov	lr, r5
 80080f0:	46d3      	mov	fp, sl
 80080f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80080f6:	b298      	uxth	r0, r3
 80080f8:	fb06 a000 	mla	r0, r6, r0, sl
 80080fc:	0c02      	lsrs	r2, r0, #16
 80080fe:	0c1b      	lsrs	r3, r3, #16
 8008100:	fb06 2303 	mla	r3, r6, r3, r2
 8008104:	f8de 2000 	ldr.w	r2, [lr]
 8008108:	b280      	uxth	r0, r0
 800810a:	b292      	uxth	r2, r2
 800810c:	1a12      	subs	r2, r2, r0
 800810e:	445a      	add	r2, fp
 8008110:	f8de 0000 	ldr.w	r0, [lr]
 8008114:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008118:	b29b      	uxth	r3, r3
 800811a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800811e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008122:	b292      	uxth	r2, r2
 8008124:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008128:	45e1      	cmp	r9, ip
 800812a:	f84e 2b04 	str.w	r2, [lr], #4
 800812e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008132:	d2de      	bcs.n	80080f2 <quorem+0x42>
 8008134:	9b00      	ldr	r3, [sp, #0]
 8008136:	58eb      	ldr	r3, [r5, r3]
 8008138:	b92b      	cbnz	r3, 8008146 <quorem+0x96>
 800813a:	9b01      	ldr	r3, [sp, #4]
 800813c:	3b04      	subs	r3, #4
 800813e:	429d      	cmp	r5, r3
 8008140:	461a      	mov	r2, r3
 8008142:	d32f      	bcc.n	80081a4 <quorem+0xf4>
 8008144:	613c      	str	r4, [r7, #16]
 8008146:	4638      	mov	r0, r7
 8008148:	f001 fd0e 	bl	8009b68 <__mcmp>
 800814c:	2800      	cmp	r0, #0
 800814e:	db25      	blt.n	800819c <quorem+0xec>
 8008150:	4629      	mov	r1, r5
 8008152:	2000      	movs	r0, #0
 8008154:	f858 2b04 	ldr.w	r2, [r8], #4
 8008158:	f8d1 c000 	ldr.w	ip, [r1]
 800815c:	fa1f fe82 	uxth.w	lr, r2
 8008160:	fa1f f38c 	uxth.w	r3, ip
 8008164:	eba3 030e 	sub.w	r3, r3, lr
 8008168:	4403      	add	r3, r0
 800816a:	0c12      	lsrs	r2, r2, #16
 800816c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008170:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008174:	b29b      	uxth	r3, r3
 8008176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800817a:	45c1      	cmp	r9, r8
 800817c:	f841 3b04 	str.w	r3, [r1], #4
 8008180:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008184:	d2e6      	bcs.n	8008154 <quorem+0xa4>
 8008186:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800818a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800818e:	b922      	cbnz	r2, 800819a <quorem+0xea>
 8008190:	3b04      	subs	r3, #4
 8008192:	429d      	cmp	r5, r3
 8008194:	461a      	mov	r2, r3
 8008196:	d30b      	bcc.n	80081b0 <quorem+0x100>
 8008198:	613c      	str	r4, [r7, #16]
 800819a:	3601      	adds	r6, #1
 800819c:	4630      	mov	r0, r6
 800819e:	b003      	add	sp, #12
 80081a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a4:	6812      	ldr	r2, [r2, #0]
 80081a6:	3b04      	subs	r3, #4
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	d1cb      	bne.n	8008144 <quorem+0x94>
 80081ac:	3c01      	subs	r4, #1
 80081ae:	e7c6      	b.n	800813e <quorem+0x8e>
 80081b0:	6812      	ldr	r2, [r2, #0]
 80081b2:	3b04      	subs	r3, #4
 80081b4:	2a00      	cmp	r2, #0
 80081b6:	d1ef      	bne.n	8008198 <quorem+0xe8>
 80081b8:	3c01      	subs	r4, #1
 80081ba:	e7ea      	b.n	8008192 <quorem+0xe2>
 80081bc:	2000      	movs	r0, #0
 80081be:	e7ee      	b.n	800819e <quorem+0xee>

080081c0 <_dtoa_r>:
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	69c7      	ldr	r7, [r0, #28]
 80081c6:	b099      	sub	sp, #100	@ 0x64
 80081c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80081cc:	ec55 4b10 	vmov	r4, r5, d0
 80081d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80081d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80081d4:	4683      	mov	fp, r0
 80081d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80081d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081da:	b97f      	cbnz	r7, 80081fc <_dtoa_r+0x3c>
 80081dc:	2010      	movs	r0, #16
 80081de:	f001 f937 	bl	8009450 <malloc>
 80081e2:	4602      	mov	r2, r0
 80081e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80081e8:	b920      	cbnz	r0, 80081f4 <_dtoa_r+0x34>
 80081ea:	4ba7      	ldr	r3, [pc, #668]	@ (8008488 <_dtoa_r+0x2c8>)
 80081ec:	21ef      	movs	r1, #239	@ 0xef
 80081ee:	48a7      	ldr	r0, [pc, #668]	@ (800848c <_dtoa_r+0x2cc>)
 80081f0:	f002 f8e2 	bl	800a3b8 <__assert_func>
 80081f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80081f8:	6007      	str	r7, [r0, #0]
 80081fa:	60c7      	str	r7, [r0, #12]
 80081fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008200:	6819      	ldr	r1, [r3, #0]
 8008202:	b159      	cbz	r1, 800821c <_dtoa_r+0x5c>
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	604a      	str	r2, [r1, #4]
 8008208:	2301      	movs	r3, #1
 800820a:	4093      	lsls	r3, r2
 800820c:	608b      	str	r3, [r1, #8]
 800820e:	4658      	mov	r0, fp
 8008210:	f001 fa26 	bl	8009660 <_Bfree>
 8008214:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	1e2b      	subs	r3, r5, #0
 800821e:	bfb9      	ittee	lt
 8008220:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008224:	9303      	strlt	r3, [sp, #12]
 8008226:	2300      	movge	r3, #0
 8008228:	6033      	strge	r3, [r6, #0]
 800822a:	9f03      	ldr	r7, [sp, #12]
 800822c:	4b98      	ldr	r3, [pc, #608]	@ (8008490 <_dtoa_r+0x2d0>)
 800822e:	bfbc      	itt	lt
 8008230:	2201      	movlt	r2, #1
 8008232:	6032      	strlt	r2, [r6, #0]
 8008234:	43bb      	bics	r3, r7
 8008236:	d112      	bne.n	800825e <_dtoa_r+0x9e>
 8008238:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800823a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008244:	4323      	orrs	r3, r4
 8008246:	f000 854d 	beq.w	8008ce4 <_dtoa_r+0xb24>
 800824a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800824c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80084a4 <_dtoa_r+0x2e4>
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 854f 	beq.w	8008cf4 <_dtoa_r+0xb34>
 8008256:	f10a 0303 	add.w	r3, sl, #3
 800825a:	f000 bd49 	b.w	8008cf0 <_dtoa_r+0xb30>
 800825e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008262:	2200      	movs	r2, #0
 8008264:	ec51 0b17 	vmov	r0, r1, d7
 8008268:	2300      	movs	r3, #0
 800826a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800826e:	f7f8 fc4b 	bl	8000b08 <__aeabi_dcmpeq>
 8008272:	4680      	mov	r8, r0
 8008274:	b158      	cbz	r0, 800828e <_dtoa_r+0xce>
 8008276:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008278:	2301      	movs	r3, #1
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800827e:	b113      	cbz	r3, 8008286 <_dtoa_r+0xc6>
 8008280:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008282:	4b84      	ldr	r3, [pc, #528]	@ (8008494 <_dtoa_r+0x2d4>)
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80084a8 <_dtoa_r+0x2e8>
 800828a:	f000 bd33 	b.w	8008cf4 <_dtoa_r+0xb34>
 800828e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008292:	aa16      	add	r2, sp, #88	@ 0x58
 8008294:	a917      	add	r1, sp, #92	@ 0x5c
 8008296:	4658      	mov	r0, fp
 8008298:	f001 fd86 	bl	8009da8 <__d2b>
 800829c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80082a0:	4681      	mov	r9, r0
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	d077      	beq.n	8008396 <_dtoa_r+0x1d6>
 80082a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80082ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80082b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80082bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80082c0:	4619      	mov	r1, r3
 80082c2:	2200      	movs	r2, #0
 80082c4:	4b74      	ldr	r3, [pc, #464]	@ (8008498 <_dtoa_r+0x2d8>)
 80082c6:	f7f7 ffff 	bl	80002c8 <__aeabi_dsub>
 80082ca:	a369      	add	r3, pc, #420	@ (adr r3, 8008470 <_dtoa_r+0x2b0>)
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f7f8 f9b2 	bl	8000638 <__aeabi_dmul>
 80082d4:	a368      	add	r3, pc, #416	@ (adr r3, 8008478 <_dtoa_r+0x2b8>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	f7f7 fff7 	bl	80002cc <__adddf3>
 80082de:	4604      	mov	r4, r0
 80082e0:	4630      	mov	r0, r6
 80082e2:	460d      	mov	r5, r1
 80082e4:	f7f8 f93e 	bl	8000564 <__aeabi_i2d>
 80082e8:	a365      	add	r3, pc, #404	@ (adr r3, 8008480 <_dtoa_r+0x2c0>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f7f8 f9a3 	bl	8000638 <__aeabi_dmul>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4620      	mov	r0, r4
 80082f8:	4629      	mov	r1, r5
 80082fa:	f7f7 ffe7 	bl	80002cc <__adddf3>
 80082fe:	4604      	mov	r4, r0
 8008300:	460d      	mov	r5, r1
 8008302:	f7f8 fc49 	bl	8000b98 <__aeabi_d2iz>
 8008306:	2200      	movs	r2, #0
 8008308:	4607      	mov	r7, r0
 800830a:	2300      	movs	r3, #0
 800830c:	4620      	mov	r0, r4
 800830e:	4629      	mov	r1, r5
 8008310:	f7f8 fc04 	bl	8000b1c <__aeabi_dcmplt>
 8008314:	b140      	cbz	r0, 8008328 <_dtoa_r+0x168>
 8008316:	4638      	mov	r0, r7
 8008318:	f7f8 f924 	bl	8000564 <__aeabi_i2d>
 800831c:	4622      	mov	r2, r4
 800831e:	462b      	mov	r3, r5
 8008320:	f7f8 fbf2 	bl	8000b08 <__aeabi_dcmpeq>
 8008324:	b900      	cbnz	r0, 8008328 <_dtoa_r+0x168>
 8008326:	3f01      	subs	r7, #1
 8008328:	2f16      	cmp	r7, #22
 800832a:	d851      	bhi.n	80083d0 <_dtoa_r+0x210>
 800832c:	4b5b      	ldr	r3, [pc, #364]	@ (800849c <_dtoa_r+0x2dc>)
 800832e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800833a:	f7f8 fbef 	bl	8000b1c <__aeabi_dcmplt>
 800833e:	2800      	cmp	r0, #0
 8008340:	d048      	beq.n	80083d4 <_dtoa_r+0x214>
 8008342:	3f01      	subs	r7, #1
 8008344:	2300      	movs	r3, #0
 8008346:	9312      	str	r3, [sp, #72]	@ 0x48
 8008348:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800834a:	1b9b      	subs	r3, r3, r6
 800834c:	1e5a      	subs	r2, r3, #1
 800834e:	bf44      	itt	mi
 8008350:	f1c3 0801 	rsbmi	r8, r3, #1
 8008354:	2300      	movmi	r3, #0
 8008356:	9208      	str	r2, [sp, #32]
 8008358:	bf54      	ite	pl
 800835a:	f04f 0800 	movpl.w	r8, #0
 800835e:	9308      	strmi	r3, [sp, #32]
 8008360:	2f00      	cmp	r7, #0
 8008362:	db39      	blt.n	80083d8 <_dtoa_r+0x218>
 8008364:	9b08      	ldr	r3, [sp, #32]
 8008366:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008368:	443b      	add	r3, r7
 800836a:	9308      	str	r3, [sp, #32]
 800836c:	2300      	movs	r3, #0
 800836e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008372:	2b09      	cmp	r3, #9
 8008374:	d864      	bhi.n	8008440 <_dtoa_r+0x280>
 8008376:	2b05      	cmp	r3, #5
 8008378:	bfc4      	itt	gt
 800837a:	3b04      	subgt	r3, #4
 800837c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800837e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008380:	f1a3 0302 	sub.w	r3, r3, #2
 8008384:	bfcc      	ite	gt
 8008386:	2400      	movgt	r4, #0
 8008388:	2401      	movle	r4, #1
 800838a:	2b03      	cmp	r3, #3
 800838c:	d863      	bhi.n	8008456 <_dtoa_r+0x296>
 800838e:	e8df f003 	tbb	[pc, r3]
 8008392:	372a      	.short	0x372a
 8008394:	5535      	.short	0x5535
 8008396:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800839a:	441e      	add	r6, r3
 800839c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80083a0:	2b20      	cmp	r3, #32
 80083a2:	bfc1      	itttt	gt
 80083a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80083a8:	409f      	lslgt	r7, r3
 80083aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80083ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80083b2:	bfd6      	itet	le
 80083b4:	f1c3 0320 	rsble	r3, r3, #32
 80083b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80083bc:	fa04 f003 	lslle.w	r0, r4, r3
 80083c0:	f7f8 f8c0 	bl	8000544 <__aeabi_ui2d>
 80083c4:	2201      	movs	r2, #1
 80083c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80083ca:	3e01      	subs	r6, #1
 80083cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80083ce:	e777      	b.n	80082c0 <_dtoa_r+0x100>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e7b8      	b.n	8008346 <_dtoa_r+0x186>
 80083d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80083d6:	e7b7      	b.n	8008348 <_dtoa_r+0x188>
 80083d8:	427b      	negs	r3, r7
 80083da:	930a      	str	r3, [sp, #40]	@ 0x28
 80083dc:	2300      	movs	r3, #0
 80083de:	eba8 0807 	sub.w	r8, r8, r7
 80083e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083e4:	e7c4      	b.n	8008370 <_dtoa_r+0x1b0>
 80083e6:	2300      	movs	r3, #0
 80083e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	dc35      	bgt.n	800845c <_dtoa_r+0x29c>
 80083f0:	2301      	movs	r3, #1
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	9307      	str	r3, [sp, #28]
 80083f6:	461a      	mov	r2, r3
 80083f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80083fa:	e00b      	b.n	8008414 <_dtoa_r+0x254>
 80083fc:	2301      	movs	r3, #1
 80083fe:	e7f3      	b.n	80083e8 <_dtoa_r+0x228>
 8008400:	2300      	movs	r3, #0
 8008402:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008404:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008406:	18fb      	adds	r3, r7, r3
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	3301      	adds	r3, #1
 800840c:	2b01      	cmp	r3, #1
 800840e:	9307      	str	r3, [sp, #28]
 8008410:	bfb8      	it	lt
 8008412:	2301      	movlt	r3, #1
 8008414:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008418:	2100      	movs	r1, #0
 800841a:	2204      	movs	r2, #4
 800841c:	f102 0514 	add.w	r5, r2, #20
 8008420:	429d      	cmp	r5, r3
 8008422:	d91f      	bls.n	8008464 <_dtoa_r+0x2a4>
 8008424:	6041      	str	r1, [r0, #4]
 8008426:	4658      	mov	r0, fp
 8008428:	f001 f8da 	bl	80095e0 <_Balloc>
 800842c:	4682      	mov	sl, r0
 800842e:	2800      	cmp	r0, #0
 8008430:	d13c      	bne.n	80084ac <_dtoa_r+0x2ec>
 8008432:	4b1b      	ldr	r3, [pc, #108]	@ (80084a0 <_dtoa_r+0x2e0>)
 8008434:	4602      	mov	r2, r0
 8008436:	f240 11af 	movw	r1, #431	@ 0x1af
 800843a:	e6d8      	b.n	80081ee <_dtoa_r+0x2e>
 800843c:	2301      	movs	r3, #1
 800843e:	e7e0      	b.n	8008402 <_dtoa_r+0x242>
 8008440:	2401      	movs	r4, #1
 8008442:	2300      	movs	r3, #0
 8008444:	9309      	str	r3, [sp, #36]	@ 0x24
 8008446:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008448:	f04f 33ff 	mov.w	r3, #4294967295
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	9307      	str	r3, [sp, #28]
 8008450:	2200      	movs	r2, #0
 8008452:	2312      	movs	r3, #18
 8008454:	e7d0      	b.n	80083f8 <_dtoa_r+0x238>
 8008456:	2301      	movs	r3, #1
 8008458:	930b      	str	r3, [sp, #44]	@ 0x2c
 800845a:	e7f5      	b.n	8008448 <_dtoa_r+0x288>
 800845c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	9307      	str	r3, [sp, #28]
 8008462:	e7d7      	b.n	8008414 <_dtoa_r+0x254>
 8008464:	3101      	adds	r1, #1
 8008466:	0052      	lsls	r2, r2, #1
 8008468:	e7d8      	b.n	800841c <_dtoa_r+0x25c>
 800846a:	bf00      	nop
 800846c:	f3af 8000 	nop.w
 8008470:	636f4361 	.word	0x636f4361
 8008474:	3fd287a7 	.word	0x3fd287a7
 8008478:	8b60c8b3 	.word	0x8b60c8b3
 800847c:	3fc68a28 	.word	0x3fc68a28
 8008480:	509f79fb 	.word	0x509f79fb
 8008484:	3fd34413 	.word	0x3fd34413
 8008488:	0800aad9 	.word	0x0800aad9
 800848c:	0800aaf0 	.word	0x0800aaf0
 8008490:	7ff00000 	.word	0x7ff00000
 8008494:	0800aaa1 	.word	0x0800aaa1
 8008498:	3ff80000 	.word	0x3ff80000
 800849c:	0800ac48 	.word	0x0800ac48
 80084a0:	0800ab48 	.word	0x0800ab48
 80084a4:	0800aad5 	.word	0x0800aad5
 80084a8:	0800aaa0 	.word	0x0800aaa0
 80084ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80084b0:	6018      	str	r0, [r3, #0]
 80084b2:	9b07      	ldr	r3, [sp, #28]
 80084b4:	2b0e      	cmp	r3, #14
 80084b6:	f200 80a4 	bhi.w	8008602 <_dtoa_r+0x442>
 80084ba:	2c00      	cmp	r4, #0
 80084bc:	f000 80a1 	beq.w	8008602 <_dtoa_r+0x442>
 80084c0:	2f00      	cmp	r7, #0
 80084c2:	dd33      	ble.n	800852c <_dtoa_r+0x36c>
 80084c4:	4bad      	ldr	r3, [pc, #692]	@ (800877c <_dtoa_r+0x5bc>)
 80084c6:	f007 020f 	and.w	r2, r7, #15
 80084ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ce:	ed93 7b00 	vldr	d7, [r3]
 80084d2:	05f8      	lsls	r0, r7, #23
 80084d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80084d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80084dc:	d516      	bpl.n	800850c <_dtoa_r+0x34c>
 80084de:	4ba8      	ldr	r3, [pc, #672]	@ (8008780 <_dtoa_r+0x5c0>)
 80084e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084e8:	f7f8 f9d0 	bl	800088c <__aeabi_ddiv>
 80084ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084f0:	f004 040f 	and.w	r4, r4, #15
 80084f4:	2603      	movs	r6, #3
 80084f6:	4da2      	ldr	r5, [pc, #648]	@ (8008780 <_dtoa_r+0x5c0>)
 80084f8:	b954      	cbnz	r4, 8008510 <_dtoa_r+0x350>
 80084fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008502:	f7f8 f9c3 	bl	800088c <__aeabi_ddiv>
 8008506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800850a:	e028      	b.n	800855e <_dtoa_r+0x39e>
 800850c:	2602      	movs	r6, #2
 800850e:	e7f2      	b.n	80084f6 <_dtoa_r+0x336>
 8008510:	07e1      	lsls	r1, r4, #31
 8008512:	d508      	bpl.n	8008526 <_dtoa_r+0x366>
 8008514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008518:	e9d5 2300 	ldrd	r2, r3, [r5]
 800851c:	f7f8 f88c 	bl	8000638 <__aeabi_dmul>
 8008520:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008524:	3601      	adds	r6, #1
 8008526:	1064      	asrs	r4, r4, #1
 8008528:	3508      	adds	r5, #8
 800852a:	e7e5      	b.n	80084f8 <_dtoa_r+0x338>
 800852c:	f000 80d2 	beq.w	80086d4 <_dtoa_r+0x514>
 8008530:	427c      	negs	r4, r7
 8008532:	4b92      	ldr	r3, [pc, #584]	@ (800877c <_dtoa_r+0x5bc>)
 8008534:	4d92      	ldr	r5, [pc, #584]	@ (8008780 <_dtoa_r+0x5c0>)
 8008536:	f004 020f 	and.w	r2, r4, #15
 800853a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008546:	f7f8 f877 	bl	8000638 <__aeabi_dmul>
 800854a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800854e:	1124      	asrs	r4, r4, #4
 8008550:	2300      	movs	r3, #0
 8008552:	2602      	movs	r6, #2
 8008554:	2c00      	cmp	r4, #0
 8008556:	f040 80b2 	bne.w	80086be <_dtoa_r+0x4fe>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1d3      	bne.n	8008506 <_dtoa_r+0x346>
 800855e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008560:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 80b7 	beq.w	80086d8 <_dtoa_r+0x518>
 800856a:	4b86      	ldr	r3, [pc, #536]	@ (8008784 <_dtoa_r+0x5c4>)
 800856c:	2200      	movs	r2, #0
 800856e:	4620      	mov	r0, r4
 8008570:	4629      	mov	r1, r5
 8008572:	f7f8 fad3 	bl	8000b1c <__aeabi_dcmplt>
 8008576:	2800      	cmp	r0, #0
 8008578:	f000 80ae 	beq.w	80086d8 <_dtoa_r+0x518>
 800857c:	9b07      	ldr	r3, [sp, #28]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 80aa 	beq.w	80086d8 <_dtoa_r+0x518>
 8008584:	9b00      	ldr	r3, [sp, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	dd37      	ble.n	80085fa <_dtoa_r+0x43a>
 800858a:	1e7b      	subs	r3, r7, #1
 800858c:	9304      	str	r3, [sp, #16]
 800858e:	4620      	mov	r0, r4
 8008590:	4b7d      	ldr	r3, [pc, #500]	@ (8008788 <_dtoa_r+0x5c8>)
 8008592:	2200      	movs	r2, #0
 8008594:	4629      	mov	r1, r5
 8008596:	f7f8 f84f 	bl	8000638 <__aeabi_dmul>
 800859a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800859e:	9c00      	ldr	r4, [sp, #0]
 80085a0:	3601      	adds	r6, #1
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7f7 ffde 	bl	8000564 <__aeabi_i2d>
 80085a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085ac:	f7f8 f844 	bl	8000638 <__aeabi_dmul>
 80085b0:	4b76      	ldr	r3, [pc, #472]	@ (800878c <_dtoa_r+0x5cc>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	f7f7 fe8a 	bl	80002cc <__adddf3>
 80085b8:	4605      	mov	r5, r0
 80085ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80085be:	2c00      	cmp	r4, #0
 80085c0:	f040 808d 	bne.w	80086de <_dtoa_r+0x51e>
 80085c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c8:	4b71      	ldr	r3, [pc, #452]	@ (8008790 <_dtoa_r+0x5d0>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	f7f7 fe7c 	bl	80002c8 <__aeabi_dsub>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085d8:	462a      	mov	r2, r5
 80085da:	4633      	mov	r3, r6
 80085dc:	f7f8 fabc 	bl	8000b58 <__aeabi_dcmpgt>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	f040 828b 	bne.w	8008afc <_dtoa_r+0x93c>
 80085e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ea:	462a      	mov	r2, r5
 80085ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80085f0:	f7f8 fa94 	bl	8000b1c <__aeabi_dcmplt>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	f040 8128 	bne.w	800884a <_dtoa_r+0x68a>
 80085fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80085fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008602:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008604:	2b00      	cmp	r3, #0
 8008606:	f2c0 815a 	blt.w	80088be <_dtoa_r+0x6fe>
 800860a:	2f0e      	cmp	r7, #14
 800860c:	f300 8157 	bgt.w	80088be <_dtoa_r+0x6fe>
 8008610:	4b5a      	ldr	r3, [pc, #360]	@ (800877c <_dtoa_r+0x5bc>)
 8008612:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008616:	ed93 7b00 	vldr	d7, [r3]
 800861a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800861c:	2b00      	cmp	r3, #0
 800861e:	ed8d 7b00 	vstr	d7, [sp]
 8008622:	da03      	bge.n	800862c <_dtoa_r+0x46c>
 8008624:	9b07      	ldr	r3, [sp, #28]
 8008626:	2b00      	cmp	r3, #0
 8008628:	f340 8101 	ble.w	800882e <_dtoa_r+0x66e>
 800862c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008630:	4656      	mov	r6, sl
 8008632:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008636:	4620      	mov	r0, r4
 8008638:	4629      	mov	r1, r5
 800863a:	f7f8 f927 	bl	800088c <__aeabi_ddiv>
 800863e:	f7f8 faab 	bl	8000b98 <__aeabi_d2iz>
 8008642:	4680      	mov	r8, r0
 8008644:	f7f7 ff8e 	bl	8000564 <__aeabi_i2d>
 8008648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800864c:	f7f7 fff4 	bl	8000638 <__aeabi_dmul>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4620      	mov	r0, r4
 8008656:	4629      	mov	r1, r5
 8008658:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800865c:	f7f7 fe34 	bl	80002c8 <__aeabi_dsub>
 8008660:	f806 4b01 	strb.w	r4, [r6], #1
 8008664:	9d07      	ldr	r5, [sp, #28]
 8008666:	eba6 040a 	sub.w	r4, r6, sl
 800866a:	42a5      	cmp	r5, r4
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	f040 8117 	bne.w	80088a2 <_dtoa_r+0x6e2>
 8008674:	f7f7 fe2a 	bl	80002cc <__adddf3>
 8008678:	e9dd 2300 	ldrd	r2, r3, [sp]
 800867c:	4604      	mov	r4, r0
 800867e:	460d      	mov	r5, r1
 8008680:	f7f8 fa6a 	bl	8000b58 <__aeabi_dcmpgt>
 8008684:	2800      	cmp	r0, #0
 8008686:	f040 80f9 	bne.w	800887c <_dtoa_r+0x6bc>
 800868a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800868e:	4620      	mov	r0, r4
 8008690:	4629      	mov	r1, r5
 8008692:	f7f8 fa39 	bl	8000b08 <__aeabi_dcmpeq>
 8008696:	b118      	cbz	r0, 80086a0 <_dtoa_r+0x4e0>
 8008698:	f018 0f01 	tst.w	r8, #1
 800869c:	f040 80ee 	bne.w	800887c <_dtoa_r+0x6bc>
 80086a0:	4649      	mov	r1, r9
 80086a2:	4658      	mov	r0, fp
 80086a4:	f000 ffdc 	bl	8009660 <_Bfree>
 80086a8:	2300      	movs	r3, #0
 80086aa:	7033      	strb	r3, [r6, #0]
 80086ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80086ae:	3701      	adds	r7, #1
 80086b0:	601f      	str	r7, [r3, #0]
 80086b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 831d 	beq.w	8008cf4 <_dtoa_r+0xb34>
 80086ba:	601e      	str	r6, [r3, #0]
 80086bc:	e31a      	b.n	8008cf4 <_dtoa_r+0xb34>
 80086be:	07e2      	lsls	r2, r4, #31
 80086c0:	d505      	bpl.n	80086ce <_dtoa_r+0x50e>
 80086c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086c6:	f7f7 ffb7 	bl	8000638 <__aeabi_dmul>
 80086ca:	3601      	adds	r6, #1
 80086cc:	2301      	movs	r3, #1
 80086ce:	1064      	asrs	r4, r4, #1
 80086d0:	3508      	adds	r5, #8
 80086d2:	e73f      	b.n	8008554 <_dtoa_r+0x394>
 80086d4:	2602      	movs	r6, #2
 80086d6:	e742      	b.n	800855e <_dtoa_r+0x39e>
 80086d8:	9c07      	ldr	r4, [sp, #28]
 80086da:	9704      	str	r7, [sp, #16]
 80086dc:	e761      	b.n	80085a2 <_dtoa_r+0x3e2>
 80086de:	4b27      	ldr	r3, [pc, #156]	@ (800877c <_dtoa_r+0x5bc>)
 80086e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086ea:	4454      	add	r4, sl
 80086ec:	2900      	cmp	r1, #0
 80086ee:	d053      	beq.n	8008798 <_dtoa_r+0x5d8>
 80086f0:	4928      	ldr	r1, [pc, #160]	@ (8008794 <_dtoa_r+0x5d4>)
 80086f2:	2000      	movs	r0, #0
 80086f4:	f7f8 f8ca 	bl	800088c <__aeabi_ddiv>
 80086f8:	4633      	mov	r3, r6
 80086fa:	462a      	mov	r2, r5
 80086fc:	f7f7 fde4 	bl	80002c8 <__aeabi_dsub>
 8008700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008704:	4656      	mov	r6, sl
 8008706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800870a:	f7f8 fa45 	bl	8000b98 <__aeabi_d2iz>
 800870e:	4605      	mov	r5, r0
 8008710:	f7f7 ff28 	bl	8000564 <__aeabi_i2d>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800871c:	f7f7 fdd4 	bl	80002c8 <__aeabi_dsub>
 8008720:	3530      	adds	r5, #48	@ 0x30
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800872a:	f806 5b01 	strb.w	r5, [r6], #1
 800872e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008732:	f7f8 f9f3 	bl	8000b1c <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	d171      	bne.n	800881e <_dtoa_r+0x65e>
 800873a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800873e:	4911      	ldr	r1, [pc, #68]	@ (8008784 <_dtoa_r+0x5c4>)
 8008740:	2000      	movs	r0, #0
 8008742:	f7f7 fdc1 	bl	80002c8 <__aeabi_dsub>
 8008746:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800874a:	f7f8 f9e7 	bl	8000b1c <__aeabi_dcmplt>
 800874e:	2800      	cmp	r0, #0
 8008750:	f040 8095 	bne.w	800887e <_dtoa_r+0x6be>
 8008754:	42a6      	cmp	r6, r4
 8008756:	f43f af50 	beq.w	80085fa <_dtoa_r+0x43a>
 800875a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800875e:	4b0a      	ldr	r3, [pc, #40]	@ (8008788 <_dtoa_r+0x5c8>)
 8008760:	2200      	movs	r2, #0
 8008762:	f7f7 ff69 	bl	8000638 <__aeabi_dmul>
 8008766:	4b08      	ldr	r3, [pc, #32]	@ (8008788 <_dtoa_r+0x5c8>)
 8008768:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800876c:	2200      	movs	r2, #0
 800876e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008772:	f7f7 ff61 	bl	8000638 <__aeabi_dmul>
 8008776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800877a:	e7c4      	b.n	8008706 <_dtoa_r+0x546>
 800877c:	0800ac48 	.word	0x0800ac48
 8008780:	0800ac20 	.word	0x0800ac20
 8008784:	3ff00000 	.word	0x3ff00000
 8008788:	40240000 	.word	0x40240000
 800878c:	401c0000 	.word	0x401c0000
 8008790:	40140000 	.word	0x40140000
 8008794:	3fe00000 	.word	0x3fe00000
 8008798:	4631      	mov	r1, r6
 800879a:	4628      	mov	r0, r5
 800879c:	f7f7 ff4c 	bl	8000638 <__aeabi_dmul>
 80087a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087a4:	9415      	str	r4, [sp, #84]	@ 0x54
 80087a6:	4656      	mov	r6, sl
 80087a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ac:	f7f8 f9f4 	bl	8000b98 <__aeabi_d2iz>
 80087b0:	4605      	mov	r5, r0
 80087b2:	f7f7 fed7 	bl	8000564 <__aeabi_i2d>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087be:	f7f7 fd83 	bl	80002c8 <__aeabi_dsub>
 80087c2:	3530      	adds	r5, #48	@ 0x30
 80087c4:	f806 5b01 	strb.w	r5, [r6], #1
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	42a6      	cmp	r6, r4
 80087ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087d2:	f04f 0200 	mov.w	r2, #0
 80087d6:	d124      	bne.n	8008822 <_dtoa_r+0x662>
 80087d8:	4bac      	ldr	r3, [pc, #688]	@ (8008a8c <_dtoa_r+0x8cc>)
 80087da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087de:	f7f7 fd75 	bl	80002cc <__adddf3>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ea:	f7f8 f9b5 	bl	8000b58 <__aeabi_dcmpgt>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d145      	bne.n	800887e <_dtoa_r+0x6be>
 80087f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087f6:	49a5      	ldr	r1, [pc, #660]	@ (8008a8c <_dtoa_r+0x8cc>)
 80087f8:	2000      	movs	r0, #0
 80087fa:	f7f7 fd65 	bl	80002c8 <__aeabi_dsub>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008806:	f7f8 f989 	bl	8000b1c <__aeabi_dcmplt>
 800880a:	2800      	cmp	r0, #0
 800880c:	f43f aef5 	beq.w	80085fa <_dtoa_r+0x43a>
 8008810:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008812:	1e73      	subs	r3, r6, #1
 8008814:	9315      	str	r3, [sp, #84]	@ 0x54
 8008816:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800881a:	2b30      	cmp	r3, #48	@ 0x30
 800881c:	d0f8      	beq.n	8008810 <_dtoa_r+0x650>
 800881e:	9f04      	ldr	r7, [sp, #16]
 8008820:	e73e      	b.n	80086a0 <_dtoa_r+0x4e0>
 8008822:	4b9b      	ldr	r3, [pc, #620]	@ (8008a90 <_dtoa_r+0x8d0>)
 8008824:	f7f7 ff08 	bl	8000638 <__aeabi_dmul>
 8008828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800882c:	e7bc      	b.n	80087a8 <_dtoa_r+0x5e8>
 800882e:	d10c      	bne.n	800884a <_dtoa_r+0x68a>
 8008830:	4b98      	ldr	r3, [pc, #608]	@ (8008a94 <_dtoa_r+0x8d4>)
 8008832:	2200      	movs	r2, #0
 8008834:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008838:	f7f7 fefe 	bl	8000638 <__aeabi_dmul>
 800883c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008840:	f7f8 f980 	bl	8000b44 <__aeabi_dcmpge>
 8008844:	2800      	cmp	r0, #0
 8008846:	f000 8157 	beq.w	8008af8 <_dtoa_r+0x938>
 800884a:	2400      	movs	r4, #0
 800884c:	4625      	mov	r5, r4
 800884e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008850:	43db      	mvns	r3, r3
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	4656      	mov	r6, sl
 8008856:	2700      	movs	r7, #0
 8008858:	4621      	mov	r1, r4
 800885a:	4658      	mov	r0, fp
 800885c:	f000 ff00 	bl	8009660 <_Bfree>
 8008860:	2d00      	cmp	r5, #0
 8008862:	d0dc      	beq.n	800881e <_dtoa_r+0x65e>
 8008864:	b12f      	cbz	r7, 8008872 <_dtoa_r+0x6b2>
 8008866:	42af      	cmp	r7, r5
 8008868:	d003      	beq.n	8008872 <_dtoa_r+0x6b2>
 800886a:	4639      	mov	r1, r7
 800886c:	4658      	mov	r0, fp
 800886e:	f000 fef7 	bl	8009660 <_Bfree>
 8008872:	4629      	mov	r1, r5
 8008874:	4658      	mov	r0, fp
 8008876:	f000 fef3 	bl	8009660 <_Bfree>
 800887a:	e7d0      	b.n	800881e <_dtoa_r+0x65e>
 800887c:	9704      	str	r7, [sp, #16]
 800887e:	4633      	mov	r3, r6
 8008880:	461e      	mov	r6, r3
 8008882:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008886:	2a39      	cmp	r2, #57	@ 0x39
 8008888:	d107      	bne.n	800889a <_dtoa_r+0x6da>
 800888a:	459a      	cmp	sl, r3
 800888c:	d1f8      	bne.n	8008880 <_dtoa_r+0x6c0>
 800888e:	9a04      	ldr	r2, [sp, #16]
 8008890:	3201      	adds	r2, #1
 8008892:	9204      	str	r2, [sp, #16]
 8008894:	2230      	movs	r2, #48	@ 0x30
 8008896:	f88a 2000 	strb.w	r2, [sl]
 800889a:	781a      	ldrb	r2, [r3, #0]
 800889c:	3201      	adds	r2, #1
 800889e:	701a      	strb	r2, [r3, #0]
 80088a0:	e7bd      	b.n	800881e <_dtoa_r+0x65e>
 80088a2:	4b7b      	ldr	r3, [pc, #492]	@ (8008a90 <_dtoa_r+0x8d0>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	f7f7 fec7 	bl	8000638 <__aeabi_dmul>
 80088aa:	2200      	movs	r2, #0
 80088ac:	2300      	movs	r3, #0
 80088ae:	4604      	mov	r4, r0
 80088b0:	460d      	mov	r5, r1
 80088b2:	f7f8 f929 	bl	8000b08 <__aeabi_dcmpeq>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f43f aebb 	beq.w	8008632 <_dtoa_r+0x472>
 80088bc:	e6f0      	b.n	80086a0 <_dtoa_r+0x4e0>
 80088be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80088c0:	2a00      	cmp	r2, #0
 80088c2:	f000 80db 	beq.w	8008a7c <_dtoa_r+0x8bc>
 80088c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088c8:	2a01      	cmp	r2, #1
 80088ca:	f300 80bf 	bgt.w	8008a4c <_dtoa_r+0x88c>
 80088ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80088d0:	2a00      	cmp	r2, #0
 80088d2:	f000 80b7 	beq.w	8008a44 <_dtoa_r+0x884>
 80088d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80088da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80088dc:	4646      	mov	r6, r8
 80088de:	9a08      	ldr	r2, [sp, #32]
 80088e0:	2101      	movs	r1, #1
 80088e2:	441a      	add	r2, r3
 80088e4:	4658      	mov	r0, fp
 80088e6:	4498      	add	r8, r3
 80088e8:	9208      	str	r2, [sp, #32]
 80088ea:	f000 ffb7 	bl	800985c <__i2b>
 80088ee:	4605      	mov	r5, r0
 80088f0:	b15e      	cbz	r6, 800890a <_dtoa_r+0x74a>
 80088f2:	9b08      	ldr	r3, [sp, #32]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	dd08      	ble.n	800890a <_dtoa_r+0x74a>
 80088f8:	42b3      	cmp	r3, r6
 80088fa:	9a08      	ldr	r2, [sp, #32]
 80088fc:	bfa8      	it	ge
 80088fe:	4633      	movge	r3, r6
 8008900:	eba8 0803 	sub.w	r8, r8, r3
 8008904:	1af6      	subs	r6, r6, r3
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	9308      	str	r3, [sp, #32]
 800890a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800890c:	b1f3      	cbz	r3, 800894c <_dtoa_r+0x78c>
 800890e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 80b7 	beq.w	8008a84 <_dtoa_r+0x8c4>
 8008916:	b18c      	cbz	r4, 800893c <_dtoa_r+0x77c>
 8008918:	4629      	mov	r1, r5
 800891a:	4622      	mov	r2, r4
 800891c:	4658      	mov	r0, fp
 800891e:	f001 f85d 	bl	80099dc <__pow5mult>
 8008922:	464a      	mov	r2, r9
 8008924:	4601      	mov	r1, r0
 8008926:	4605      	mov	r5, r0
 8008928:	4658      	mov	r0, fp
 800892a:	f000 ffad 	bl	8009888 <__multiply>
 800892e:	4649      	mov	r1, r9
 8008930:	9004      	str	r0, [sp, #16]
 8008932:	4658      	mov	r0, fp
 8008934:	f000 fe94 	bl	8009660 <_Bfree>
 8008938:	9b04      	ldr	r3, [sp, #16]
 800893a:	4699      	mov	r9, r3
 800893c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800893e:	1b1a      	subs	r2, r3, r4
 8008940:	d004      	beq.n	800894c <_dtoa_r+0x78c>
 8008942:	4649      	mov	r1, r9
 8008944:	4658      	mov	r0, fp
 8008946:	f001 f849 	bl	80099dc <__pow5mult>
 800894a:	4681      	mov	r9, r0
 800894c:	2101      	movs	r1, #1
 800894e:	4658      	mov	r0, fp
 8008950:	f000 ff84 	bl	800985c <__i2b>
 8008954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008956:	4604      	mov	r4, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 81cf 	beq.w	8008cfc <_dtoa_r+0xb3c>
 800895e:	461a      	mov	r2, r3
 8008960:	4601      	mov	r1, r0
 8008962:	4658      	mov	r0, fp
 8008964:	f001 f83a 	bl	80099dc <__pow5mult>
 8008968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800896a:	2b01      	cmp	r3, #1
 800896c:	4604      	mov	r4, r0
 800896e:	f300 8095 	bgt.w	8008a9c <_dtoa_r+0x8dc>
 8008972:	9b02      	ldr	r3, [sp, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	f040 8087 	bne.w	8008a88 <_dtoa_r+0x8c8>
 800897a:	9b03      	ldr	r3, [sp, #12]
 800897c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008980:	2b00      	cmp	r3, #0
 8008982:	f040 8089 	bne.w	8008a98 <_dtoa_r+0x8d8>
 8008986:	9b03      	ldr	r3, [sp, #12]
 8008988:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800898c:	0d1b      	lsrs	r3, r3, #20
 800898e:	051b      	lsls	r3, r3, #20
 8008990:	b12b      	cbz	r3, 800899e <_dtoa_r+0x7de>
 8008992:	9b08      	ldr	r3, [sp, #32]
 8008994:	3301      	adds	r3, #1
 8008996:	9308      	str	r3, [sp, #32]
 8008998:	f108 0801 	add.w	r8, r8, #1
 800899c:	2301      	movs	r3, #1
 800899e:	930a      	str	r3, [sp, #40]	@ 0x28
 80089a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 81b0 	beq.w	8008d08 <_dtoa_r+0xb48>
 80089a8:	6923      	ldr	r3, [r4, #16]
 80089aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089ae:	6918      	ldr	r0, [r3, #16]
 80089b0:	f000 ff08 	bl	80097c4 <__hi0bits>
 80089b4:	f1c0 0020 	rsb	r0, r0, #32
 80089b8:	9b08      	ldr	r3, [sp, #32]
 80089ba:	4418      	add	r0, r3
 80089bc:	f010 001f 	ands.w	r0, r0, #31
 80089c0:	d077      	beq.n	8008ab2 <_dtoa_r+0x8f2>
 80089c2:	f1c0 0320 	rsb	r3, r0, #32
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	dd6b      	ble.n	8008aa2 <_dtoa_r+0x8e2>
 80089ca:	9b08      	ldr	r3, [sp, #32]
 80089cc:	f1c0 001c 	rsb	r0, r0, #28
 80089d0:	4403      	add	r3, r0
 80089d2:	4480      	add	r8, r0
 80089d4:	4406      	add	r6, r0
 80089d6:	9308      	str	r3, [sp, #32]
 80089d8:	f1b8 0f00 	cmp.w	r8, #0
 80089dc:	dd05      	ble.n	80089ea <_dtoa_r+0x82a>
 80089de:	4649      	mov	r1, r9
 80089e0:	4642      	mov	r2, r8
 80089e2:	4658      	mov	r0, fp
 80089e4:	f001 f854 	bl	8009a90 <__lshift>
 80089e8:	4681      	mov	r9, r0
 80089ea:	9b08      	ldr	r3, [sp, #32]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dd05      	ble.n	80089fc <_dtoa_r+0x83c>
 80089f0:	4621      	mov	r1, r4
 80089f2:	461a      	mov	r2, r3
 80089f4:	4658      	mov	r0, fp
 80089f6:	f001 f84b 	bl	8009a90 <__lshift>
 80089fa:	4604      	mov	r4, r0
 80089fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d059      	beq.n	8008ab6 <_dtoa_r+0x8f6>
 8008a02:	4621      	mov	r1, r4
 8008a04:	4648      	mov	r0, r9
 8008a06:	f001 f8af 	bl	8009b68 <__mcmp>
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	da53      	bge.n	8008ab6 <_dtoa_r+0x8f6>
 8008a0e:	1e7b      	subs	r3, r7, #1
 8008a10:	9304      	str	r3, [sp, #16]
 8008a12:	4649      	mov	r1, r9
 8008a14:	2300      	movs	r3, #0
 8008a16:	220a      	movs	r2, #10
 8008a18:	4658      	mov	r0, fp
 8008a1a:	f000 fe43 	bl	80096a4 <__multadd>
 8008a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a20:	4681      	mov	r9, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 8172 	beq.w	8008d0c <_dtoa_r+0xb4c>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	220a      	movs	r2, #10
 8008a2e:	4658      	mov	r0, fp
 8008a30:	f000 fe38 	bl	80096a4 <__multadd>
 8008a34:	9b00      	ldr	r3, [sp, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	4605      	mov	r5, r0
 8008a3a:	dc67      	bgt.n	8008b0c <_dtoa_r+0x94c>
 8008a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	dc41      	bgt.n	8008ac6 <_dtoa_r+0x906>
 8008a42:	e063      	b.n	8008b0c <_dtoa_r+0x94c>
 8008a44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a4a:	e746      	b.n	80088da <_dtoa_r+0x71a>
 8008a4c:	9b07      	ldr	r3, [sp, #28]
 8008a4e:	1e5c      	subs	r4, r3, #1
 8008a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	bfbf      	itttt	lt
 8008a56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008a58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008a5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008a5c:	1ae3      	sublt	r3, r4, r3
 8008a5e:	bfb4      	ite	lt
 8008a60:	18d2      	addlt	r2, r2, r3
 8008a62:	1b1c      	subge	r4, r3, r4
 8008a64:	9b07      	ldr	r3, [sp, #28]
 8008a66:	bfbc      	itt	lt
 8008a68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008a6a:	2400      	movlt	r4, #0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	bfb5      	itete	lt
 8008a70:	eba8 0603 	sublt.w	r6, r8, r3
 8008a74:	9b07      	ldrge	r3, [sp, #28]
 8008a76:	2300      	movlt	r3, #0
 8008a78:	4646      	movge	r6, r8
 8008a7a:	e730      	b.n	80088de <_dtoa_r+0x71e>
 8008a7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008a80:	4646      	mov	r6, r8
 8008a82:	e735      	b.n	80088f0 <_dtoa_r+0x730>
 8008a84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a86:	e75c      	b.n	8008942 <_dtoa_r+0x782>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e788      	b.n	800899e <_dtoa_r+0x7de>
 8008a8c:	3fe00000 	.word	0x3fe00000
 8008a90:	40240000 	.word	0x40240000
 8008a94:	40140000 	.word	0x40140000
 8008a98:	9b02      	ldr	r3, [sp, #8]
 8008a9a:	e780      	b.n	800899e <_dtoa_r+0x7de>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aa0:	e782      	b.n	80089a8 <_dtoa_r+0x7e8>
 8008aa2:	d099      	beq.n	80089d8 <_dtoa_r+0x818>
 8008aa4:	9a08      	ldr	r2, [sp, #32]
 8008aa6:	331c      	adds	r3, #28
 8008aa8:	441a      	add	r2, r3
 8008aaa:	4498      	add	r8, r3
 8008aac:	441e      	add	r6, r3
 8008aae:	9208      	str	r2, [sp, #32]
 8008ab0:	e792      	b.n	80089d8 <_dtoa_r+0x818>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	e7f6      	b.n	8008aa4 <_dtoa_r+0x8e4>
 8008ab6:	9b07      	ldr	r3, [sp, #28]
 8008ab8:	9704      	str	r7, [sp, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	dc20      	bgt.n	8008b00 <_dtoa_r+0x940>
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	dd1e      	ble.n	8008b04 <_dtoa_r+0x944>
 8008ac6:	9b00      	ldr	r3, [sp, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f47f aec0 	bne.w	800884e <_dtoa_r+0x68e>
 8008ace:	4621      	mov	r1, r4
 8008ad0:	2205      	movs	r2, #5
 8008ad2:	4658      	mov	r0, fp
 8008ad4:	f000 fde6 	bl	80096a4 <__multadd>
 8008ad8:	4601      	mov	r1, r0
 8008ada:	4604      	mov	r4, r0
 8008adc:	4648      	mov	r0, r9
 8008ade:	f001 f843 	bl	8009b68 <__mcmp>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	f77f aeb3 	ble.w	800884e <_dtoa_r+0x68e>
 8008ae8:	4656      	mov	r6, sl
 8008aea:	2331      	movs	r3, #49	@ 0x31
 8008aec:	f806 3b01 	strb.w	r3, [r6], #1
 8008af0:	9b04      	ldr	r3, [sp, #16]
 8008af2:	3301      	adds	r3, #1
 8008af4:	9304      	str	r3, [sp, #16]
 8008af6:	e6ae      	b.n	8008856 <_dtoa_r+0x696>
 8008af8:	9c07      	ldr	r4, [sp, #28]
 8008afa:	9704      	str	r7, [sp, #16]
 8008afc:	4625      	mov	r5, r4
 8008afe:	e7f3      	b.n	8008ae8 <_dtoa_r+0x928>
 8008b00:	9b07      	ldr	r3, [sp, #28]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 8104 	beq.w	8008d14 <_dtoa_r+0xb54>
 8008b0c:	2e00      	cmp	r6, #0
 8008b0e:	dd05      	ble.n	8008b1c <_dtoa_r+0x95c>
 8008b10:	4629      	mov	r1, r5
 8008b12:	4632      	mov	r2, r6
 8008b14:	4658      	mov	r0, fp
 8008b16:	f000 ffbb 	bl	8009a90 <__lshift>
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d05a      	beq.n	8008bd8 <_dtoa_r+0xa18>
 8008b22:	6869      	ldr	r1, [r5, #4]
 8008b24:	4658      	mov	r0, fp
 8008b26:	f000 fd5b 	bl	80095e0 <_Balloc>
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	b928      	cbnz	r0, 8008b3a <_dtoa_r+0x97a>
 8008b2e:	4b84      	ldr	r3, [pc, #528]	@ (8008d40 <_dtoa_r+0xb80>)
 8008b30:	4602      	mov	r2, r0
 8008b32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b36:	f7ff bb5a 	b.w	80081ee <_dtoa_r+0x2e>
 8008b3a:	692a      	ldr	r2, [r5, #16]
 8008b3c:	3202      	adds	r2, #2
 8008b3e:	0092      	lsls	r2, r2, #2
 8008b40:	f105 010c 	add.w	r1, r5, #12
 8008b44:	300c      	adds	r0, #12
 8008b46:	f7ff fa9a 	bl	800807e <memcpy>
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4658      	mov	r0, fp
 8008b50:	f000 ff9e 	bl	8009a90 <__lshift>
 8008b54:	f10a 0301 	add.w	r3, sl, #1
 8008b58:	9307      	str	r3, [sp, #28]
 8008b5a:	9b00      	ldr	r3, [sp, #0]
 8008b5c:	4453      	add	r3, sl
 8008b5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	462f      	mov	r7, r5
 8008b68:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	9b07      	ldr	r3, [sp, #28]
 8008b6e:	4621      	mov	r1, r4
 8008b70:	3b01      	subs	r3, #1
 8008b72:	4648      	mov	r0, r9
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	f7ff fa9b 	bl	80080b0 <quorem>
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	9002      	str	r0, [sp, #8]
 8008b7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b82:	4648      	mov	r0, r9
 8008b84:	f000 fff0 	bl	8009b68 <__mcmp>
 8008b88:	462a      	mov	r2, r5
 8008b8a:	9008      	str	r0, [sp, #32]
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	4658      	mov	r0, fp
 8008b90:	f001 f806 	bl	8009ba0 <__mdiff>
 8008b94:	68c2      	ldr	r2, [r0, #12]
 8008b96:	4606      	mov	r6, r0
 8008b98:	bb02      	cbnz	r2, 8008bdc <_dtoa_r+0xa1c>
 8008b9a:	4601      	mov	r1, r0
 8008b9c:	4648      	mov	r0, r9
 8008b9e:	f000 ffe3 	bl	8009b68 <__mcmp>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4658      	mov	r0, fp
 8008ba8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008baa:	f000 fd59 	bl	8009660 <_Bfree>
 8008bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bb2:	9e07      	ldr	r6, [sp, #28]
 8008bb4:	ea43 0102 	orr.w	r1, r3, r2
 8008bb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bba:	4319      	orrs	r1, r3
 8008bbc:	d110      	bne.n	8008be0 <_dtoa_r+0xa20>
 8008bbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008bc2:	d029      	beq.n	8008c18 <_dtoa_r+0xa58>
 8008bc4:	9b08      	ldr	r3, [sp, #32]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	dd02      	ble.n	8008bd0 <_dtoa_r+0xa10>
 8008bca:	9b02      	ldr	r3, [sp, #8]
 8008bcc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008bd0:	9b00      	ldr	r3, [sp, #0]
 8008bd2:	f883 8000 	strb.w	r8, [r3]
 8008bd6:	e63f      	b.n	8008858 <_dtoa_r+0x698>
 8008bd8:	4628      	mov	r0, r5
 8008bda:	e7bb      	b.n	8008b54 <_dtoa_r+0x994>
 8008bdc:	2201      	movs	r2, #1
 8008bde:	e7e1      	b.n	8008ba4 <_dtoa_r+0x9e4>
 8008be0:	9b08      	ldr	r3, [sp, #32]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	db04      	blt.n	8008bf0 <_dtoa_r+0xa30>
 8008be6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008be8:	430b      	orrs	r3, r1
 8008bea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bec:	430b      	orrs	r3, r1
 8008bee:	d120      	bne.n	8008c32 <_dtoa_r+0xa72>
 8008bf0:	2a00      	cmp	r2, #0
 8008bf2:	dded      	ble.n	8008bd0 <_dtoa_r+0xa10>
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	4658      	mov	r0, fp
 8008bfa:	f000 ff49 	bl	8009a90 <__lshift>
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4681      	mov	r9, r0
 8008c02:	f000 ffb1 	bl	8009b68 <__mcmp>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	dc03      	bgt.n	8008c12 <_dtoa_r+0xa52>
 8008c0a:	d1e1      	bne.n	8008bd0 <_dtoa_r+0xa10>
 8008c0c:	f018 0f01 	tst.w	r8, #1
 8008c10:	d0de      	beq.n	8008bd0 <_dtoa_r+0xa10>
 8008c12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c16:	d1d8      	bne.n	8008bca <_dtoa_r+0xa0a>
 8008c18:	9a00      	ldr	r2, [sp, #0]
 8008c1a:	2339      	movs	r3, #57	@ 0x39
 8008c1c:	7013      	strb	r3, [r2, #0]
 8008c1e:	4633      	mov	r3, r6
 8008c20:	461e      	mov	r6, r3
 8008c22:	3b01      	subs	r3, #1
 8008c24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c28:	2a39      	cmp	r2, #57	@ 0x39
 8008c2a:	d052      	beq.n	8008cd2 <_dtoa_r+0xb12>
 8008c2c:	3201      	adds	r2, #1
 8008c2e:	701a      	strb	r2, [r3, #0]
 8008c30:	e612      	b.n	8008858 <_dtoa_r+0x698>
 8008c32:	2a00      	cmp	r2, #0
 8008c34:	dd07      	ble.n	8008c46 <_dtoa_r+0xa86>
 8008c36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c3a:	d0ed      	beq.n	8008c18 <_dtoa_r+0xa58>
 8008c3c:	9a00      	ldr	r2, [sp, #0]
 8008c3e:	f108 0301 	add.w	r3, r8, #1
 8008c42:	7013      	strb	r3, [r2, #0]
 8008c44:	e608      	b.n	8008858 <_dtoa_r+0x698>
 8008c46:	9b07      	ldr	r3, [sp, #28]
 8008c48:	9a07      	ldr	r2, [sp, #28]
 8008c4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d028      	beq.n	8008ca6 <_dtoa_r+0xae6>
 8008c54:	4649      	mov	r1, r9
 8008c56:	2300      	movs	r3, #0
 8008c58:	220a      	movs	r2, #10
 8008c5a:	4658      	mov	r0, fp
 8008c5c:	f000 fd22 	bl	80096a4 <__multadd>
 8008c60:	42af      	cmp	r7, r5
 8008c62:	4681      	mov	r9, r0
 8008c64:	f04f 0300 	mov.w	r3, #0
 8008c68:	f04f 020a 	mov.w	r2, #10
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	4658      	mov	r0, fp
 8008c70:	d107      	bne.n	8008c82 <_dtoa_r+0xac2>
 8008c72:	f000 fd17 	bl	80096a4 <__multadd>
 8008c76:	4607      	mov	r7, r0
 8008c78:	4605      	mov	r5, r0
 8008c7a:	9b07      	ldr	r3, [sp, #28]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	9307      	str	r3, [sp, #28]
 8008c80:	e774      	b.n	8008b6c <_dtoa_r+0x9ac>
 8008c82:	f000 fd0f 	bl	80096a4 <__multadd>
 8008c86:	4629      	mov	r1, r5
 8008c88:	4607      	mov	r7, r0
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	220a      	movs	r2, #10
 8008c8e:	4658      	mov	r0, fp
 8008c90:	f000 fd08 	bl	80096a4 <__multadd>
 8008c94:	4605      	mov	r5, r0
 8008c96:	e7f0      	b.n	8008c7a <_dtoa_r+0xaba>
 8008c98:	9b00      	ldr	r3, [sp, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bfcc      	ite	gt
 8008c9e:	461e      	movgt	r6, r3
 8008ca0:	2601      	movle	r6, #1
 8008ca2:	4456      	add	r6, sl
 8008ca4:	2700      	movs	r7, #0
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	2201      	movs	r2, #1
 8008caa:	4658      	mov	r0, fp
 8008cac:	f000 fef0 	bl	8009a90 <__lshift>
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4681      	mov	r9, r0
 8008cb4:	f000 ff58 	bl	8009b68 <__mcmp>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	dcb0      	bgt.n	8008c1e <_dtoa_r+0xa5e>
 8008cbc:	d102      	bne.n	8008cc4 <_dtoa_r+0xb04>
 8008cbe:	f018 0f01 	tst.w	r8, #1
 8008cc2:	d1ac      	bne.n	8008c1e <_dtoa_r+0xa5e>
 8008cc4:	4633      	mov	r3, r6
 8008cc6:	461e      	mov	r6, r3
 8008cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ccc:	2a30      	cmp	r2, #48	@ 0x30
 8008cce:	d0fa      	beq.n	8008cc6 <_dtoa_r+0xb06>
 8008cd0:	e5c2      	b.n	8008858 <_dtoa_r+0x698>
 8008cd2:	459a      	cmp	sl, r3
 8008cd4:	d1a4      	bne.n	8008c20 <_dtoa_r+0xa60>
 8008cd6:	9b04      	ldr	r3, [sp, #16]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	9304      	str	r3, [sp, #16]
 8008cdc:	2331      	movs	r3, #49	@ 0x31
 8008cde:	f88a 3000 	strb.w	r3, [sl]
 8008ce2:	e5b9      	b.n	8008858 <_dtoa_r+0x698>
 8008ce4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ce6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008d44 <_dtoa_r+0xb84>
 8008cea:	b11b      	cbz	r3, 8008cf4 <_dtoa_r+0xb34>
 8008cec:	f10a 0308 	add.w	r3, sl, #8
 8008cf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	4650      	mov	r0, sl
 8008cf6:	b019      	add	sp, #100	@ 0x64
 8008cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	f77f ae37 	ble.w	8008972 <_dtoa_r+0x7b2>
 8008d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d06:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d08:	2001      	movs	r0, #1
 8008d0a:	e655      	b.n	80089b8 <_dtoa_r+0x7f8>
 8008d0c:	9b00      	ldr	r3, [sp, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f77f aed6 	ble.w	8008ac0 <_dtoa_r+0x900>
 8008d14:	4656      	mov	r6, sl
 8008d16:	4621      	mov	r1, r4
 8008d18:	4648      	mov	r0, r9
 8008d1a:	f7ff f9c9 	bl	80080b0 <quorem>
 8008d1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d22:	f806 8b01 	strb.w	r8, [r6], #1
 8008d26:	9b00      	ldr	r3, [sp, #0]
 8008d28:	eba6 020a 	sub.w	r2, r6, sl
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	ddb3      	ble.n	8008c98 <_dtoa_r+0xad8>
 8008d30:	4649      	mov	r1, r9
 8008d32:	2300      	movs	r3, #0
 8008d34:	220a      	movs	r2, #10
 8008d36:	4658      	mov	r0, fp
 8008d38:	f000 fcb4 	bl	80096a4 <__multadd>
 8008d3c:	4681      	mov	r9, r0
 8008d3e:	e7ea      	b.n	8008d16 <_dtoa_r+0xb56>
 8008d40:	0800ab48 	.word	0x0800ab48
 8008d44:	0800aacc 	.word	0x0800aacc

08008d48 <_free_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	2900      	cmp	r1, #0
 8008d4e:	d041      	beq.n	8008dd4 <_free_r+0x8c>
 8008d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d54:	1f0c      	subs	r4, r1, #4
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	bfb8      	it	lt
 8008d5a:	18e4      	addlt	r4, r4, r3
 8008d5c:	f000 fc34 	bl	80095c8 <__malloc_lock>
 8008d60:	4a1d      	ldr	r2, [pc, #116]	@ (8008dd8 <_free_r+0x90>)
 8008d62:	6813      	ldr	r3, [r2, #0]
 8008d64:	b933      	cbnz	r3, 8008d74 <_free_r+0x2c>
 8008d66:	6063      	str	r3, [r4, #4]
 8008d68:	6014      	str	r4, [r2, #0]
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d70:	f000 bc30 	b.w	80095d4 <__malloc_unlock>
 8008d74:	42a3      	cmp	r3, r4
 8008d76:	d908      	bls.n	8008d8a <_free_r+0x42>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	1821      	adds	r1, r4, r0
 8008d7c:	428b      	cmp	r3, r1
 8008d7e:	bf01      	itttt	eq
 8008d80:	6819      	ldreq	r1, [r3, #0]
 8008d82:	685b      	ldreq	r3, [r3, #4]
 8008d84:	1809      	addeq	r1, r1, r0
 8008d86:	6021      	streq	r1, [r4, #0]
 8008d88:	e7ed      	b.n	8008d66 <_free_r+0x1e>
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	b10b      	cbz	r3, 8008d94 <_free_r+0x4c>
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	d9fa      	bls.n	8008d8a <_free_r+0x42>
 8008d94:	6811      	ldr	r1, [r2, #0]
 8008d96:	1850      	adds	r0, r2, r1
 8008d98:	42a0      	cmp	r0, r4
 8008d9a:	d10b      	bne.n	8008db4 <_free_r+0x6c>
 8008d9c:	6820      	ldr	r0, [r4, #0]
 8008d9e:	4401      	add	r1, r0
 8008da0:	1850      	adds	r0, r2, r1
 8008da2:	4283      	cmp	r3, r0
 8008da4:	6011      	str	r1, [r2, #0]
 8008da6:	d1e0      	bne.n	8008d6a <_free_r+0x22>
 8008da8:	6818      	ldr	r0, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	6053      	str	r3, [r2, #4]
 8008dae:	4408      	add	r0, r1
 8008db0:	6010      	str	r0, [r2, #0]
 8008db2:	e7da      	b.n	8008d6a <_free_r+0x22>
 8008db4:	d902      	bls.n	8008dbc <_free_r+0x74>
 8008db6:	230c      	movs	r3, #12
 8008db8:	602b      	str	r3, [r5, #0]
 8008dba:	e7d6      	b.n	8008d6a <_free_r+0x22>
 8008dbc:	6820      	ldr	r0, [r4, #0]
 8008dbe:	1821      	adds	r1, r4, r0
 8008dc0:	428b      	cmp	r3, r1
 8008dc2:	bf04      	itt	eq
 8008dc4:	6819      	ldreq	r1, [r3, #0]
 8008dc6:	685b      	ldreq	r3, [r3, #4]
 8008dc8:	6063      	str	r3, [r4, #4]
 8008dca:	bf04      	itt	eq
 8008dcc:	1809      	addeq	r1, r1, r0
 8008dce:	6021      	streq	r1, [r4, #0]
 8008dd0:	6054      	str	r4, [r2, #4]
 8008dd2:	e7ca      	b.n	8008d6a <_free_r+0x22>
 8008dd4:	bd38      	pop	{r3, r4, r5, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20000b78 	.word	0x20000b78

08008ddc <rshift>:
 8008ddc:	6903      	ldr	r3, [r0, #16]
 8008dde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008de2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008de6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008dea:	f100 0414 	add.w	r4, r0, #20
 8008dee:	dd45      	ble.n	8008e7c <rshift+0xa0>
 8008df0:	f011 011f 	ands.w	r1, r1, #31
 8008df4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008df8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008dfc:	d10c      	bne.n	8008e18 <rshift+0x3c>
 8008dfe:	f100 0710 	add.w	r7, r0, #16
 8008e02:	4629      	mov	r1, r5
 8008e04:	42b1      	cmp	r1, r6
 8008e06:	d334      	bcc.n	8008e72 <rshift+0x96>
 8008e08:	1a9b      	subs	r3, r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	1eea      	subs	r2, r5, #3
 8008e0e:	4296      	cmp	r6, r2
 8008e10:	bf38      	it	cc
 8008e12:	2300      	movcc	r3, #0
 8008e14:	4423      	add	r3, r4
 8008e16:	e015      	b.n	8008e44 <rshift+0x68>
 8008e18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e1c:	f1c1 0820 	rsb	r8, r1, #32
 8008e20:	40cf      	lsrs	r7, r1
 8008e22:	f105 0e04 	add.w	lr, r5, #4
 8008e26:	46a1      	mov	r9, r4
 8008e28:	4576      	cmp	r6, lr
 8008e2a:	46f4      	mov	ip, lr
 8008e2c:	d815      	bhi.n	8008e5a <rshift+0x7e>
 8008e2e:	1a9a      	subs	r2, r3, r2
 8008e30:	0092      	lsls	r2, r2, #2
 8008e32:	3a04      	subs	r2, #4
 8008e34:	3501      	adds	r5, #1
 8008e36:	42ae      	cmp	r6, r5
 8008e38:	bf38      	it	cc
 8008e3a:	2200      	movcc	r2, #0
 8008e3c:	18a3      	adds	r3, r4, r2
 8008e3e:	50a7      	str	r7, [r4, r2]
 8008e40:	b107      	cbz	r7, 8008e44 <rshift+0x68>
 8008e42:	3304      	adds	r3, #4
 8008e44:	1b1a      	subs	r2, r3, r4
 8008e46:	42a3      	cmp	r3, r4
 8008e48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e4c:	bf08      	it	eq
 8008e4e:	2300      	moveq	r3, #0
 8008e50:	6102      	str	r2, [r0, #16]
 8008e52:	bf08      	it	eq
 8008e54:	6143      	streq	r3, [r0, #20]
 8008e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e5a:	f8dc c000 	ldr.w	ip, [ip]
 8008e5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e62:	ea4c 0707 	orr.w	r7, ip, r7
 8008e66:	f849 7b04 	str.w	r7, [r9], #4
 8008e6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e6e:	40cf      	lsrs	r7, r1
 8008e70:	e7da      	b.n	8008e28 <rshift+0x4c>
 8008e72:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e76:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e7a:	e7c3      	b.n	8008e04 <rshift+0x28>
 8008e7c:	4623      	mov	r3, r4
 8008e7e:	e7e1      	b.n	8008e44 <rshift+0x68>

08008e80 <__hexdig_fun>:
 8008e80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e84:	2b09      	cmp	r3, #9
 8008e86:	d802      	bhi.n	8008e8e <__hexdig_fun+0xe>
 8008e88:	3820      	subs	r0, #32
 8008e8a:	b2c0      	uxtb	r0, r0
 8008e8c:	4770      	bx	lr
 8008e8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e92:	2b05      	cmp	r3, #5
 8008e94:	d801      	bhi.n	8008e9a <__hexdig_fun+0x1a>
 8008e96:	3847      	subs	r0, #71	@ 0x47
 8008e98:	e7f7      	b.n	8008e8a <__hexdig_fun+0xa>
 8008e9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e9e:	2b05      	cmp	r3, #5
 8008ea0:	d801      	bhi.n	8008ea6 <__hexdig_fun+0x26>
 8008ea2:	3827      	subs	r0, #39	@ 0x27
 8008ea4:	e7f1      	b.n	8008e8a <__hexdig_fun+0xa>
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	4770      	bx	lr
	...

08008eac <__gethex>:
 8008eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	b085      	sub	sp, #20
 8008eb2:	468a      	mov	sl, r1
 8008eb4:	9302      	str	r3, [sp, #8]
 8008eb6:	680b      	ldr	r3, [r1, #0]
 8008eb8:	9001      	str	r0, [sp, #4]
 8008eba:	4690      	mov	r8, r2
 8008ebc:	1c9c      	adds	r4, r3, #2
 8008ebe:	46a1      	mov	r9, r4
 8008ec0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008ec4:	2830      	cmp	r0, #48	@ 0x30
 8008ec6:	d0fa      	beq.n	8008ebe <__gethex+0x12>
 8008ec8:	eba9 0303 	sub.w	r3, r9, r3
 8008ecc:	f1a3 0b02 	sub.w	fp, r3, #2
 8008ed0:	f7ff ffd6 	bl	8008e80 <__hexdig_fun>
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d168      	bne.n	8008fac <__gethex+0x100>
 8008eda:	49a0      	ldr	r1, [pc, #640]	@ (800915c <__gethex+0x2b0>)
 8008edc:	2201      	movs	r2, #1
 8008ede:	4648      	mov	r0, r9
 8008ee0:	f7ff f843 	bl	8007f6a <strncmp>
 8008ee4:	4607      	mov	r7, r0
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d167      	bne.n	8008fba <__gethex+0x10e>
 8008eea:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008eee:	4626      	mov	r6, r4
 8008ef0:	f7ff ffc6 	bl	8008e80 <__hexdig_fun>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d062      	beq.n	8008fbe <__gethex+0x112>
 8008ef8:	4623      	mov	r3, r4
 8008efa:	7818      	ldrb	r0, [r3, #0]
 8008efc:	2830      	cmp	r0, #48	@ 0x30
 8008efe:	4699      	mov	r9, r3
 8008f00:	f103 0301 	add.w	r3, r3, #1
 8008f04:	d0f9      	beq.n	8008efa <__gethex+0x4e>
 8008f06:	f7ff ffbb 	bl	8008e80 <__hexdig_fun>
 8008f0a:	fab0 f580 	clz	r5, r0
 8008f0e:	096d      	lsrs	r5, r5, #5
 8008f10:	f04f 0b01 	mov.w	fp, #1
 8008f14:	464a      	mov	r2, r9
 8008f16:	4616      	mov	r6, r2
 8008f18:	3201      	adds	r2, #1
 8008f1a:	7830      	ldrb	r0, [r6, #0]
 8008f1c:	f7ff ffb0 	bl	8008e80 <__hexdig_fun>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d1f8      	bne.n	8008f16 <__gethex+0x6a>
 8008f24:	498d      	ldr	r1, [pc, #564]	@ (800915c <__gethex+0x2b0>)
 8008f26:	2201      	movs	r2, #1
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f7ff f81e 	bl	8007f6a <strncmp>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d13f      	bne.n	8008fb2 <__gethex+0x106>
 8008f32:	b944      	cbnz	r4, 8008f46 <__gethex+0x9a>
 8008f34:	1c74      	adds	r4, r6, #1
 8008f36:	4622      	mov	r2, r4
 8008f38:	4616      	mov	r6, r2
 8008f3a:	3201      	adds	r2, #1
 8008f3c:	7830      	ldrb	r0, [r6, #0]
 8008f3e:	f7ff ff9f 	bl	8008e80 <__hexdig_fun>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d1f8      	bne.n	8008f38 <__gethex+0x8c>
 8008f46:	1ba4      	subs	r4, r4, r6
 8008f48:	00a7      	lsls	r7, r4, #2
 8008f4a:	7833      	ldrb	r3, [r6, #0]
 8008f4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008f50:	2b50      	cmp	r3, #80	@ 0x50
 8008f52:	d13e      	bne.n	8008fd2 <__gethex+0x126>
 8008f54:	7873      	ldrb	r3, [r6, #1]
 8008f56:	2b2b      	cmp	r3, #43	@ 0x2b
 8008f58:	d033      	beq.n	8008fc2 <__gethex+0x116>
 8008f5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008f5c:	d034      	beq.n	8008fc8 <__gethex+0x11c>
 8008f5e:	1c71      	adds	r1, r6, #1
 8008f60:	2400      	movs	r4, #0
 8008f62:	7808      	ldrb	r0, [r1, #0]
 8008f64:	f7ff ff8c 	bl	8008e80 <__hexdig_fun>
 8008f68:	1e43      	subs	r3, r0, #1
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b18      	cmp	r3, #24
 8008f6e:	d830      	bhi.n	8008fd2 <__gethex+0x126>
 8008f70:	f1a0 0210 	sub.w	r2, r0, #16
 8008f74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f78:	f7ff ff82 	bl	8008e80 <__hexdig_fun>
 8008f7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f80:	fa5f fc8c 	uxtb.w	ip, ip
 8008f84:	f1bc 0f18 	cmp.w	ip, #24
 8008f88:	f04f 030a 	mov.w	r3, #10
 8008f8c:	d91e      	bls.n	8008fcc <__gethex+0x120>
 8008f8e:	b104      	cbz	r4, 8008f92 <__gethex+0xe6>
 8008f90:	4252      	negs	r2, r2
 8008f92:	4417      	add	r7, r2
 8008f94:	f8ca 1000 	str.w	r1, [sl]
 8008f98:	b1ed      	cbz	r5, 8008fd6 <__gethex+0x12a>
 8008f9a:	f1bb 0f00 	cmp.w	fp, #0
 8008f9e:	bf0c      	ite	eq
 8008fa0:	2506      	moveq	r5, #6
 8008fa2:	2500      	movne	r5, #0
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	b005      	add	sp, #20
 8008fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fac:	2500      	movs	r5, #0
 8008fae:	462c      	mov	r4, r5
 8008fb0:	e7b0      	b.n	8008f14 <__gethex+0x68>
 8008fb2:	2c00      	cmp	r4, #0
 8008fb4:	d1c7      	bne.n	8008f46 <__gethex+0x9a>
 8008fb6:	4627      	mov	r7, r4
 8008fb8:	e7c7      	b.n	8008f4a <__gethex+0x9e>
 8008fba:	464e      	mov	r6, r9
 8008fbc:	462f      	mov	r7, r5
 8008fbe:	2501      	movs	r5, #1
 8008fc0:	e7c3      	b.n	8008f4a <__gethex+0x9e>
 8008fc2:	2400      	movs	r4, #0
 8008fc4:	1cb1      	adds	r1, r6, #2
 8008fc6:	e7cc      	b.n	8008f62 <__gethex+0xb6>
 8008fc8:	2401      	movs	r4, #1
 8008fca:	e7fb      	b.n	8008fc4 <__gethex+0x118>
 8008fcc:	fb03 0002 	mla	r0, r3, r2, r0
 8008fd0:	e7ce      	b.n	8008f70 <__gethex+0xc4>
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	e7de      	b.n	8008f94 <__gethex+0xe8>
 8008fd6:	eba6 0309 	sub.w	r3, r6, r9
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	4629      	mov	r1, r5
 8008fde:	2b07      	cmp	r3, #7
 8008fe0:	dc0a      	bgt.n	8008ff8 <__gethex+0x14c>
 8008fe2:	9801      	ldr	r0, [sp, #4]
 8008fe4:	f000 fafc 	bl	80095e0 <_Balloc>
 8008fe8:	4604      	mov	r4, r0
 8008fea:	b940      	cbnz	r0, 8008ffe <__gethex+0x152>
 8008fec:	4b5c      	ldr	r3, [pc, #368]	@ (8009160 <__gethex+0x2b4>)
 8008fee:	4602      	mov	r2, r0
 8008ff0:	21e4      	movs	r1, #228	@ 0xe4
 8008ff2:	485c      	ldr	r0, [pc, #368]	@ (8009164 <__gethex+0x2b8>)
 8008ff4:	f001 f9e0 	bl	800a3b8 <__assert_func>
 8008ff8:	3101      	adds	r1, #1
 8008ffa:	105b      	asrs	r3, r3, #1
 8008ffc:	e7ef      	b.n	8008fde <__gethex+0x132>
 8008ffe:	f100 0a14 	add.w	sl, r0, #20
 8009002:	2300      	movs	r3, #0
 8009004:	4655      	mov	r5, sl
 8009006:	469b      	mov	fp, r3
 8009008:	45b1      	cmp	r9, r6
 800900a:	d337      	bcc.n	800907c <__gethex+0x1d0>
 800900c:	f845 bb04 	str.w	fp, [r5], #4
 8009010:	eba5 050a 	sub.w	r5, r5, sl
 8009014:	10ad      	asrs	r5, r5, #2
 8009016:	6125      	str	r5, [r4, #16]
 8009018:	4658      	mov	r0, fp
 800901a:	f000 fbd3 	bl	80097c4 <__hi0bits>
 800901e:	016d      	lsls	r5, r5, #5
 8009020:	f8d8 6000 	ldr.w	r6, [r8]
 8009024:	1a2d      	subs	r5, r5, r0
 8009026:	42b5      	cmp	r5, r6
 8009028:	dd54      	ble.n	80090d4 <__gethex+0x228>
 800902a:	1bad      	subs	r5, r5, r6
 800902c:	4629      	mov	r1, r5
 800902e:	4620      	mov	r0, r4
 8009030:	f000 ff67 	bl	8009f02 <__any_on>
 8009034:	4681      	mov	r9, r0
 8009036:	b178      	cbz	r0, 8009058 <__gethex+0x1ac>
 8009038:	1e6b      	subs	r3, r5, #1
 800903a:	1159      	asrs	r1, r3, #5
 800903c:	f003 021f 	and.w	r2, r3, #31
 8009040:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009044:	f04f 0901 	mov.w	r9, #1
 8009048:	fa09 f202 	lsl.w	r2, r9, r2
 800904c:	420a      	tst	r2, r1
 800904e:	d003      	beq.n	8009058 <__gethex+0x1ac>
 8009050:	454b      	cmp	r3, r9
 8009052:	dc36      	bgt.n	80090c2 <__gethex+0x216>
 8009054:	f04f 0902 	mov.w	r9, #2
 8009058:	4629      	mov	r1, r5
 800905a:	4620      	mov	r0, r4
 800905c:	f7ff febe 	bl	8008ddc <rshift>
 8009060:	442f      	add	r7, r5
 8009062:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009066:	42bb      	cmp	r3, r7
 8009068:	da42      	bge.n	80090f0 <__gethex+0x244>
 800906a:	9801      	ldr	r0, [sp, #4]
 800906c:	4621      	mov	r1, r4
 800906e:	f000 faf7 	bl	8009660 <_Bfree>
 8009072:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009074:	2300      	movs	r3, #0
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	25a3      	movs	r5, #163	@ 0xa3
 800907a:	e793      	b.n	8008fa4 <__gethex+0xf8>
 800907c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009080:	2a2e      	cmp	r2, #46	@ 0x2e
 8009082:	d012      	beq.n	80090aa <__gethex+0x1fe>
 8009084:	2b20      	cmp	r3, #32
 8009086:	d104      	bne.n	8009092 <__gethex+0x1e6>
 8009088:	f845 bb04 	str.w	fp, [r5], #4
 800908c:	f04f 0b00 	mov.w	fp, #0
 8009090:	465b      	mov	r3, fp
 8009092:	7830      	ldrb	r0, [r6, #0]
 8009094:	9303      	str	r3, [sp, #12]
 8009096:	f7ff fef3 	bl	8008e80 <__hexdig_fun>
 800909a:	9b03      	ldr	r3, [sp, #12]
 800909c:	f000 000f 	and.w	r0, r0, #15
 80090a0:	4098      	lsls	r0, r3
 80090a2:	ea4b 0b00 	orr.w	fp, fp, r0
 80090a6:	3304      	adds	r3, #4
 80090a8:	e7ae      	b.n	8009008 <__gethex+0x15c>
 80090aa:	45b1      	cmp	r9, r6
 80090ac:	d8ea      	bhi.n	8009084 <__gethex+0x1d8>
 80090ae:	492b      	ldr	r1, [pc, #172]	@ (800915c <__gethex+0x2b0>)
 80090b0:	9303      	str	r3, [sp, #12]
 80090b2:	2201      	movs	r2, #1
 80090b4:	4630      	mov	r0, r6
 80090b6:	f7fe ff58 	bl	8007f6a <strncmp>
 80090ba:	9b03      	ldr	r3, [sp, #12]
 80090bc:	2800      	cmp	r0, #0
 80090be:	d1e1      	bne.n	8009084 <__gethex+0x1d8>
 80090c0:	e7a2      	b.n	8009008 <__gethex+0x15c>
 80090c2:	1ea9      	subs	r1, r5, #2
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 ff1c 	bl	8009f02 <__any_on>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d0c2      	beq.n	8009054 <__gethex+0x1a8>
 80090ce:	f04f 0903 	mov.w	r9, #3
 80090d2:	e7c1      	b.n	8009058 <__gethex+0x1ac>
 80090d4:	da09      	bge.n	80090ea <__gethex+0x23e>
 80090d6:	1b75      	subs	r5, r6, r5
 80090d8:	4621      	mov	r1, r4
 80090da:	9801      	ldr	r0, [sp, #4]
 80090dc:	462a      	mov	r2, r5
 80090de:	f000 fcd7 	bl	8009a90 <__lshift>
 80090e2:	1b7f      	subs	r7, r7, r5
 80090e4:	4604      	mov	r4, r0
 80090e6:	f100 0a14 	add.w	sl, r0, #20
 80090ea:	f04f 0900 	mov.w	r9, #0
 80090ee:	e7b8      	b.n	8009062 <__gethex+0x1b6>
 80090f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090f4:	42bd      	cmp	r5, r7
 80090f6:	dd6f      	ble.n	80091d8 <__gethex+0x32c>
 80090f8:	1bed      	subs	r5, r5, r7
 80090fa:	42ae      	cmp	r6, r5
 80090fc:	dc34      	bgt.n	8009168 <__gethex+0x2bc>
 80090fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009102:	2b02      	cmp	r3, #2
 8009104:	d022      	beq.n	800914c <__gethex+0x2a0>
 8009106:	2b03      	cmp	r3, #3
 8009108:	d024      	beq.n	8009154 <__gethex+0x2a8>
 800910a:	2b01      	cmp	r3, #1
 800910c:	d115      	bne.n	800913a <__gethex+0x28e>
 800910e:	42ae      	cmp	r6, r5
 8009110:	d113      	bne.n	800913a <__gethex+0x28e>
 8009112:	2e01      	cmp	r6, #1
 8009114:	d10b      	bne.n	800912e <__gethex+0x282>
 8009116:	9a02      	ldr	r2, [sp, #8]
 8009118:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800911c:	6013      	str	r3, [r2, #0]
 800911e:	2301      	movs	r3, #1
 8009120:	6123      	str	r3, [r4, #16]
 8009122:	f8ca 3000 	str.w	r3, [sl]
 8009126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009128:	2562      	movs	r5, #98	@ 0x62
 800912a:	601c      	str	r4, [r3, #0]
 800912c:	e73a      	b.n	8008fa4 <__gethex+0xf8>
 800912e:	1e71      	subs	r1, r6, #1
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fee6 	bl	8009f02 <__any_on>
 8009136:	2800      	cmp	r0, #0
 8009138:	d1ed      	bne.n	8009116 <__gethex+0x26a>
 800913a:	9801      	ldr	r0, [sp, #4]
 800913c:	4621      	mov	r1, r4
 800913e:	f000 fa8f 	bl	8009660 <_Bfree>
 8009142:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009144:	2300      	movs	r3, #0
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	2550      	movs	r5, #80	@ 0x50
 800914a:	e72b      	b.n	8008fa4 <__gethex+0xf8>
 800914c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1f3      	bne.n	800913a <__gethex+0x28e>
 8009152:	e7e0      	b.n	8009116 <__gethex+0x26a>
 8009154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1dd      	bne.n	8009116 <__gethex+0x26a>
 800915a:	e7ee      	b.n	800913a <__gethex+0x28e>
 800915c:	0800aa3c 	.word	0x0800aa3c
 8009160:	0800ab48 	.word	0x0800ab48
 8009164:	0800ab59 	.word	0x0800ab59
 8009168:	1e6f      	subs	r7, r5, #1
 800916a:	f1b9 0f00 	cmp.w	r9, #0
 800916e:	d130      	bne.n	80091d2 <__gethex+0x326>
 8009170:	b127      	cbz	r7, 800917c <__gethex+0x2d0>
 8009172:	4639      	mov	r1, r7
 8009174:	4620      	mov	r0, r4
 8009176:	f000 fec4 	bl	8009f02 <__any_on>
 800917a:	4681      	mov	r9, r0
 800917c:	117a      	asrs	r2, r7, #5
 800917e:	2301      	movs	r3, #1
 8009180:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009184:	f007 071f 	and.w	r7, r7, #31
 8009188:	40bb      	lsls	r3, r7
 800918a:	4213      	tst	r3, r2
 800918c:	4629      	mov	r1, r5
 800918e:	4620      	mov	r0, r4
 8009190:	bf18      	it	ne
 8009192:	f049 0902 	orrne.w	r9, r9, #2
 8009196:	f7ff fe21 	bl	8008ddc <rshift>
 800919a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800919e:	1b76      	subs	r6, r6, r5
 80091a0:	2502      	movs	r5, #2
 80091a2:	f1b9 0f00 	cmp.w	r9, #0
 80091a6:	d047      	beq.n	8009238 <__gethex+0x38c>
 80091a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d015      	beq.n	80091dc <__gethex+0x330>
 80091b0:	2b03      	cmp	r3, #3
 80091b2:	d017      	beq.n	80091e4 <__gethex+0x338>
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d109      	bne.n	80091cc <__gethex+0x320>
 80091b8:	f019 0f02 	tst.w	r9, #2
 80091bc:	d006      	beq.n	80091cc <__gethex+0x320>
 80091be:	f8da 3000 	ldr.w	r3, [sl]
 80091c2:	ea49 0903 	orr.w	r9, r9, r3
 80091c6:	f019 0f01 	tst.w	r9, #1
 80091ca:	d10e      	bne.n	80091ea <__gethex+0x33e>
 80091cc:	f045 0510 	orr.w	r5, r5, #16
 80091d0:	e032      	b.n	8009238 <__gethex+0x38c>
 80091d2:	f04f 0901 	mov.w	r9, #1
 80091d6:	e7d1      	b.n	800917c <__gethex+0x2d0>
 80091d8:	2501      	movs	r5, #1
 80091da:	e7e2      	b.n	80091a2 <__gethex+0x2f6>
 80091dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091de:	f1c3 0301 	rsb	r3, r3, #1
 80091e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0f0      	beq.n	80091cc <__gethex+0x320>
 80091ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091ee:	f104 0314 	add.w	r3, r4, #20
 80091f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091fa:	f04f 0c00 	mov.w	ip, #0
 80091fe:	4618      	mov	r0, r3
 8009200:	f853 2b04 	ldr.w	r2, [r3], #4
 8009204:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009208:	d01b      	beq.n	8009242 <__gethex+0x396>
 800920a:	3201      	adds	r2, #1
 800920c:	6002      	str	r2, [r0, #0]
 800920e:	2d02      	cmp	r5, #2
 8009210:	f104 0314 	add.w	r3, r4, #20
 8009214:	d13c      	bne.n	8009290 <__gethex+0x3e4>
 8009216:	f8d8 2000 	ldr.w	r2, [r8]
 800921a:	3a01      	subs	r2, #1
 800921c:	42b2      	cmp	r2, r6
 800921e:	d109      	bne.n	8009234 <__gethex+0x388>
 8009220:	1171      	asrs	r1, r6, #5
 8009222:	2201      	movs	r2, #1
 8009224:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009228:	f006 061f 	and.w	r6, r6, #31
 800922c:	fa02 f606 	lsl.w	r6, r2, r6
 8009230:	421e      	tst	r6, r3
 8009232:	d13a      	bne.n	80092aa <__gethex+0x3fe>
 8009234:	f045 0520 	orr.w	r5, r5, #32
 8009238:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800923a:	601c      	str	r4, [r3, #0]
 800923c:	9b02      	ldr	r3, [sp, #8]
 800923e:	601f      	str	r7, [r3, #0]
 8009240:	e6b0      	b.n	8008fa4 <__gethex+0xf8>
 8009242:	4299      	cmp	r1, r3
 8009244:	f843 cc04 	str.w	ip, [r3, #-4]
 8009248:	d8d9      	bhi.n	80091fe <__gethex+0x352>
 800924a:	68a3      	ldr	r3, [r4, #8]
 800924c:	459b      	cmp	fp, r3
 800924e:	db17      	blt.n	8009280 <__gethex+0x3d4>
 8009250:	6861      	ldr	r1, [r4, #4]
 8009252:	9801      	ldr	r0, [sp, #4]
 8009254:	3101      	adds	r1, #1
 8009256:	f000 f9c3 	bl	80095e0 <_Balloc>
 800925a:	4681      	mov	r9, r0
 800925c:	b918      	cbnz	r0, 8009266 <__gethex+0x3ba>
 800925e:	4b1a      	ldr	r3, [pc, #104]	@ (80092c8 <__gethex+0x41c>)
 8009260:	4602      	mov	r2, r0
 8009262:	2184      	movs	r1, #132	@ 0x84
 8009264:	e6c5      	b.n	8008ff2 <__gethex+0x146>
 8009266:	6922      	ldr	r2, [r4, #16]
 8009268:	3202      	adds	r2, #2
 800926a:	f104 010c 	add.w	r1, r4, #12
 800926e:	0092      	lsls	r2, r2, #2
 8009270:	300c      	adds	r0, #12
 8009272:	f7fe ff04 	bl	800807e <memcpy>
 8009276:	4621      	mov	r1, r4
 8009278:	9801      	ldr	r0, [sp, #4]
 800927a:	f000 f9f1 	bl	8009660 <_Bfree>
 800927e:	464c      	mov	r4, r9
 8009280:	6923      	ldr	r3, [r4, #16]
 8009282:	1c5a      	adds	r2, r3, #1
 8009284:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009288:	6122      	str	r2, [r4, #16]
 800928a:	2201      	movs	r2, #1
 800928c:	615a      	str	r2, [r3, #20]
 800928e:	e7be      	b.n	800920e <__gethex+0x362>
 8009290:	6922      	ldr	r2, [r4, #16]
 8009292:	455a      	cmp	r2, fp
 8009294:	dd0b      	ble.n	80092ae <__gethex+0x402>
 8009296:	2101      	movs	r1, #1
 8009298:	4620      	mov	r0, r4
 800929a:	f7ff fd9f 	bl	8008ddc <rshift>
 800929e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092a2:	3701      	adds	r7, #1
 80092a4:	42bb      	cmp	r3, r7
 80092a6:	f6ff aee0 	blt.w	800906a <__gethex+0x1be>
 80092aa:	2501      	movs	r5, #1
 80092ac:	e7c2      	b.n	8009234 <__gethex+0x388>
 80092ae:	f016 061f 	ands.w	r6, r6, #31
 80092b2:	d0fa      	beq.n	80092aa <__gethex+0x3fe>
 80092b4:	4453      	add	r3, sl
 80092b6:	f1c6 0620 	rsb	r6, r6, #32
 80092ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80092be:	f000 fa81 	bl	80097c4 <__hi0bits>
 80092c2:	42b0      	cmp	r0, r6
 80092c4:	dbe7      	blt.n	8009296 <__gethex+0x3ea>
 80092c6:	e7f0      	b.n	80092aa <__gethex+0x3fe>
 80092c8:	0800ab48 	.word	0x0800ab48

080092cc <L_shift>:
 80092cc:	f1c2 0208 	rsb	r2, r2, #8
 80092d0:	0092      	lsls	r2, r2, #2
 80092d2:	b570      	push	{r4, r5, r6, lr}
 80092d4:	f1c2 0620 	rsb	r6, r2, #32
 80092d8:	6843      	ldr	r3, [r0, #4]
 80092da:	6804      	ldr	r4, [r0, #0]
 80092dc:	fa03 f506 	lsl.w	r5, r3, r6
 80092e0:	432c      	orrs	r4, r5
 80092e2:	40d3      	lsrs	r3, r2
 80092e4:	6004      	str	r4, [r0, #0]
 80092e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80092ea:	4288      	cmp	r0, r1
 80092ec:	d3f4      	bcc.n	80092d8 <L_shift+0xc>
 80092ee:	bd70      	pop	{r4, r5, r6, pc}

080092f0 <__match>:
 80092f0:	b530      	push	{r4, r5, lr}
 80092f2:	6803      	ldr	r3, [r0, #0]
 80092f4:	3301      	adds	r3, #1
 80092f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092fa:	b914      	cbnz	r4, 8009302 <__match+0x12>
 80092fc:	6003      	str	r3, [r0, #0]
 80092fe:	2001      	movs	r0, #1
 8009300:	bd30      	pop	{r4, r5, pc}
 8009302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009306:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800930a:	2d19      	cmp	r5, #25
 800930c:	bf98      	it	ls
 800930e:	3220      	addls	r2, #32
 8009310:	42a2      	cmp	r2, r4
 8009312:	d0f0      	beq.n	80092f6 <__match+0x6>
 8009314:	2000      	movs	r0, #0
 8009316:	e7f3      	b.n	8009300 <__match+0x10>

08009318 <__hexnan>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	680b      	ldr	r3, [r1, #0]
 800931e:	6801      	ldr	r1, [r0, #0]
 8009320:	115e      	asrs	r6, r3, #5
 8009322:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009326:	f013 031f 	ands.w	r3, r3, #31
 800932a:	b087      	sub	sp, #28
 800932c:	bf18      	it	ne
 800932e:	3604      	addne	r6, #4
 8009330:	2500      	movs	r5, #0
 8009332:	1f37      	subs	r7, r6, #4
 8009334:	4682      	mov	sl, r0
 8009336:	4690      	mov	r8, r2
 8009338:	9301      	str	r3, [sp, #4]
 800933a:	f846 5c04 	str.w	r5, [r6, #-4]
 800933e:	46b9      	mov	r9, r7
 8009340:	463c      	mov	r4, r7
 8009342:	9502      	str	r5, [sp, #8]
 8009344:	46ab      	mov	fp, r5
 8009346:	784a      	ldrb	r2, [r1, #1]
 8009348:	1c4b      	adds	r3, r1, #1
 800934a:	9303      	str	r3, [sp, #12]
 800934c:	b342      	cbz	r2, 80093a0 <__hexnan+0x88>
 800934e:	4610      	mov	r0, r2
 8009350:	9105      	str	r1, [sp, #20]
 8009352:	9204      	str	r2, [sp, #16]
 8009354:	f7ff fd94 	bl	8008e80 <__hexdig_fun>
 8009358:	2800      	cmp	r0, #0
 800935a:	d151      	bne.n	8009400 <__hexnan+0xe8>
 800935c:	9a04      	ldr	r2, [sp, #16]
 800935e:	9905      	ldr	r1, [sp, #20]
 8009360:	2a20      	cmp	r2, #32
 8009362:	d818      	bhi.n	8009396 <__hexnan+0x7e>
 8009364:	9b02      	ldr	r3, [sp, #8]
 8009366:	459b      	cmp	fp, r3
 8009368:	dd13      	ble.n	8009392 <__hexnan+0x7a>
 800936a:	454c      	cmp	r4, r9
 800936c:	d206      	bcs.n	800937c <__hexnan+0x64>
 800936e:	2d07      	cmp	r5, #7
 8009370:	dc04      	bgt.n	800937c <__hexnan+0x64>
 8009372:	462a      	mov	r2, r5
 8009374:	4649      	mov	r1, r9
 8009376:	4620      	mov	r0, r4
 8009378:	f7ff ffa8 	bl	80092cc <L_shift>
 800937c:	4544      	cmp	r4, r8
 800937e:	d952      	bls.n	8009426 <__hexnan+0x10e>
 8009380:	2300      	movs	r3, #0
 8009382:	f1a4 0904 	sub.w	r9, r4, #4
 8009386:	f844 3c04 	str.w	r3, [r4, #-4]
 800938a:	f8cd b008 	str.w	fp, [sp, #8]
 800938e:	464c      	mov	r4, r9
 8009390:	461d      	mov	r5, r3
 8009392:	9903      	ldr	r1, [sp, #12]
 8009394:	e7d7      	b.n	8009346 <__hexnan+0x2e>
 8009396:	2a29      	cmp	r2, #41	@ 0x29
 8009398:	d157      	bne.n	800944a <__hexnan+0x132>
 800939a:	3102      	adds	r1, #2
 800939c:	f8ca 1000 	str.w	r1, [sl]
 80093a0:	f1bb 0f00 	cmp.w	fp, #0
 80093a4:	d051      	beq.n	800944a <__hexnan+0x132>
 80093a6:	454c      	cmp	r4, r9
 80093a8:	d206      	bcs.n	80093b8 <__hexnan+0xa0>
 80093aa:	2d07      	cmp	r5, #7
 80093ac:	dc04      	bgt.n	80093b8 <__hexnan+0xa0>
 80093ae:	462a      	mov	r2, r5
 80093b0:	4649      	mov	r1, r9
 80093b2:	4620      	mov	r0, r4
 80093b4:	f7ff ff8a 	bl	80092cc <L_shift>
 80093b8:	4544      	cmp	r4, r8
 80093ba:	d936      	bls.n	800942a <__hexnan+0x112>
 80093bc:	f1a8 0204 	sub.w	r2, r8, #4
 80093c0:	4623      	mov	r3, r4
 80093c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80093c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80093ca:	429f      	cmp	r7, r3
 80093cc:	d2f9      	bcs.n	80093c2 <__hexnan+0xaa>
 80093ce:	1b3b      	subs	r3, r7, r4
 80093d0:	f023 0303 	bic.w	r3, r3, #3
 80093d4:	3304      	adds	r3, #4
 80093d6:	3401      	adds	r4, #1
 80093d8:	3e03      	subs	r6, #3
 80093da:	42b4      	cmp	r4, r6
 80093dc:	bf88      	it	hi
 80093de:	2304      	movhi	r3, #4
 80093e0:	4443      	add	r3, r8
 80093e2:	2200      	movs	r2, #0
 80093e4:	f843 2b04 	str.w	r2, [r3], #4
 80093e8:	429f      	cmp	r7, r3
 80093ea:	d2fb      	bcs.n	80093e4 <__hexnan+0xcc>
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	b91b      	cbnz	r3, 80093f8 <__hexnan+0xe0>
 80093f0:	4547      	cmp	r7, r8
 80093f2:	d128      	bne.n	8009446 <__hexnan+0x12e>
 80093f4:	2301      	movs	r3, #1
 80093f6:	603b      	str	r3, [r7, #0]
 80093f8:	2005      	movs	r0, #5
 80093fa:	b007      	add	sp, #28
 80093fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	3501      	adds	r5, #1
 8009402:	2d08      	cmp	r5, #8
 8009404:	f10b 0b01 	add.w	fp, fp, #1
 8009408:	dd06      	ble.n	8009418 <__hexnan+0x100>
 800940a:	4544      	cmp	r4, r8
 800940c:	d9c1      	bls.n	8009392 <__hexnan+0x7a>
 800940e:	2300      	movs	r3, #0
 8009410:	f844 3c04 	str.w	r3, [r4, #-4]
 8009414:	2501      	movs	r5, #1
 8009416:	3c04      	subs	r4, #4
 8009418:	6822      	ldr	r2, [r4, #0]
 800941a:	f000 000f 	and.w	r0, r0, #15
 800941e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009422:	6020      	str	r0, [r4, #0]
 8009424:	e7b5      	b.n	8009392 <__hexnan+0x7a>
 8009426:	2508      	movs	r5, #8
 8009428:	e7b3      	b.n	8009392 <__hexnan+0x7a>
 800942a:	9b01      	ldr	r3, [sp, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0dd      	beq.n	80093ec <__hexnan+0xd4>
 8009430:	f1c3 0320 	rsb	r3, r3, #32
 8009434:	f04f 32ff 	mov.w	r2, #4294967295
 8009438:	40da      	lsrs	r2, r3
 800943a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800943e:	4013      	ands	r3, r2
 8009440:	f846 3c04 	str.w	r3, [r6, #-4]
 8009444:	e7d2      	b.n	80093ec <__hexnan+0xd4>
 8009446:	3f04      	subs	r7, #4
 8009448:	e7d0      	b.n	80093ec <__hexnan+0xd4>
 800944a:	2004      	movs	r0, #4
 800944c:	e7d5      	b.n	80093fa <__hexnan+0xe2>
	...

08009450 <malloc>:
 8009450:	4b02      	ldr	r3, [pc, #8]	@ (800945c <malloc+0xc>)
 8009452:	4601      	mov	r1, r0
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	f000 b825 	b.w	80094a4 <_malloc_r>
 800945a:	bf00      	nop
 800945c:	20000184 	.word	0x20000184

08009460 <sbrk_aligned>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	4e0f      	ldr	r6, [pc, #60]	@ (80094a0 <sbrk_aligned+0x40>)
 8009464:	460c      	mov	r4, r1
 8009466:	6831      	ldr	r1, [r6, #0]
 8009468:	4605      	mov	r5, r0
 800946a:	b911      	cbnz	r1, 8009472 <sbrk_aligned+0x12>
 800946c:	f000 ff94 	bl	800a398 <_sbrk_r>
 8009470:	6030      	str	r0, [r6, #0]
 8009472:	4621      	mov	r1, r4
 8009474:	4628      	mov	r0, r5
 8009476:	f000 ff8f 	bl	800a398 <_sbrk_r>
 800947a:	1c43      	adds	r3, r0, #1
 800947c:	d103      	bne.n	8009486 <sbrk_aligned+0x26>
 800947e:	f04f 34ff 	mov.w	r4, #4294967295
 8009482:	4620      	mov	r0, r4
 8009484:	bd70      	pop	{r4, r5, r6, pc}
 8009486:	1cc4      	adds	r4, r0, #3
 8009488:	f024 0403 	bic.w	r4, r4, #3
 800948c:	42a0      	cmp	r0, r4
 800948e:	d0f8      	beq.n	8009482 <sbrk_aligned+0x22>
 8009490:	1a21      	subs	r1, r4, r0
 8009492:	4628      	mov	r0, r5
 8009494:	f000 ff80 	bl	800a398 <_sbrk_r>
 8009498:	3001      	adds	r0, #1
 800949a:	d1f2      	bne.n	8009482 <sbrk_aligned+0x22>
 800949c:	e7ef      	b.n	800947e <sbrk_aligned+0x1e>
 800949e:	bf00      	nop
 80094a0:	20000b74 	.word	0x20000b74

080094a4 <_malloc_r>:
 80094a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a8:	1ccd      	adds	r5, r1, #3
 80094aa:	f025 0503 	bic.w	r5, r5, #3
 80094ae:	3508      	adds	r5, #8
 80094b0:	2d0c      	cmp	r5, #12
 80094b2:	bf38      	it	cc
 80094b4:	250c      	movcc	r5, #12
 80094b6:	2d00      	cmp	r5, #0
 80094b8:	4606      	mov	r6, r0
 80094ba:	db01      	blt.n	80094c0 <_malloc_r+0x1c>
 80094bc:	42a9      	cmp	r1, r5
 80094be:	d904      	bls.n	80094ca <_malloc_r+0x26>
 80094c0:	230c      	movs	r3, #12
 80094c2:	6033      	str	r3, [r6, #0]
 80094c4:	2000      	movs	r0, #0
 80094c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095a0 <_malloc_r+0xfc>
 80094ce:	f000 f87b 	bl	80095c8 <__malloc_lock>
 80094d2:	f8d8 3000 	ldr.w	r3, [r8]
 80094d6:	461c      	mov	r4, r3
 80094d8:	bb44      	cbnz	r4, 800952c <_malloc_r+0x88>
 80094da:	4629      	mov	r1, r5
 80094dc:	4630      	mov	r0, r6
 80094de:	f7ff ffbf 	bl	8009460 <sbrk_aligned>
 80094e2:	1c43      	adds	r3, r0, #1
 80094e4:	4604      	mov	r4, r0
 80094e6:	d158      	bne.n	800959a <_malloc_r+0xf6>
 80094e8:	f8d8 4000 	ldr.w	r4, [r8]
 80094ec:	4627      	mov	r7, r4
 80094ee:	2f00      	cmp	r7, #0
 80094f0:	d143      	bne.n	800957a <_malloc_r+0xd6>
 80094f2:	2c00      	cmp	r4, #0
 80094f4:	d04b      	beq.n	800958e <_malloc_r+0xea>
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	4639      	mov	r1, r7
 80094fa:	4630      	mov	r0, r6
 80094fc:	eb04 0903 	add.w	r9, r4, r3
 8009500:	f000 ff4a 	bl	800a398 <_sbrk_r>
 8009504:	4581      	cmp	r9, r0
 8009506:	d142      	bne.n	800958e <_malloc_r+0xea>
 8009508:	6821      	ldr	r1, [r4, #0]
 800950a:	1a6d      	subs	r5, r5, r1
 800950c:	4629      	mov	r1, r5
 800950e:	4630      	mov	r0, r6
 8009510:	f7ff ffa6 	bl	8009460 <sbrk_aligned>
 8009514:	3001      	adds	r0, #1
 8009516:	d03a      	beq.n	800958e <_malloc_r+0xea>
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	442b      	add	r3, r5
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	f8d8 3000 	ldr.w	r3, [r8]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	bb62      	cbnz	r2, 8009580 <_malloc_r+0xdc>
 8009526:	f8c8 7000 	str.w	r7, [r8]
 800952a:	e00f      	b.n	800954c <_malloc_r+0xa8>
 800952c:	6822      	ldr	r2, [r4, #0]
 800952e:	1b52      	subs	r2, r2, r5
 8009530:	d420      	bmi.n	8009574 <_malloc_r+0xd0>
 8009532:	2a0b      	cmp	r2, #11
 8009534:	d917      	bls.n	8009566 <_malloc_r+0xc2>
 8009536:	1961      	adds	r1, r4, r5
 8009538:	42a3      	cmp	r3, r4
 800953a:	6025      	str	r5, [r4, #0]
 800953c:	bf18      	it	ne
 800953e:	6059      	strne	r1, [r3, #4]
 8009540:	6863      	ldr	r3, [r4, #4]
 8009542:	bf08      	it	eq
 8009544:	f8c8 1000 	streq.w	r1, [r8]
 8009548:	5162      	str	r2, [r4, r5]
 800954a:	604b      	str	r3, [r1, #4]
 800954c:	4630      	mov	r0, r6
 800954e:	f000 f841 	bl	80095d4 <__malloc_unlock>
 8009552:	f104 000b 	add.w	r0, r4, #11
 8009556:	1d23      	adds	r3, r4, #4
 8009558:	f020 0007 	bic.w	r0, r0, #7
 800955c:	1ac2      	subs	r2, r0, r3
 800955e:	bf1c      	itt	ne
 8009560:	1a1b      	subne	r3, r3, r0
 8009562:	50a3      	strne	r3, [r4, r2]
 8009564:	e7af      	b.n	80094c6 <_malloc_r+0x22>
 8009566:	6862      	ldr	r2, [r4, #4]
 8009568:	42a3      	cmp	r3, r4
 800956a:	bf0c      	ite	eq
 800956c:	f8c8 2000 	streq.w	r2, [r8]
 8009570:	605a      	strne	r2, [r3, #4]
 8009572:	e7eb      	b.n	800954c <_malloc_r+0xa8>
 8009574:	4623      	mov	r3, r4
 8009576:	6864      	ldr	r4, [r4, #4]
 8009578:	e7ae      	b.n	80094d8 <_malloc_r+0x34>
 800957a:	463c      	mov	r4, r7
 800957c:	687f      	ldr	r7, [r7, #4]
 800957e:	e7b6      	b.n	80094ee <_malloc_r+0x4a>
 8009580:	461a      	mov	r2, r3
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	42a3      	cmp	r3, r4
 8009586:	d1fb      	bne.n	8009580 <_malloc_r+0xdc>
 8009588:	2300      	movs	r3, #0
 800958a:	6053      	str	r3, [r2, #4]
 800958c:	e7de      	b.n	800954c <_malloc_r+0xa8>
 800958e:	230c      	movs	r3, #12
 8009590:	6033      	str	r3, [r6, #0]
 8009592:	4630      	mov	r0, r6
 8009594:	f000 f81e 	bl	80095d4 <__malloc_unlock>
 8009598:	e794      	b.n	80094c4 <_malloc_r+0x20>
 800959a:	6005      	str	r5, [r0, #0]
 800959c:	e7d6      	b.n	800954c <_malloc_r+0xa8>
 800959e:	bf00      	nop
 80095a0:	20000b78 	.word	0x20000b78

080095a4 <__ascii_mbtowc>:
 80095a4:	b082      	sub	sp, #8
 80095a6:	b901      	cbnz	r1, 80095aa <__ascii_mbtowc+0x6>
 80095a8:	a901      	add	r1, sp, #4
 80095aa:	b142      	cbz	r2, 80095be <__ascii_mbtowc+0x1a>
 80095ac:	b14b      	cbz	r3, 80095c2 <__ascii_mbtowc+0x1e>
 80095ae:	7813      	ldrb	r3, [r2, #0]
 80095b0:	600b      	str	r3, [r1, #0]
 80095b2:	7812      	ldrb	r2, [r2, #0]
 80095b4:	1e10      	subs	r0, r2, #0
 80095b6:	bf18      	it	ne
 80095b8:	2001      	movne	r0, #1
 80095ba:	b002      	add	sp, #8
 80095bc:	4770      	bx	lr
 80095be:	4610      	mov	r0, r2
 80095c0:	e7fb      	b.n	80095ba <__ascii_mbtowc+0x16>
 80095c2:	f06f 0001 	mvn.w	r0, #1
 80095c6:	e7f8      	b.n	80095ba <__ascii_mbtowc+0x16>

080095c8 <__malloc_lock>:
 80095c8:	4801      	ldr	r0, [pc, #4]	@ (80095d0 <__malloc_lock+0x8>)
 80095ca:	f7fe bd56 	b.w	800807a <__retarget_lock_acquire_recursive>
 80095ce:	bf00      	nop
 80095d0:	20000b70 	.word	0x20000b70

080095d4 <__malloc_unlock>:
 80095d4:	4801      	ldr	r0, [pc, #4]	@ (80095dc <__malloc_unlock+0x8>)
 80095d6:	f7fe bd51 	b.w	800807c <__retarget_lock_release_recursive>
 80095da:	bf00      	nop
 80095dc:	20000b70 	.word	0x20000b70

080095e0 <_Balloc>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	69c6      	ldr	r6, [r0, #28]
 80095e4:	4604      	mov	r4, r0
 80095e6:	460d      	mov	r5, r1
 80095e8:	b976      	cbnz	r6, 8009608 <_Balloc+0x28>
 80095ea:	2010      	movs	r0, #16
 80095ec:	f7ff ff30 	bl	8009450 <malloc>
 80095f0:	4602      	mov	r2, r0
 80095f2:	61e0      	str	r0, [r4, #28]
 80095f4:	b920      	cbnz	r0, 8009600 <_Balloc+0x20>
 80095f6:	4b18      	ldr	r3, [pc, #96]	@ (8009658 <_Balloc+0x78>)
 80095f8:	4818      	ldr	r0, [pc, #96]	@ (800965c <_Balloc+0x7c>)
 80095fa:	216b      	movs	r1, #107	@ 0x6b
 80095fc:	f000 fedc 	bl	800a3b8 <__assert_func>
 8009600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009604:	6006      	str	r6, [r0, #0]
 8009606:	60c6      	str	r6, [r0, #12]
 8009608:	69e6      	ldr	r6, [r4, #28]
 800960a:	68f3      	ldr	r3, [r6, #12]
 800960c:	b183      	cbz	r3, 8009630 <_Balloc+0x50>
 800960e:	69e3      	ldr	r3, [r4, #28]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009616:	b9b8      	cbnz	r0, 8009648 <_Balloc+0x68>
 8009618:	2101      	movs	r1, #1
 800961a:	fa01 f605 	lsl.w	r6, r1, r5
 800961e:	1d72      	adds	r2, r6, #5
 8009620:	0092      	lsls	r2, r2, #2
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fee6 	bl	800a3f4 <_calloc_r>
 8009628:	b160      	cbz	r0, 8009644 <_Balloc+0x64>
 800962a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800962e:	e00e      	b.n	800964e <_Balloc+0x6e>
 8009630:	2221      	movs	r2, #33	@ 0x21
 8009632:	2104      	movs	r1, #4
 8009634:	4620      	mov	r0, r4
 8009636:	f000 fedd 	bl	800a3f4 <_calloc_r>
 800963a:	69e3      	ldr	r3, [r4, #28]
 800963c:	60f0      	str	r0, [r6, #12]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e4      	bne.n	800960e <_Balloc+0x2e>
 8009644:	2000      	movs	r0, #0
 8009646:	bd70      	pop	{r4, r5, r6, pc}
 8009648:	6802      	ldr	r2, [r0, #0]
 800964a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800964e:	2300      	movs	r3, #0
 8009650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009654:	e7f7      	b.n	8009646 <_Balloc+0x66>
 8009656:	bf00      	nop
 8009658:	0800aad9 	.word	0x0800aad9
 800965c:	0800abb9 	.word	0x0800abb9

08009660 <_Bfree>:
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	69c6      	ldr	r6, [r0, #28]
 8009664:	4605      	mov	r5, r0
 8009666:	460c      	mov	r4, r1
 8009668:	b976      	cbnz	r6, 8009688 <_Bfree+0x28>
 800966a:	2010      	movs	r0, #16
 800966c:	f7ff fef0 	bl	8009450 <malloc>
 8009670:	4602      	mov	r2, r0
 8009672:	61e8      	str	r0, [r5, #28]
 8009674:	b920      	cbnz	r0, 8009680 <_Bfree+0x20>
 8009676:	4b09      	ldr	r3, [pc, #36]	@ (800969c <_Bfree+0x3c>)
 8009678:	4809      	ldr	r0, [pc, #36]	@ (80096a0 <_Bfree+0x40>)
 800967a:	218f      	movs	r1, #143	@ 0x8f
 800967c:	f000 fe9c 	bl	800a3b8 <__assert_func>
 8009680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009684:	6006      	str	r6, [r0, #0]
 8009686:	60c6      	str	r6, [r0, #12]
 8009688:	b13c      	cbz	r4, 800969a <_Bfree+0x3a>
 800968a:	69eb      	ldr	r3, [r5, #28]
 800968c:	6862      	ldr	r2, [r4, #4]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009694:	6021      	str	r1, [r4, #0]
 8009696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800969a:	bd70      	pop	{r4, r5, r6, pc}
 800969c:	0800aad9 	.word	0x0800aad9
 80096a0:	0800abb9 	.word	0x0800abb9

080096a4 <__multadd>:
 80096a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a8:	690d      	ldr	r5, [r1, #16]
 80096aa:	4607      	mov	r7, r0
 80096ac:	460c      	mov	r4, r1
 80096ae:	461e      	mov	r6, r3
 80096b0:	f101 0c14 	add.w	ip, r1, #20
 80096b4:	2000      	movs	r0, #0
 80096b6:	f8dc 3000 	ldr.w	r3, [ip]
 80096ba:	b299      	uxth	r1, r3
 80096bc:	fb02 6101 	mla	r1, r2, r1, r6
 80096c0:	0c1e      	lsrs	r6, r3, #16
 80096c2:	0c0b      	lsrs	r3, r1, #16
 80096c4:	fb02 3306 	mla	r3, r2, r6, r3
 80096c8:	b289      	uxth	r1, r1
 80096ca:	3001      	adds	r0, #1
 80096cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096d0:	4285      	cmp	r5, r0
 80096d2:	f84c 1b04 	str.w	r1, [ip], #4
 80096d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096da:	dcec      	bgt.n	80096b6 <__multadd+0x12>
 80096dc:	b30e      	cbz	r6, 8009722 <__multadd+0x7e>
 80096de:	68a3      	ldr	r3, [r4, #8]
 80096e0:	42ab      	cmp	r3, r5
 80096e2:	dc19      	bgt.n	8009718 <__multadd+0x74>
 80096e4:	6861      	ldr	r1, [r4, #4]
 80096e6:	4638      	mov	r0, r7
 80096e8:	3101      	adds	r1, #1
 80096ea:	f7ff ff79 	bl	80095e0 <_Balloc>
 80096ee:	4680      	mov	r8, r0
 80096f0:	b928      	cbnz	r0, 80096fe <__multadd+0x5a>
 80096f2:	4602      	mov	r2, r0
 80096f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009728 <__multadd+0x84>)
 80096f6:	480d      	ldr	r0, [pc, #52]	@ (800972c <__multadd+0x88>)
 80096f8:	21ba      	movs	r1, #186	@ 0xba
 80096fa:	f000 fe5d 	bl	800a3b8 <__assert_func>
 80096fe:	6922      	ldr	r2, [r4, #16]
 8009700:	3202      	adds	r2, #2
 8009702:	f104 010c 	add.w	r1, r4, #12
 8009706:	0092      	lsls	r2, r2, #2
 8009708:	300c      	adds	r0, #12
 800970a:	f7fe fcb8 	bl	800807e <memcpy>
 800970e:	4621      	mov	r1, r4
 8009710:	4638      	mov	r0, r7
 8009712:	f7ff ffa5 	bl	8009660 <_Bfree>
 8009716:	4644      	mov	r4, r8
 8009718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800971c:	3501      	adds	r5, #1
 800971e:	615e      	str	r6, [r3, #20]
 8009720:	6125      	str	r5, [r4, #16]
 8009722:	4620      	mov	r0, r4
 8009724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009728:	0800ab48 	.word	0x0800ab48
 800972c:	0800abb9 	.word	0x0800abb9

08009730 <__s2b>:
 8009730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009734:	460c      	mov	r4, r1
 8009736:	4615      	mov	r5, r2
 8009738:	461f      	mov	r7, r3
 800973a:	2209      	movs	r2, #9
 800973c:	3308      	adds	r3, #8
 800973e:	4606      	mov	r6, r0
 8009740:	fb93 f3f2 	sdiv	r3, r3, r2
 8009744:	2100      	movs	r1, #0
 8009746:	2201      	movs	r2, #1
 8009748:	429a      	cmp	r2, r3
 800974a:	db09      	blt.n	8009760 <__s2b+0x30>
 800974c:	4630      	mov	r0, r6
 800974e:	f7ff ff47 	bl	80095e0 <_Balloc>
 8009752:	b940      	cbnz	r0, 8009766 <__s2b+0x36>
 8009754:	4602      	mov	r2, r0
 8009756:	4b19      	ldr	r3, [pc, #100]	@ (80097bc <__s2b+0x8c>)
 8009758:	4819      	ldr	r0, [pc, #100]	@ (80097c0 <__s2b+0x90>)
 800975a:	21d3      	movs	r1, #211	@ 0xd3
 800975c:	f000 fe2c 	bl	800a3b8 <__assert_func>
 8009760:	0052      	lsls	r2, r2, #1
 8009762:	3101      	adds	r1, #1
 8009764:	e7f0      	b.n	8009748 <__s2b+0x18>
 8009766:	9b08      	ldr	r3, [sp, #32]
 8009768:	6143      	str	r3, [r0, #20]
 800976a:	2d09      	cmp	r5, #9
 800976c:	f04f 0301 	mov.w	r3, #1
 8009770:	6103      	str	r3, [r0, #16]
 8009772:	dd16      	ble.n	80097a2 <__s2b+0x72>
 8009774:	f104 0909 	add.w	r9, r4, #9
 8009778:	46c8      	mov	r8, r9
 800977a:	442c      	add	r4, r5
 800977c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009780:	4601      	mov	r1, r0
 8009782:	3b30      	subs	r3, #48	@ 0x30
 8009784:	220a      	movs	r2, #10
 8009786:	4630      	mov	r0, r6
 8009788:	f7ff ff8c 	bl	80096a4 <__multadd>
 800978c:	45a0      	cmp	r8, r4
 800978e:	d1f5      	bne.n	800977c <__s2b+0x4c>
 8009790:	f1a5 0408 	sub.w	r4, r5, #8
 8009794:	444c      	add	r4, r9
 8009796:	1b2d      	subs	r5, r5, r4
 8009798:	1963      	adds	r3, r4, r5
 800979a:	42bb      	cmp	r3, r7
 800979c:	db04      	blt.n	80097a8 <__s2b+0x78>
 800979e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097a2:	340a      	adds	r4, #10
 80097a4:	2509      	movs	r5, #9
 80097a6:	e7f6      	b.n	8009796 <__s2b+0x66>
 80097a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097ac:	4601      	mov	r1, r0
 80097ae:	3b30      	subs	r3, #48	@ 0x30
 80097b0:	220a      	movs	r2, #10
 80097b2:	4630      	mov	r0, r6
 80097b4:	f7ff ff76 	bl	80096a4 <__multadd>
 80097b8:	e7ee      	b.n	8009798 <__s2b+0x68>
 80097ba:	bf00      	nop
 80097bc:	0800ab48 	.word	0x0800ab48
 80097c0:	0800abb9 	.word	0x0800abb9

080097c4 <__hi0bits>:
 80097c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097c8:	4603      	mov	r3, r0
 80097ca:	bf36      	itet	cc
 80097cc:	0403      	lslcc	r3, r0, #16
 80097ce:	2000      	movcs	r0, #0
 80097d0:	2010      	movcc	r0, #16
 80097d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097d6:	bf3c      	itt	cc
 80097d8:	021b      	lslcc	r3, r3, #8
 80097da:	3008      	addcc	r0, #8
 80097dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097e0:	bf3c      	itt	cc
 80097e2:	011b      	lslcc	r3, r3, #4
 80097e4:	3004      	addcc	r0, #4
 80097e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ea:	bf3c      	itt	cc
 80097ec:	009b      	lslcc	r3, r3, #2
 80097ee:	3002      	addcc	r0, #2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	db05      	blt.n	8009800 <__hi0bits+0x3c>
 80097f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80097f8:	f100 0001 	add.w	r0, r0, #1
 80097fc:	bf08      	it	eq
 80097fe:	2020      	moveq	r0, #32
 8009800:	4770      	bx	lr

08009802 <__lo0bits>:
 8009802:	6803      	ldr	r3, [r0, #0]
 8009804:	4602      	mov	r2, r0
 8009806:	f013 0007 	ands.w	r0, r3, #7
 800980a:	d00b      	beq.n	8009824 <__lo0bits+0x22>
 800980c:	07d9      	lsls	r1, r3, #31
 800980e:	d421      	bmi.n	8009854 <__lo0bits+0x52>
 8009810:	0798      	lsls	r0, r3, #30
 8009812:	bf49      	itett	mi
 8009814:	085b      	lsrmi	r3, r3, #1
 8009816:	089b      	lsrpl	r3, r3, #2
 8009818:	2001      	movmi	r0, #1
 800981a:	6013      	strmi	r3, [r2, #0]
 800981c:	bf5c      	itt	pl
 800981e:	6013      	strpl	r3, [r2, #0]
 8009820:	2002      	movpl	r0, #2
 8009822:	4770      	bx	lr
 8009824:	b299      	uxth	r1, r3
 8009826:	b909      	cbnz	r1, 800982c <__lo0bits+0x2a>
 8009828:	0c1b      	lsrs	r3, r3, #16
 800982a:	2010      	movs	r0, #16
 800982c:	b2d9      	uxtb	r1, r3
 800982e:	b909      	cbnz	r1, 8009834 <__lo0bits+0x32>
 8009830:	3008      	adds	r0, #8
 8009832:	0a1b      	lsrs	r3, r3, #8
 8009834:	0719      	lsls	r1, r3, #28
 8009836:	bf04      	itt	eq
 8009838:	091b      	lsreq	r3, r3, #4
 800983a:	3004      	addeq	r0, #4
 800983c:	0799      	lsls	r1, r3, #30
 800983e:	bf04      	itt	eq
 8009840:	089b      	lsreq	r3, r3, #2
 8009842:	3002      	addeq	r0, #2
 8009844:	07d9      	lsls	r1, r3, #31
 8009846:	d403      	bmi.n	8009850 <__lo0bits+0x4e>
 8009848:	085b      	lsrs	r3, r3, #1
 800984a:	f100 0001 	add.w	r0, r0, #1
 800984e:	d003      	beq.n	8009858 <__lo0bits+0x56>
 8009850:	6013      	str	r3, [r2, #0]
 8009852:	4770      	bx	lr
 8009854:	2000      	movs	r0, #0
 8009856:	4770      	bx	lr
 8009858:	2020      	movs	r0, #32
 800985a:	4770      	bx	lr

0800985c <__i2b>:
 800985c:	b510      	push	{r4, lr}
 800985e:	460c      	mov	r4, r1
 8009860:	2101      	movs	r1, #1
 8009862:	f7ff febd 	bl	80095e0 <_Balloc>
 8009866:	4602      	mov	r2, r0
 8009868:	b928      	cbnz	r0, 8009876 <__i2b+0x1a>
 800986a:	4b05      	ldr	r3, [pc, #20]	@ (8009880 <__i2b+0x24>)
 800986c:	4805      	ldr	r0, [pc, #20]	@ (8009884 <__i2b+0x28>)
 800986e:	f240 1145 	movw	r1, #325	@ 0x145
 8009872:	f000 fda1 	bl	800a3b8 <__assert_func>
 8009876:	2301      	movs	r3, #1
 8009878:	6144      	str	r4, [r0, #20]
 800987a:	6103      	str	r3, [r0, #16]
 800987c:	bd10      	pop	{r4, pc}
 800987e:	bf00      	nop
 8009880:	0800ab48 	.word	0x0800ab48
 8009884:	0800abb9 	.word	0x0800abb9

08009888 <__multiply>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	4614      	mov	r4, r2
 800988e:	690a      	ldr	r2, [r1, #16]
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	429a      	cmp	r2, r3
 8009894:	bfa8      	it	ge
 8009896:	4623      	movge	r3, r4
 8009898:	460f      	mov	r7, r1
 800989a:	bfa4      	itt	ge
 800989c:	460c      	movge	r4, r1
 800989e:	461f      	movge	r7, r3
 80098a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80098a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80098a8:	68a3      	ldr	r3, [r4, #8]
 80098aa:	6861      	ldr	r1, [r4, #4]
 80098ac:	eb0a 0609 	add.w	r6, sl, r9
 80098b0:	42b3      	cmp	r3, r6
 80098b2:	b085      	sub	sp, #20
 80098b4:	bfb8      	it	lt
 80098b6:	3101      	addlt	r1, #1
 80098b8:	f7ff fe92 	bl	80095e0 <_Balloc>
 80098bc:	b930      	cbnz	r0, 80098cc <__multiply+0x44>
 80098be:	4602      	mov	r2, r0
 80098c0:	4b44      	ldr	r3, [pc, #272]	@ (80099d4 <__multiply+0x14c>)
 80098c2:	4845      	ldr	r0, [pc, #276]	@ (80099d8 <__multiply+0x150>)
 80098c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098c8:	f000 fd76 	bl	800a3b8 <__assert_func>
 80098cc:	f100 0514 	add.w	r5, r0, #20
 80098d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098d4:	462b      	mov	r3, r5
 80098d6:	2200      	movs	r2, #0
 80098d8:	4543      	cmp	r3, r8
 80098da:	d321      	bcc.n	8009920 <__multiply+0x98>
 80098dc:	f107 0114 	add.w	r1, r7, #20
 80098e0:	f104 0214 	add.w	r2, r4, #20
 80098e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80098e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80098ec:	9302      	str	r3, [sp, #8]
 80098ee:	1b13      	subs	r3, r2, r4
 80098f0:	3b15      	subs	r3, #21
 80098f2:	f023 0303 	bic.w	r3, r3, #3
 80098f6:	3304      	adds	r3, #4
 80098f8:	f104 0715 	add.w	r7, r4, #21
 80098fc:	42ba      	cmp	r2, r7
 80098fe:	bf38      	it	cc
 8009900:	2304      	movcc	r3, #4
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	9b02      	ldr	r3, [sp, #8]
 8009906:	9103      	str	r1, [sp, #12]
 8009908:	428b      	cmp	r3, r1
 800990a:	d80c      	bhi.n	8009926 <__multiply+0x9e>
 800990c:	2e00      	cmp	r6, #0
 800990e:	dd03      	ble.n	8009918 <__multiply+0x90>
 8009910:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009914:	2b00      	cmp	r3, #0
 8009916:	d05b      	beq.n	80099d0 <__multiply+0x148>
 8009918:	6106      	str	r6, [r0, #16]
 800991a:	b005      	add	sp, #20
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	f843 2b04 	str.w	r2, [r3], #4
 8009924:	e7d8      	b.n	80098d8 <__multiply+0x50>
 8009926:	f8b1 a000 	ldrh.w	sl, [r1]
 800992a:	f1ba 0f00 	cmp.w	sl, #0
 800992e:	d024      	beq.n	800997a <__multiply+0xf2>
 8009930:	f104 0e14 	add.w	lr, r4, #20
 8009934:	46a9      	mov	r9, r5
 8009936:	f04f 0c00 	mov.w	ip, #0
 800993a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800993e:	f8d9 3000 	ldr.w	r3, [r9]
 8009942:	fa1f fb87 	uxth.w	fp, r7
 8009946:	b29b      	uxth	r3, r3
 8009948:	fb0a 330b 	mla	r3, sl, fp, r3
 800994c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009950:	f8d9 7000 	ldr.w	r7, [r9]
 8009954:	4463      	add	r3, ip
 8009956:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800995a:	fb0a c70b 	mla	r7, sl, fp, ip
 800995e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009962:	b29b      	uxth	r3, r3
 8009964:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009968:	4572      	cmp	r2, lr
 800996a:	f849 3b04 	str.w	r3, [r9], #4
 800996e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009972:	d8e2      	bhi.n	800993a <__multiply+0xb2>
 8009974:	9b01      	ldr	r3, [sp, #4]
 8009976:	f845 c003 	str.w	ip, [r5, r3]
 800997a:	9b03      	ldr	r3, [sp, #12]
 800997c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009980:	3104      	adds	r1, #4
 8009982:	f1b9 0f00 	cmp.w	r9, #0
 8009986:	d021      	beq.n	80099cc <__multiply+0x144>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	f104 0c14 	add.w	ip, r4, #20
 800998e:	46ae      	mov	lr, r5
 8009990:	f04f 0a00 	mov.w	sl, #0
 8009994:	f8bc b000 	ldrh.w	fp, [ip]
 8009998:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800999c:	fb09 770b 	mla	r7, r9, fp, r7
 80099a0:	4457      	add	r7, sl
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80099a8:	f84e 3b04 	str.w	r3, [lr], #4
 80099ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80099b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099b4:	f8be 3000 	ldrh.w	r3, [lr]
 80099b8:	fb09 330a 	mla	r3, r9, sl, r3
 80099bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80099c0:	4562      	cmp	r2, ip
 80099c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099c6:	d8e5      	bhi.n	8009994 <__multiply+0x10c>
 80099c8:	9f01      	ldr	r7, [sp, #4]
 80099ca:	51eb      	str	r3, [r5, r7]
 80099cc:	3504      	adds	r5, #4
 80099ce:	e799      	b.n	8009904 <__multiply+0x7c>
 80099d0:	3e01      	subs	r6, #1
 80099d2:	e79b      	b.n	800990c <__multiply+0x84>
 80099d4:	0800ab48 	.word	0x0800ab48
 80099d8:	0800abb9 	.word	0x0800abb9

080099dc <__pow5mult>:
 80099dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e0:	4615      	mov	r5, r2
 80099e2:	f012 0203 	ands.w	r2, r2, #3
 80099e6:	4607      	mov	r7, r0
 80099e8:	460e      	mov	r6, r1
 80099ea:	d007      	beq.n	80099fc <__pow5mult+0x20>
 80099ec:	4c25      	ldr	r4, [pc, #148]	@ (8009a84 <__pow5mult+0xa8>)
 80099ee:	3a01      	subs	r2, #1
 80099f0:	2300      	movs	r3, #0
 80099f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099f6:	f7ff fe55 	bl	80096a4 <__multadd>
 80099fa:	4606      	mov	r6, r0
 80099fc:	10ad      	asrs	r5, r5, #2
 80099fe:	d03d      	beq.n	8009a7c <__pow5mult+0xa0>
 8009a00:	69fc      	ldr	r4, [r7, #28]
 8009a02:	b97c      	cbnz	r4, 8009a24 <__pow5mult+0x48>
 8009a04:	2010      	movs	r0, #16
 8009a06:	f7ff fd23 	bl	8009450 <malloc>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	61f8      	str	r0, [r7, #28]
 8009a0e:	b928      	cbnz	r0, 8009a1c <__pow5mult+0x40>
 8009a10:	4b1d      	ldr	r3, [pc, #116]	@ (8009a88 <__pow5mult+0xac>)
 8009a12:	481e      	ldr	r0, [pc, #120]	@ (8009a8c <__pow5mult+0xb0>)
 8009a14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a18:	f000 fcce 	bl	800a3b8 <__assert_func>
 8009a1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a20:	6004      	str	r4, [r0, #0]
 8009a22:	60c4      	str	r4, [r0, #12]
 8009a24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a2c:	b94c      	cbnz	r4, 8009a42 <__pow5mult+0x66>
 8009a2e:	f240 2171 	movw	r1, #625	@ 0x271
 8009a32:	4638      	mov	r0, r7
 8009a34:	f7ff ff12 	bl	800985c <__i2b>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a3e:	4604      	mov	r4, r0
 8009a40:	6003      	str	r3, [r0, #0]
 8009a42:	f04f 0900 	mov.w	r9, #0
 8009a46:	07eb      	lsls	r3, r5, #31
 8009a48:	d50a      	bpl.n	8009a60 <__pow5mult+0x84>
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f7ff ff1a 	bl	8009888 <__multiply>
 8009a54:	4631      	mov	r1, r6
 8009a56:	4680      	mov	r8, r0
 8009a58:	4638      	mov	r0, r7
 8009a5a:	f7ff fe01 	bl	8009660 <_Bfree>
 8009a5e:	4646      	mov	r6, r8
 8009a60:	106d      	asrs	r5, r5, #1
 8009a62:	d00b      	beq.n	8009a7c <__pow5mult+0xa0>
 8009a64:	6820      	ldr	r0, [r4, #0]
 8009a66:	b938      	cbnz	r0, 8009a78 <__pow5mult+0x9c>
 8009a68:	4622      	mov	r2, r4
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f7ff ff0b 	bl	8009888 <__multiply>
 8009a72:	6020      	str	r0, [r4, #0]
 8009a74:	f8c0 9000 	str.w	r9, [r0]
 8009a78:	4604      	mov	r4, r0
 8009a7a:	e7e4      	b.n	8009a46 <__pow5mult+0x6a>
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a82:	bf00      	nop
 8009a84:	0800ac14 	.word	0x0800ac14
 8009a88:	0800aad9 	.word	0x0800aad9
 8009a8c:	0800abb9 	.word	0x0800abb9

08009a90 <__lshift>:
 8009a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a94:	460c      	mov	r4, r1
 8009a96:	6849      	ldr	r1, [r1, #4]
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a9e:	68a3      	ldr	r3, [r4, #8]
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	4691      	mov	r9, r2
 8009aa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009aa8:	f108 0601 	add.w	r6, r8, #1
 8009aac:	42b3      	cmp	r3, r6
 8009aae:	db0b      	blt.n	8009ac8 <__lshift+0x38>
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	f7ff fd95 	bl	80095e0 <_Balloc>
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	b948      	cbnz	r0, 8009ace <__lshift+0x3e>
 8009aba:	4602      	mov	r2, r0
 8009abc:	4b28      	ldr	r3, [pc, #160]	@ (8009b60 <__lshift+0xd0>)
 8009abe:	4829      	ldr	r0, [pc, #164]	@ (8009b64 <__lshift+0xd4>)
 8009ac0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ac4:	f000 fc78 	bl	800a3b8 <__assert_func>
 8009ac8:	3101      	adds	r1, #1
 8009aca:	005b      	lsls	r3, r3, #1
 8009acc:	e7ee      	b.n	8009aac <__lshift+0x1c>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f100 0114 	add.w	r1, r0, #20
 8009ad4:	f100 0210 	add.w	r2, r0, #16
 8009ad8:	4618      	mov	r0, r3
 8009ada:	4553      	cmp	r3, sl
 8009adc:	db33      	blt.n	8009b46 <__lshift+0xb6>
 8009ade:	6920      	ldr	r0, [r4, #16]
 8009ae0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ae4:	f104 0314 	add.w	r3, r4, #20
 8009ae8:	f019 091f 	ands.w	r9, r9, #31
 8009aec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009af0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009af4:	d02b      	beq.n	8009b4e <__lshift+0xbe>
 8009af6:	f1c9 0e20 	rsb	lr, r9, #32
 8009afa:	468a      	mov	sl, r1
 8009afc:	2200      	movs	r2, #0
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	fa00 f009 	lsl.w	r0, r0, r9
 8009b04:	4310      	orrs	r0, r2
 8009b06:	f84a 0b04 	str.w	r0, [sl], #4
 8009b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0e:	459c      	cmp	ip, r3
 8009b10:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b14:	d8f3      	bhi.n	8009afe <__lshift+0x6e>
 8009b16:	ebac 0304 	sub.w	r3, ip, r4
 8009b1a:	3b15      	subs	r3, #21
 8009b1c:	f023 0303 	bic.w	r3, r3, #3
 8009b20:	3304      	adds	r3, #4
 8009b22:	f104 0015 	add.w	r0, r4, #21
 8009b26:	4584      	cmp	ip, r0
 8009b28:	bf38      	it	cc
 8009b2a:	2304      	movcc	r3, #4
 8009b2c:	50ca      	str	r2, [r1, r3]
 8009b2e:	b10a      	cbz	r2, 8009b34 <__lshift+0xa4>
 8009b30:	f108 0602 	add.w	r6, r8, #2
 8009b34:	3e01      	subs	r6, #1
 8009b36:	4638      	mov	r0, r7
 8009b38:	612e      	str	r6, [r5, #16]
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	f7ff fd90 	bl	8009660 <_Bfree>
 8009b40:	4628      	mov	r0, r5
 8009b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b46:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	e7c5      	b.n	8009ada <__lshift+0x4a>
 8009b4e:	3904      	subs	r1, #4
 8009b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b54:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b58:	459c      	cmp	ip, r3
 8009b5a:	d8f9      	bhi.n	8009b50 <__lshift+0xc0>
 8009b5c:	e7ea      	b.n	8009b34 <__lshift+0xa4>
 8009b5e:	bf00      	nop
 8009b60:	0800ab48 	.word	0x0800ab48
 8009b64:	0800abb9 	.word	0x0800abb9

08009b68 <__mcmp>:
 8009b68:	690a      	ldr	r2, [r1, #16]
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	6900      	ldr	r0, [r0, #16]
 8009b6e:	1a80      	subs	r0, r0, r2
 8009b70:	b530      	push	{r4, r5, lr}
 8009b72:	d10e      	bne.n	8009b92 <__mcmp+0x2a>
 8009b74:	3314      	adds	r3, #20
 8009b76:	3114      	adds	r1, #20
 8009b78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b88:	4295      	cmp	r5, r2
 8009b8a:	d003      	beq.n	8009b94 <__mcmp+0x2c>
 8009b8c:	d205      	bcs.n	8009b9a <__mcmp+0x32>
 8009b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b92:	bd30      	pop	{r4, r5, pc}
 8009b94:	42a3      	cmp	r3, r4
 8009b96:	d3f3      	bcc.n	8009b80 <__mcmp+0x18>
 8009b98:	e7fb      	b.n	8009b92 <__mcmp+0x2a>
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	e7f9      	b.n	8009b92 <__mcmp+0x2a>
	...

08009ba0 <__mdiff>:
 8009ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	4689      	mov	r9, r1
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4648      	mov	r0, r9
 8009bac:	4614      	mov	r4, r2
 8009bae:	f7ff ffdb 	bl	8009b68 <__mcmp>
 8009bb2:	1e05      	subs	r5, r0, #0
 8009bb4:	d112      	bne.n	8009bdc <__mdiff+0x3c>
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff fd11 	bl	80095e0 <_Balloc>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	b928      	cbnz	r0, 8009bce <__mdiff+0x2e>
 8009bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8009cc0 <__mdiff+0x120>)
 8009bc4:	f240 2137 	movw	r1, #567	@ 0x237
 8009bc8:	483e      	ldr	r0, [pc, #248]	@ (8009cc4 <__mdiff+0x124>)
 8009bca:	f000 fbf5 	bl	800a3b8 <__assert_func>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	b003      	add	sp, #12
 8009bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bdc:	bfbc      	itt	lt
 8009bde:	464b      	movlt	r3, r9
 8009be0:	46a1      	movlt	r9, r4
 8009be2:	4630      	mov	r0, r6
 8009be4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009be8:	bfba      	itte	lt
 8009bea:	461c      	movlt	r4, r3
 8009bec:	2501      	movlt	r5, #1
 8009bee:	2500      	movge	r5, #0
 8009bf0:	f7ff fcf6 	bl	80095e0 <_Balloc>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	b918      	cbnz	r0, 8009c00 <__mdiff+0x60>
 8009bf8:	4b31      	ldr	r3, [pc, #196]	@ (8009cc0 <__mdiff+0x120>)
 8009bfa:	f240 2145 	movw	r1, #581	@ 0x245
 8009bfe:	e7e3      	b.n	8009bc8 <__mdiff+0x28>
 8009c00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c04:	6926      	ldr	r6, [r4, #16]
 8009c06:	60c5      	str	r5, [r0, #12]
 8009c08:	f109 0310 	add.w	r3, r9, #16
 8009c0c:	f109 0514 	add.w	r5, r9, #20
 8009c10:	f104 0e14 	add.w	lr, r4, #20
 8009c14:	f100 0b14 	add.w	fp, r0, #20
 8009c18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	46d9      	mov	r9, fp
 8009c24:	f04f 0c00 	mov.w	ip, #0
 8009c28:	9b01      	ldr	r3, [sp, #4]
 8009c2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c32:	9301      	str	r3, [sp, #4]
 8009c34:	fa1f f38a 	uxth.w	r3, sl
 8009c38:	4619      	mov	r1, r3
 8009c3a:	b283      	uxth	r3, r0
 8009c3c:	1acb      	subs	r3, r1, r3
 8009c3e:	0c00      	lsrs	r0, r0, #16
 8009c40:	4463      	add	r3, ip
 8009c42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c50:	4576      	cmp	r6, lr
 8009c52:	f849 3b04 	str.w	r3, [r9], #4
 8009c56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c5a:	d8e5      	bhi.n	8009c28 <__mdiff+0x88>
 8009c5c:	1b33      	subs	r3, r6, r4
 8009c5e:	3b15      	subs	r3, #21
 8009c60:	f023 0303 	bic.w	r3, r3, #3
 8009c64:	3415      	adds	r4, #21
 8009c66:	3304      	adds	r3, #4
 8009c68:	42a6      	cmp	r6, r4
 8009c6a:	bf38      	it	cc
 8009c6c:	2304      	movcc	r3, #4
 8009c6e:	441d      	add	r5, r3
 8009c70:	445b      	add	r3, fp
 8009c72:	461e      	mov	r6, r3
 8009c74:	462c      	mov	r4, r5
 8009c76:	4544      	cmp	r4, r8
 8009c78:	d30e      	bcc.n	8009c98 <__mdiff+0xf8>
 8009c7a:	f108 0103 	add.w	r1, r8, #3
 8009c7e:	1b49      	subs	r1, r1, r5
 8009c80:	f021 0103 	bic.w	r1, r1, #3
 8009c84:	3d03      	subs	r5, #3
 8009c86:	45a8      	cmp	r8, r5
 8009c88:	bf38      	it	cc
 8009c8a:	2100      	movcc	r1, #0
 8009c8c:	440b      	add	r3, r1
 8009c8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c92:	b191      	cbz	r1, 8009cba <__mdiff+0x11a>
 8009c94:	6117      	str	r7, [r2, #16]
 8009c96:	e79d      	b.n	8009bd4 <__mdiff+0x34>
 8009c98:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c9c:	46e6      	mov	lr, ip
 8009c9e:	0c08      	lsrs	r0, r1, #16
 8009ca0:	fa1c fc81 	uxtah	ip, ip, r1
 8009ca4:	4471      	add	r1, lr
 8009ca6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009caa:	b289      	uxth	r1, r1
 8009cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009cb0:	f846 1b04 	str.w	r1, [r6], #4
 8009cb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cb8:	e7dd      	b.n	8009c76 <__mdiff+0xd6>
 8009cba:	3f01      	subs	r7, #1
 8009cbc:	e7e7      	b.n	8009c8e <__mdiff+0xee>
 8009cbe:	bf00      	nop
 8009cc0:	0800ab48 	.word	0x0800ab48
 8009cc4:	0800abb9 	.word	0x0800abb9

08009cc8 <__ulp>:
 8009cc8:	b082      	sub	sp, #8
 8009cca:	ed8d 0b00 	vstr	d0, [sp]
 8009cce:	9a01      	ldr	r2, [sp, #4]
 8009cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8009d10 <__ulp+0x48>)
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	dc08      	bgt.n	8009cee <__ulp+0x26>
 8009cdc:	425b      	negs	r3, r3
 8009cde:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009ce2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ce6:	da04      	bge.n	8009cf2 <__ulp+0x2a>
 8009ce8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009cec:	4113      	asrs	r3, r2
 8009cee:	2200      	movs	r2, #0
 8009cf0:	e008      	b.n	8009d04 <__ulp+0x3c>
 8009cf2:	f1a2 0314 	sub.w	r3, r2, #20
 8009cf6:	2b1e      	cmp	r3, #30
 8009cf8:	bfda      	itte	le
 8009cfa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009cfe:	40da      	lsrle	r2, r3
 8009d00:	2201      	movgt	r2, #1
 8009d02:	2300      	movs	r3, #0
 8009d04:	4619      	mov	r1, r3
 8009d06:	4610      	mov	r0, r2
 8009d08:	ec41 0b10 	vmov	d0, r0, r1
 8009d0c:	b002      	add	sp, #8
 8009d0e:	4770      	bx	lr
 8009d10:	7ff00000 	.word	0x7ff00000

08009d14 <__b2d>:
 8009d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d18:	6906      	ldr	r6, [r0, #16]
 8009d1a:	f100 0814 	add.w	r8, r0, #20
 8009d1e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009d22:	1f37      	subs	r7, r6, #4
 8009d24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d28:	4610      	mov	r0, r2
 8009d2a:	f7ff fd4b 	bl	80097c4 <__hi0bits>
 8009d2e:	f1c0 0320 	rsb	r3, r0, #32
 8009d32:	280a      	cmp	r0, #10
 8009d34:	600b      	str	r3, [r1, #0]
 8009d36:	491b      	ldr	r1, [pc, #108]	@ (8009da4 <__b2d+0x90>)
 8009d38:	dc15      	bgt.n	8009d66 <__b2d+0x52>
 8009d3a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d3e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009d42:	45b8      	cmp	r8, r7
 8009d44:	ea43 0501 	orr.w	r5, r3, r1
 8009d48:	bf34      	ite	cc
 8009d4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d4e:	2300      	movcs	r3, #0
 8009d50:	3015      	adds	r0, #21
 8009d52:	fa02 f000 	lsl.w	r0, r2, r0
 8009d56:	fa23 f30c 	lsr.w	r3, r3, ip
 8009d5a:	4303      	orrs	r3, r0
 8009d5c:	461c      	mov	r4, r3
 8009d5e:	ec45 4b10 	vmov	d0, r4, r5
 8009d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d66:	45b8      	cmp	r8, r7
 8009d68:	bf3a      	itte	cc
 8009d6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d6e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009d72:	2300      	movcs	r3, #0
 8009d74:	380b      	subs	r0, #11
 8009d76:	d012      	beq.n	8009d9e <__b2d+0x8a>
 8009d78:	f1c0 0120 	rsb	r1, r0, #32
 8009d7c:	fa23 f401 	lsr.w	r4, r3, r1
 8009d80:	4082      	lsls	r2, r0
 8009d82:	4322      	orrs	r2, r4
 8009d84:	4547      	cmp	r7, r8
 8009d86:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009d8a:	bf8c      	ite	hi
 8009d8c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009d90:	2200      	movls	r2, #0
 8009d92:	4083      	lsls	r3, r0
 8009d94:	40ca      	lsrs	r2, r1
 8009d96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	e7de      	b.n	8009d5c <__b2d+0x48>
 8009d9e:	ea42 0501 	orr.w	r5, r2, r1
 8009da2:	e7db      	b.n	8009d5c <__b2d+0x48>
 8009da4:	3ff00000 	.word	0x3ff00000

08009da8 <__d2b>:
 8009da8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dac:	460f      	mov	r7, r1
 8009dae:	2101      	movs	r1, #1
 8009db0:	ec59 8b10 	vmov	r8, r9, d0
 8009db4:	4616      	mov	r6, r2
 8009db6:	f7ff fc13 	bl	80095e0 <_Balloc>
 8009dba:	4604      	mov	r4, r0
 8009dbc:	b930      	cbnz	r0, 8009dcc <__d2b+0x24>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	4b23      	ldr	r3, [pc, #140]	@ (8009e50 <__d2b+0xa8>)
 8009dc2:	4824      	ldr	r0, [pc, #144]	@ (8009e54 <__d2b+0xac>)
 8009dc4:	f240 310f 	movw	r1, #783	@ 0x30f
 8009dc8:	f000 faf6 	bl	800a3b8 <__assert_func>
 8009dcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dd4:	b10d      	cbz	r5, 8009dda <__d2b+0x32>
 8009dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dda:	9301      	str	r3, [sp, #4]
 8009ddc:	f1b8 0300 	subs.w	r3, r8, #0
 8009de0:	d023      	beq.n	8009e2a <__d2b+0x82>
 8009de2:	4668      	mov	r0, sp
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	f7ff fd0c 	bl	8009802 <__lo0bits>
 8009dea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009dee:	b1d0      	cbz	r0, 8009e26 <__d2b+0x7e>
 8009df0:	f1c0 0320 	rsb	r3, r0, #32
 8009df4:	fa02 f303 	lsl.w	r3, r2, r3
 8009df8:	430b      	orrs	r3, r1
 8009dfa:	40c2      	lsrs	r2, r0
 8009dfc:	6163      	str	r3, [r4, #20]
 8009dfe:	9201      	str	r2, [sp, #4]
 8009e00:	9b01      	ldr	r3, [sp, #4]
 8009e02:	61a3      	str	r3, [r4, #24]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	bf0c      	ite	eq
 8009e08:	2201      	moveq	r2, #1
 8009e0a:	2202      	movne	r2, #2
 8009e0c:	6122      	str	r2, [r4, #16]
 8009e0e:	b1a5      	cbz	r5, 8009e3a <__d2b+0x92>
 8009e10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009e14:	4405      	add	r5, r0
 8009e16:	603d      	str	r5, [r7, #0]
 8009e18:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009e1c:	6030      	str	r0, [r6, #0]
 8009e1e:	4620      	mov	r0, r4
 8009e20:	b003      	add	sp, #12
 8009e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e26:	6161      	str	r1, [r4, #20]
 8009e28:	e7ea      	b.n	8009e00 <__d2b+0x58>
 8009e2a:	a801      	add	r0, sp, #4
 8009e2c:	f7ff fce9 	bl	8009802 <__lo0bits>
 8009e30:	9b01      	ldr	r3, [sp, #4]
 8009e32:	6163      	str	r3, [r4, #20]
 8009e34:	3020      	adds	r0, #32
 8009e36:	2201      	movs	r2, #1
 8009e38:	e7e8      	b.n	8009e0c <__d2b+0x64>
 8009e3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009e42:	6038      	str	r0, [r7, #0]
 8009e44:	6918      	ldr	r0, [r3, #16]
 8009e46:	f7ff fcbd 	bl	80097c4 <__hi0bits>
 8009e4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e4e:	e7e5      	b.n	8009e1c <__d2b+0x74>
 8009e50:	0800ab48 	.word	0x0800ab48
 8009e54:	0800abb9 	.word	0x0800abb9

08009e58 <__ratio>:
 8009e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	e9cd 1000 	strd	r1, r0, [sp]
 8009e62:	a902      	add	r1, sp, #8
 8009e64:	f7ff ff56 	bl	8009d14 <__b2d>
 8009e68:	9800      	ldr	r0, [sp, #0]
 8009e6a:	a903      	add	r1, sp, #12
 8009e6c:	ec55 4b10 	vmov	r4, r5, d0
 8009e70:	f7ff ff50 	bl	8009d14 <__b2d>
 8009e74:	9b01      	ldr	r3, [sp, #4]
 8009e76:	6919      	ldr	r1, [r3, #16]
 8009e78:	9b00      	ldr	r3, [sp, #0]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	1ac9      	subs	r1, r1, r3
 8009e7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009e82:	1a9b      	subs	r3, r3, r2
 8009e84:	ec5b ab10 	vmov	sl, fp, d0
 8009e88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	bfce      	itee	gt
 8009e90:	462a      	movgt	r2, r5
 8009e92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e96:	465a      	movle	r2, fp
 8009e98:	462f      	mov	r7, r5
 8009e9a:	46d9      	mov	r9, fp
 8009e9c:	bfcc      	ite	gt
 8009e9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ea2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009ea6:	464b      	mov	r3, r9
 8009ea8:	4652      	mov	r2, sl
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4639      	mov	r1, r7
 8009eae:	f7f6 fced 	bl	800088c <__aeabi_ddiv>
 8009eb2:	ec41 0b10 	vmov	d0, r0, r1
 8009eb6:	b005      	add	sp, #20
 8009eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ebc <__copybits>:
 8009ebc:	3901      	subs	r1, #1
 8009ebe:	b570      	push	{r4, r5, r6, lr}
 8009ec0:	1149      	asrs	r1, r1, #5
 8009ec2:	6914      	ldr	r4, [r2, #16]
 8009ec4:	3101      	adds	r1, #1
 8009ec6:	f102 0314 	add.w	r3, r2, #20
 8009eca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ece:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ed2:	1f05      	subs	r5, r0, #4
 8009ed4:	42a3      	cmp	r3, r4
 8009ed6:	d30c      	bcc.n	8009ef2 <__copybits+0x36>
 8009ed8:	1aa3      	subs	r3, r4, r2
 8009eda:	3b11      	subs	r3, #17
 8009edc:	f023 0303 	bic.w	r3, r3, #3
 8009ee0:	3211      	adds	r2, #17
 8009ee2:	42a2      	cmp	r2, r4
 8009ee4:	bf88      	it	hi
 8009ee6:	2300      	movhi	r3, #0
 8009ee8:	4418      	add	r0, r3
 8009eea:	2300      	movs	r3, #0
 8009eec:	4288      	cmp	r0, r1
 8009eee:	d305      	bcc.n	8009efc <__copybits+0x40>
 8009ef0:	bd70      	pop	{r4, r5, r6, pc}
 8009ef2:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ef6:	f845 6f04 	str.w	r6, [r5, #4]!
 8009efa:	e7eb      	b.n	8009ed4 <__copybits+0x18>
 8009efc:	f840 3b04 	str.w	r3, [r0], #4
 8009f00:	e7f4      	b.n	8009eec <__copybits+0x30>

08009f02 <__any_on>:
 8009f02:	f100 0214 	add.w	r2, r0, #20
 8009f06:	6900      	ldr	r0, [r0, #16]
 8009f08:	114b      	asrs	r3, r1, #5
 8009f0a:	4298      	cmp	r0, r3
 8009f0c:	b510      	push	{r4, lr}
 8009f0e:	db11      	blt.n	8009f34 <__any_on+0x32>
 8009f10:	dd0a      	ble.n	8009f28 <__any_on+0x26>
 8009f12:	f011 011f 	ands.w	r1, r1, #31
 8009f16:	d007      	beq.n	8009f28 <__any_on+0x26>
 8009f18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f1c:	fa24 f001 	lsr.w	r0, r4, r1
 8009f20:	fa00 f101 	lsl.w	r1, r0, r1
 8009f24:	428c      	cmp	r4, r1
 8009f26:	d10b      	bne.n	8009f40 <__any_on+0x3e>
 8009f28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d803      	bhi.n	8009f38 <__any_on+0x36>
 8009f30:	2000      	movs	r0, #0
 8009f32:	bd10      	pop	{r4, pc}
 8009f34:	4603      	mov	r3, r0
 8009f36:	e7f7      	b.n	8009f28 <__any_on+0x26>
 8009f38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	d0f5      	beq.n	8009f2c <__any_on+0x2a>
 8009f40:	2001      	movs	r0, #1
 8009f42:	e7f6      	b.n	8009f32 <__any_on+0x30>

08009f44 <__ascii_wctomb>:
 8009f44:	4603      	mov	r3, r0
 8009f46:	4608      	mov	r0, r1
 8009f48:	b141      	cbz	r1, 8009f5c <__ascii_wctomb+0x18>
 8009f4a:	2aff      	cmp	r2, #255	@ 0xff
 8009f4c:	d904      	bls.n	8009f58 <__ascii_wctomb+0x14>
 8009f4e:	228a      	movs	r2, #138	@ 0x8a
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	f04f 30ff 	mov.w	r0, #4294967295
 8009f56:	4770      	bx	lr
 8009f58:	700a      	strb	r2, [r1, #0]
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	4770      	bx	lr

08009f5e <__ssputs_r>:
 8009f5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f62:	688e      	ldr	r6, [r1, #8]
 8009f64:	461f      	mov	r7, r3
 8009f66:	42be      	cmp	r6, r7
 8009f68:	680b      	ldr	r3, [r1, #0]
 8009f6a:	4682      	mov	sl, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	4690      	mov	r8, r2
 8009f70:	d82d      	bhi.n	8009fce <__ssputs_r+0x70>
 8009f72:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f76:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f7a:	d026      	beq.n	8009fca <__ssputs_r+0x6c>
 8009f7c:	6965      	ldr	r5, [r4, #20]
 8009f7e:	6909      	ldr	r1, [r1, #16]
 8009f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f84:	eba3 0901 	sub.w	r9, r3, r1
 8009f88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f8c:	1c7b      	adds	r3, r7, #1
 8009f8e:	444b      	add	r3, r9
 8009f90:	106d      	asrs	r5, r5, #1
 8009f92:	429d      	cmp	r5, r3
 8009f94:	bf38      	it	cc
 8009f96:	461d      	movcc	r5, r3
 8009f98:	0553      	lsls	r3, r2, #21
 8009f9a:	d527      	bpl.n	8009fec <__ssputs_r+0x8e>
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	f7ff fa81 	bl	80094a4 <_malloc_r>
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	b360      	cbz	r0, 800a000 <__ssputs_r+0xa2>
 8009fa6:	6921      	ldr	r1, [r4, #16]
 8009fa8:	464a      	mov	r2, r9
 8009faa:	f7fe f868 	bl	800807e <memcpy>
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fb8:	81a3      	strh	r3, [r4, #12]
 8009fba:	6126      	str	r6, [r4, #16]
 8009fbc:	6165      	str	r5, [r4, #20]
 8009fbe:	444e      	add	r6, r9
 8009fc0:	eba5 0509 	sub.w	r5, r5, r9
 8009fc4:	6026      	str	r6, [r4, #0]
 8009fc6:	60a5      	str	r5, [r4, #8]
 8009fc8:	463e      	mov	r6, r7
 8009fca:	42be      	cmp	r6, r7
 8009fcc:	d900      	bls.n	8009fd0 <__ssputs_r+0x72>
 8009fce:	463e      	mov	r6, r7
 8009fd0:	6820      	ldr	r0, [r4, #0]
 8009fd2:	4632      	mov	r2, r6
 8009fd4:	4641      	mov	r1, r8
 8009fd6:	f000 f9c5 	bl	800a364 <memmove>
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	1b9b      	subs	r3, r3, r6
 8009fde:	60a3      	str	r3, [r4, #8]
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	4433      	add	r3, r6
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fec:	462a      	mov	r2, r5
 8009fee:	f000 fa15 	bl	800a41c <_realloc_r>
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d1e0      	bne.n	8009fba <__ssputs_r+0x5c>
 8009ff8:	6921      	ldr	r1, [r4, #16]
 8009ffa:	4650      	mov	r0, sl
 8009ffc:	f7fe fea4 	bl	8008d48 <_free_r>
 800a000:	230c      	movs	r3, #12
 800a002:	f8ca 3000 	str.w	r3, [sl]
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	f04f 30ff 	mov.w	r0, #4294967295
 800a012:	e7e9      	b.n	8009fe8 <__ssputs_r+0x8a>

0800a014 <_svfiprintf_r>:
 800a014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a018:	4698      	mov	r8, r3
 800a01a:	898b      	ldrh	r3, [r1, #12]
 800a01c:	061b      	lsls	r3, r3, #24
 800a01e:	b09d      	sub	sp, #116	@ 0x74
 800a020:	4607      	mov	r7, r0
 800a022:	460d      	mov	r5, r1
 800a024:	4614      	mov	r4, r2
 800a026:	d510      	bpl.n	800a04a <_svfiprintf_r+0x36>
 800a028:	690b      	ldr	r3, [r1, #16]
 800a02a:	b973      	cbnz	r3, 800a04a <_svfiprintf_r+0x36>
 800a02c:	2140      	movs	r1, #64	@ 0x40
 800a02e:	f7ff fa39 	bl	80094a4 <_malloc_r>
 800a032:	6028      	str	r0, [r5, #0]
 800a034:	6128      	str	r0, [r5, #16]
 800a036:	b930      	cbnz	r0, 800a046 <_svfiprintf_r+0x32>
 800a038:	230c      	movs	r3, #12
 800a03a:	603b      	str	r3, [r7, #0]
 800a03c:	f04f 30ff 	mov.w	r0, #4294967295
 800a040:	b01d      	add	sp, #116	@ 0x74
 800a042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a046:	2340      	movs	r3, #64	@ 0x40
 800a048:	616b      	str	r3, [r5, #20]
 800a04a:	2300      	movs	r3, #0
 800a04c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a04e:	2320      	movs	r3, #32
 800a050:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a054:	f8cd 800c 	str.w	r8, [sp, #12]
 800a058:	2330      	movs	r3, #48	@ 0x30
 800a05a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a1f8 <_svfiprintf_r+0x1e4>
 800a05e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a062:	f04f 0901 	mov.w	r9, #1
 800a066:	4623      	mov	r3, r4
 800a068:	469a      	mov	sl, r3
 800a06a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a06e:	b10a      	cbz	r2, 800a074 <_svfiprintf_r+0x60>
 800a070:	2a25      	cmp	r2, #37	@ 0x25
 800a072:	d1f9      	bne.n	800a068 <_svfiprintf_r+0x54>
 800a074:	ebba 0b04 	subs.w	fp, sl, r4
 800a078:	d00b      	beq.n	800a092 <_svfiprintf_r+0x7e>
 800a07a:	465b      	mov	r3, fp
 800a07c:	4622      	mov	r2, r4
 800a07e:	4629      	mov	r1, r5
 800a080:	4638      	mov	r0, r7
 800a082:	f7ff ff6c 	bl	8009f5e <__ssputs_r>
 800a086:	3001      	adds	r0, #1
 800a088:	f000 80a7 	beq.w	800a1da <_svfiprintf_r+0x1c6>
 800a08c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a08e:	445a      	add	r2, fp
 800a090:	9209      	str	r2, [sp, #36]	@ 0x24
 800a092:	f89a 3000 	ldrb.w	r3, [sl]
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 809f 	beq.w	800a1da <_svfiprintf_r+0x1c6>
 800a09c:	2300      	movs	r3, #0
 800a09e:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0a6:	f10a 0a01 	add.w	sl, sl, #1
 800a0aa:	9304      	str	r3, [sp, #16]
 800a0ac:	9307      	str	r3, [sp, #28]
 800a0ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0b4:	4654      	mov	r4, sl
 800a0b6:	2205      	movs	r2, #5
 800a0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0bc:	484e      	ldr	r0, [pc, #312]	@ (800a1f8 <_svfiprintf_r+0x1e4>)
 800a0be:	f7f6 f8a7 	bl	8000210 <memchr>
 800a0c2:	9a04      	ldr	r2, [sp, #16]
 800a0c4:	b9d8      	cbnz	r0, 800a0fe <_svfiprintf_r+0xea>
 800a0c6:	06d0      	lsls	r0, r2, #27
 800a0c8:	bf44      	itt	mi
 800a0ca:	2320      	movmi	r3, #32
 800a0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0d0:	0711      	lsls	r1, r2, #28
 800a0d2:	bf44      	itt	mi
 800a0d4:	232b      	movmi	r3, #43	@ 0x2b
 800a0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0da:	f89a 3000 	ldrb.w	r3, [sl]
 800a0de:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0e0:	d015      	beq.n	800a10e <_svfiprintf_r+0xfa>
 800a0e2:	9a07      	ldr	r2, [sp, #28]
 800a0e4:	4654      	mov	r4, sl
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	f04f 0c0a 	mov.w	ip, #10
 800a0ec:	4621      	mov	r1, r4
 800a0ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0f2:	3b30      	subs	r3, #48	@ 0x30
 800a0f4:	2b09      	cmp	r3, #9
 800a0f6:	d94b      	bls.n	800a190 <_svfiprintf_r+0x17c>
 800a0f8:	b1b0      	cbz	r0, 800a128 <_svfiprintf_r+0x114>
 800a0fa:	9207      	str	r2, [sp, #28]
 800a0fc:	e014      	b.n	800a128 <_svfiprintf_r+0x114>
 800a0fe:	eba0 0308 	sub.w	r3, r0, r8
 800a102:	fa09 f303 	lsl.w	r3, r9, r3
 800a106:	4313      	orrs	r3, r2
 800a108:	9304      	str	r3, [sp, #16]
 800a10a:	46a2      	mov	sl, r4
 800a10c:	e7d2      	b.n	800a0b4 <_svfiprintf_r+0xa0>
 800a10e:	9b03      	ldr	r3, [sp, #12]
 800a110:	1d19      	adds	r1, r3, #4
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	9103      	str	r1, [sp, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	bfbb      	ittet	lt
 800a11a:	425b      	neglt	r3, r3
 800a11c:	f042 0202 	orrlt.w	r2, r2, #2
 800a120:	9307      	strge	r3, [sp, #28]
 800a122:	9307      	strlt	r3, [sp, #28]
 800a124:	bfb8      	it	lt
 800a126:	9204      	strlt	r2, [sp, #16]
 800a128:	7823      	ldrb	r3, [r4, #0]
 800a12a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a12c:	d10a      	bne.n	800a144 <_svfiprintf_r+0x130>
 800a12e:	7863      	ldrb	r3, [r4, #1]
 800a130:	2b2a      	cmp	r3, #42	@ 0x2a
 800a132:	d132      	bne.n	800a19a <_svfiprintf_r+0x186>
 800a134:	9b03      	ldr	r3, [sp, #12]
 800a136:	1d1a      	adds	r2, r3, #4
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	9203      	str	r2, [sp, #12]
 800a13c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a140:	3402      	adds	r4, #2
 800a142:	9305      	str	r3, [sp, #20]
 800a144:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a208 <_svfiprintf_r+0x1f4>
 800a148:	7821      	ldrb	r1, [r4, #0]
 800a14a:	2203      	movs	r2, #3
 800a14c:	4650      	mov	r0, sl
 800a14e:	f7f6 f85f 	bl	8000210 <memchr>
 800a152:	b138      	cbz	r0, 800a164 <_svfiprintf_r+0x150>
 800a154:	9b04      	ldr	r3, [sp, #16]
 800a156:	eba0 000a 	sub.w	r0, r0, sl
 800a15a:	2240      	movs	r2, #64	@ 0x40
 800a15c:	4082      	lsls	r2, r0
 800a15e:	4313      	orrs	r3, r2
 800a160:	3401      	adds	r4, #1
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a168:	4824      	ldr	r0, [pc, #144]	@ (800a1fc <_svfiprintf_r+0x1e8>)
 800a16a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a16e:	2206      	movs	r2, #6
 800a170:	f7f6 f84e 	bl	8000210 <memchr>
 800a174:	2800      	cmp	r0, #0
 800a176:	d036      	beq.n	800a1e6 <_svfiprintf_r+0x1d2>
 800a178:	4b21      	ldr	r3, [pc, #132]	@ (800a200 <_svfiprintf_r+0x1ec>)
 800a17a:	bb1b      	cbnz	r3, 800a1c4 <_svfiprintf_r+0x1b0>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	3307      	adds	r3, #7
 800a180:	f023 0307 	bic.w	r3, r3, #7
 800a184:	3308      	adds	r3, #8
 800a186:	9303      	str	r3, [sp, #12]
 800a188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18a:	4433      	add	r3, r6
 800a18c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a18e:	e76a      	b.n	800a066 <_svfiprintf_r+0x52>
 800a190:	fb0c 3202 	mla	r2, ip, r2, r3
 800a194:	460c      	mov	r4, r1
 800a196:	2001      	movs	r0, #1
 800a198:	e7a8      	b.n	800a0ec <_svfiprintf_r+0xd8>
 800a19a:	2300      	movs	r3, #0
 800a19c:	3401      	adds	r4, #1
 800a19e:	9305      	str	r3, [sp, #20]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f04f 0c0a 	mov.w	ip, #10
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ac:	3a30      	subs	r2, #48	@ 0x30
 800a1ae:	2a09      	cmp	r2, #9
 800a1b0:	d903      	bls.n	800a1ba <_svfiprintf_r+0x1a6>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0c6      	beq.n	800a144 <_svfiprintf_r+0x130>
 800a1b6:	9105      	str	r1, [sp, #20]
 800a1b8:	e7c4      	b.n	800a144 <_svfiprintf_r+0x130>
 800a1ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1be:	4604      	mov	r4, r0
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e7f0      	b.n	800a1a6 <_svfiprintf_r+0x192>
 800a1c4:	ab03      	add	r3, sp, #12
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	462a      	mov	r2, r5
 800a1ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a204 <_svfiprintf_r+0x1f0>)
 800a1cc:	a904      	add	r1, sp, #16
 800a1ce:	4638      	mov	r0, r7
 800a1d0:	f7fd f9e6 	bl	80075a0 <_printf_float>
 800a1d4:	1c42      	adds	r2, r0, #1
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	d1d6      	bne.n	800a188 <_svfiprintf_r+0x174>
 800a1da:	89ab      	ldrh	r3, [r5, #12]
 800a1dc:	065b      	lsls	r3, r3, #25
 800a1de:	f53f af2d 	bmi.w	800a03c <_svfiprintf_r+0x28>
 800a1e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1e4:	e72c      	b.n	800a040 <_svfiprintf_r+0x2c>
 800a1e6:	ab03      	add	r3, sp, #12
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	462a      	mov	r2, r5
 800a1ec:	4b05      	ldr	r3, [pc, #20]	@ (800a204 <_svfiprintf_r+0x1f0>)
 800a1ee:	a904      	add	r1, sp, #16
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	f7fd fc6d 	bl	8007ad0 <_printf_i>
 800a1f6:	e7ed      	b.n	800a1d4 <_svfiprintf_r+0x1c0>
 800a1f8:	0800ae11 	.word	0x0800ae11
 800a1fc:	0800ae1b 	.word	0x0800ae1b
 800a200:	080075a1 	.word	0x080075a1
 800a204:	08009f5f 	.word	0x08009f5f
 800a208:	0800ae17 	.word	0x0800ae17

0800a20c <__sflush_r>:
 800a20c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a214:	0716      	lsls	r6, r2, #28
 800a216:	4605      	mov	r5, r0
 800a218:	460c      	mov	r4, r1
 800a21a:	d454      	bmi.n	800a2c6 <__sflush_r+0xba>
 800a21c:	684b      	ldr	r3, [r1, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	dc02      	bgt.n	800a228 <__sflush_r+0x1c>
 800a222:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a224:	2b00      	cmp	r3, #0
 800a226:	dd48      	ble.n	800a2ba <__sflush_r+0xae>
 800a228:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a22a:	2e00      	cmp	r6, #0
 800a22c:	d045      	beq.n	800a2ba <__sflush_r+0xae>
 800a22e:	2300      	movs	r3, #0
 800a230:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a234:	682f      	ldr	r7, [r5, #0]
 800a236:	6a21      	ldr	r1, [r4, #32]
 800a238:	602b      	str	r3, [r5, #0]
 800a23a:	d030      	beq.n	800a29e <__sflush_r+0x92>
 800a23c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	0759      	lsls	r1, r3, #29
 800a242:	d505      	bpl.n	800a250 <__sflush_r+0x44>
 800a244:	6863      	ldr	r3, [r4, #4]
 800a246:	1ad2      	subs	r2, r2, r3
 800a248:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a24a:	b10b      	cbz	r3, 800a250 <__sflush_r+0x44>
 800a24c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a24e:	1ad2      	subs	r2, r2, r3
 800a250:	2300      	movs	r3, #0
 800a252:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a254:	6a21      	ldr	r1, [r4, #32]
 800a256:	4628      	mov	r0, r5
 800a258:	47b0      	blx	r6
 800a25a:	1c43      	adds	r3, r0, #1
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	d106      	bne.n	800a26e <__sflush_r+0x62>
 800a260:	6829      	ldr	r1, [r5, #0]
 800a262:	291d      	cmp	r1, #29
 800a264:	d82b      	bhi.n	800a2be <__sflush_r+0xb2>
 800a266:	4a2a      	ldr	r2, [pc, #168]	@ (800a310 <__sflush_r+0x104>)
 800a268:	410a      	asrs	r2, r1
 800a26a:	07d6      	lsls	r6, r2, #31
 800a26c:	d427      	bmi.n	800a2be <__sflush_r+0xb2>
 800a26e:	2200      	movs	r2, #0
 800a270:	6062      	str	r2, [r4, #4]
 800a272:	04d9      	lsls	r1, r3, #19
 800a274:	6922      	ldr	r2, [r4, #16]
 800a276:	6022      	str	r2, [r4, #0]
 800a278:	d504      	bpl.n	800a284 <__sflush_r+0x78>
 800a27a:	1c42      	adds	r2, r0, #1
 800a27c:	d101      	bne.n	800a282 <__sflush_r+0x76>
 800a27e:	682b      	ldr	r3, [r5, #0]
 800a280:	b903      	cbnz	r3, 800a284 <__sflush_r+0x78>
 800a282:	6560      	str	r0, [r4, #84]	@ 0x54
 800a284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a286:	602f      	str	r7, [r5, #0]
 800a288:	b1b9      	cbz	r1, 800a2ba <__sflush_r+0xae>
 800a28a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a28e:	4299      	cmp	r1, r3
 800a290:	d002      	beq.n	800a298 <__sflush_r+0x8c>
 800a292:	4628      	mov	r0, r5
 800a294:	f7fe fd58 	bl	8008d48 <_free_r>
 800a298:	2300      	movs	r3, #0
 800a29a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a29c:	e00d      	b.n	800a2ba <__sflush_r+0xae>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	47b0      	blx	r6
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	1c50      	adds	r0, r2, #1
 800a2a8:	d1c9      	bne.n	800a23e <__sflush_r+0x32>
 800a2aa:	682b      	ldr	r3, [r5, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d0c6      	beq.n	800a23e <__sflush_r+0x32>
 800a2b0:	2b1d      	cmp	r3, #29
 800a2b2:	d001      	beq.n	800a2b8 <__sflush_r+0xac>
 800a2b4:	2b16      	cmp	r3, #22
 800a2b6:	d11e      	bne.n	800a2f6 <__sflush_r+0xea>
 800a2b8:	602f      	str	r7, [r5, #0]
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	e022      	b.n	800a304 <__sflush_r+0xf8>
 800a2be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2c2:	b21b      	sxth	r3, r3
 800a2c4:	e01b      	b.n	800a2fe <__sflush_r+0xf2>
 800a2c6:	690f      	ldr	r7, [r1, #16]
 800a2c8:	2f00      	cmp	r7, #0
 800a2ca:	d0f6      	beq.n	800a2ba <__sflush_r+0xae>
 800a2cc:	0793      	lsls	r3, r2, #30
 800a2ce:	680e      	ldr	r6, [r1, #0]
 800a2d0:	bf08      	it	eq
 800a2d2:	694b      	ldreq	r3, [r1, #20]
 800a2d4:	600f      	str	r7, [r1, #0]
 800a2d6:	bf18      	it	ne
 800a2d8:	2300      	movne	r3, #0
 800a2da:	eba6 0807 	sub.w	r8, r6, r7
 800a2de:	608b      	str	r3, [r1, #8]
 800a2e0:	f1b8 0f00 	cmp.w	r8, #0
 800a2e4:	dde9      	ble.n	800a2ba <__sflush_r+0xae>
 800a2e6:	6a21      	ldr	r1, [r4, #32]
 800a2e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a2ea:	4643      	mov	r3, r8
 800a2ec:	463a      	mov	r2, r7
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b0      	blx	r6
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	dc08      	bgt.n	800a308 <__sflush_r+0xfc>
 800a2f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2fe:	81a3      	strh	r3, [r4, #12]
 800a300:	f04f 30ff 	mov.w	r0, #4294967295
 800a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a308:	4407      	add	r7, r0
 800a30a:	eba8 0800 	sub.w	r8, r8, r0
 800a30e:	e7e7      	b.n	800a2e0 <__sflush_r+0xd4>
 800a310:	dfbffffe 	.word	0xdfbffffe

0800a314 <_fflush_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	690b      	ldr	r3, [r1, #16]
 800a318:	4605      	mov	r5, r0
 800a31a:	460c      	mov	r4, r1
 800a31c:	b913      	cbnz	r3, 800a324 <_fflush_r+0x10>
 800a31e:	2500      	movs	r5, #0
 800a320:	4628      	mov	r0, r5
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	b118      	cbz	r0, 800a32e <_fflush_r+0x1a>
 800a326:	6a03      	ldr	r3, [r0, #32]
 800a328:	b90b      	cbnz	r3, 800a32e <_fflush_r+0x1a>
 800a32a:	f7fd fd7d 	bl	8007e28 <__sinit>
 800a32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0f3      	beq.n	800a31e <_fflush_r+0xa>
 800a336:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a338:	07d0      	lsls	r0, r2, #31
 800a33a:	d404      	bmi.n	800a346 <_fflush_r+0x32>
 800a33c:	0599      	lsls	r1, r3, #22
 800a33e:	d402      	bmi.n	800a346 <_fflush_r+0x32>
 800a340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a342:	f7fd fe9a 	bl	800807a <__retarget_lock_acquire_recursive>
 800a346:	4628      	mov	r0, r5
 800a348:	4621      	mov	r1, r4
 800a34a:	f7ff ff5f 	bl	800a20c <__sflush_r>
 800a34e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a350:	07da      	lsls	r2, r3, #31
 800a352:	4605      	mov	r5, r0
 800a354:	d4e4      	bmi.n	800a320 <_fflush_r+0xc>
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	059b      	lsls	r3, r3, #22
 800a35a:	d4e1      	bmi.n	800a320 <_fflush_r+0xc>
 800a35c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a35e:	f7fd fe8d 	bl	800807c <__retarget_lock_release_recursive>
 800a362:	e7dd      	b.n	800a320 <_fflush_r+0xc>

0800a364 <memmove>:
 800a364:	4288      	cmp	r0, r1
 800a366:	b510      	push	{r4, lr}
 800a368:	eb01 0402 	add.w	r4, r1, r2
 800a36c:	d902      	bls.n	800a374 <memmove+0x10>
 800a36e:	4284      	cmp	r4, r0
 800a370:	4623      	mov	r3, r4
 800a372:	d807      	bhi.n	800a384 <memmove+0x20>
 800a374:	1e43      	subs	r3, r0, #1
 800a376:	42a1      	cmp	r1, r4
 800a378:	d008      	beq.n	800a38c <memmove+0x28>
 800a37a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a37e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a382:	e7f8      	b.n	800a376 <memmove+0x12>
 800a384:	4402      	add	r2, r0
 800a386:	4601      	mov	r1, r0
 800a388:	428a      	cmp	r2, r1
 800a38a:	d100      	bne.n	800a38e <memmove+0x2a>
 800a38c:	bd10      	pop	{r4, pc}
 800a38e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a396:	e7f7      	b.n	800a388 <memmove+0x24>

0800a398 <_sbrk_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4d06      	ldr	r5, [pc, #24]	@ (800a3b4 <_sbrk_r+0x1c>)
 800a39c:	2300      	movs	r3, #0
 800a39e:	4604      	mov	r4, r0
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	602b      	str	r3, [r5, #0]
 800a3a4:	f7f7 fd44 	bl	8001e30 <_sbrk>
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	d102      	bne.n	800a3b2 <_sbrk_r+0x1a>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	b103      	cbz	r3, 800a3b2 <_sbrk_r+0x1a>
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	20000b6c 	.word	0x20000b6c

0800a3b8 <__assert_func>:
 800a3b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3ba:	4614      	mov	r4, r2
 800a3bc:	461a      	mov	r2, r3
 800a3be:	4b09      	ldr	r3, [pc, #36]	@ (800a3e4 <__assert_func+0x2c>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4605      	mov	r5, r0
 800a3c4:	68d8      	ldr	r0, [r3, #12]
 800a3c6:	b954      	cbnz	r4, 800a3de <__assert_func+0x26>
 800a3c8:	4b07      	ldr	r3, [pc, #28]	@ (800a3e8 <__assert_func+0x30>)
 800a3ca:	461c      	mov	r4, r3
 800a3cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3d0:	9100      	str	r1, [sp, #0]
 800a3d2:	462b      	mov	r3, r5
 800a3d4:	4905      	ldr	r1, [pc, #20]	@ (800a3ec <__assert_func+0x34>)
 800a3d6:	f000 f84f 	bl	800a478 <fiprintf>
 800a3da:	f000 f85f 	bl	800a49c <abort>
 800a3de:	4b04      	ldr	r3, [pc, #16]	@ (800a3f0 <__assert_func+0x38>)
 800a3e0:	e7f4      	b.n	800a3cc <__assert_func+0x14>
 800a3e2:	bf00      	nop
 800a3e4:	20000184 	.word	0x20000184
 800a3e8:	0800ae5d 	.word	0x0800ae5d
 800a3ec:	0800ae2f 	.word	0x0800ae2f
 800a3f0:	0800ae22 	.word	0x0800ae22

0800a3f4 <_calloc_r>:
 800a3f4:	b570      	push	{r4, r5, r6, lr}
 800a3f6:	fba1 5402 	umull	r5, r4, r1, r2
 800a3fa:	b93c      	cbnz	r4, 800a40c <_calloc_r+0x18>
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	f7ff f851 	bl	80094a4 <_malloc_r>
 800a402:	4606      	mov	r6, r0
 800a404:	b928      	cbnz	r0, 800a412 <_calloc_r+0x1e>
 800a406:	2600      	movs	r6, #0
 800a408:	4630      	mov	r0, r6
 800a40a:	bd70      	pop	{r4, r5, r6, pc}
 800a40c:	220c      	movs	r2, #12
 800a40e:	6002      	str	r2, [r0, #0]
 800a410:	e7f9      	b.n	800a406 <_calloc_r+0x12>
 800a412:	462a      	mov	r2, r5
 800a414:	4621      	mov	r1, r4
 800a416:	f7fd fda0 	bl	8007f5a <memset>
 800a41a:	e7f5      	b.n	800a408 <_calloc_r+0x14>

0800a41c <_realloc_r>:
 800a41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a420:	4680      	mov	r8, r0
 800a422:	4615      	mov	r5, r2
 800a424:	460c      	mov	r4, r1
 800a426:	b921      	cbnz	r1, 800a432 <_realloc_r+0x16>
 800a428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a42c:	4611      	mov	r1, r2
 800a42e:	f7ff b839 	b.w	80094a4 <_malloc_r>
 800a432:	b92a      	cbnz	r2, 800a440 <_realloc_r+0x24>
 800a434:	f7fe fc88 	bl	8008d48 <_free_r>
 800a438:	2400      	movs	r4, #0
 800a43a:	4620      	mov	r0, r4
 800a43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a440:	f000 f833 	bl	800a4aa <_malloc_usable_size_r>
 800a444:	4285      	cmp	r5, r0
 800a446:	4606      	mov	r6, r0
 800a448:	d802      	bhi.n	800a450 <_realloc_r+0x34>
 800a44a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a44e:	d8f4      	bhi.n	800a43a <_realloc_r+0x1e>
 800a450:	4629      	mov	r1, r5
 800a452:	4640      	mov	r0, r8
 800a454:	f7ff f826 	bl	80094a4 <_malloc_r>
 800a458:	4607      	mov	r7, r0
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d0ec      	beq.n	800a438 <_realloc_r+0x1c>
 800a45e:	42b5      	cmp	r5, r6
 800a460:	462a      	mov	r2, r5
 800a462:	4621      	mov	r1, r4
 800a464:	bf28      	it	cs
 800a466:	4632      	movcs	r2, r6
 800a468:	f7fd fe09 	bl	800807e <memcpy>
 800a46c:	4621      	mov	r1, r4
 800a46e:	4640      	mov	r0, r8
 800a470:	f7fe fc6a 	bl	8008d48 <_free_r>
 800a474:	463c      	mov	r4, r7
 800a476:	e7e0      	b.n	800a43a <_realloc_r+0x1e>

0800a478 <fiprintf>:
 800a478:	b40e      	push	{r1, r2, r3}
 800a47a:	b503      	push	{r0, r1, lr}
 800a47c:	4601      	mov	r1, r0
 800a47e:	ab03      	add	r3, sp, #12
 800a480:	4805      	ldr	r0, [pc, #20]	@ (800a498 <fiprintf+0x20>)
 800a482:	f853 2b04 	ldr.w	r2, [r3], #4
 800a486:	6800      	ldr	r0, [r0, #0]
 800a488:	9301      	str	r3, [sp, #4]
 800a48a:	f000 f83f 	bl	800a50c <_vfiprintf_r>
 800a48e:	b002      	add	sp, #8
 800a490:	f85d eb04 	ldr.w	lr, [sp], #4
 800a494:	b003      	add	sp, #12
 800a496:	4770      	bx	lr
 800a498:	20000184 	.word	0x20000184

0800a49c <abort>:
 800a49c:	b508      	push	{r3, lr}
 800a49e:	2006      	movs	r0, #6
 800a4a0:	f000 fa08 	bl	800a8b4 <raise>
 800a4a4:	2001      	movs	r0, #1
 800a4a6:	f7f7 fc4b 	bl	8001d40 <_exit>

0800a4aa <_malloc_usable_size_r>:
 800a4aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ae:	1f18      	subs	r0, r3, #4
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bfbc      	itt	lt
 800a4b4:	580b      	ldrlt	r3, [r1, r0]
 800a4b6:	18c0      	addlt	r0, r0, r3
 800a4b8:	4770      	bx	lr

0800a4ba <__sfputc_r>:
 800a4ba:	6893      	ldr	r3, [r2, #8]
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	b410      	push	{r4}
 800a4c2:	6093      	str	r3, [r2, #8]
 800a4c4:	da08      	bge.n	800a4d8 <__sfputc_r+0x1e>
 800a4c6:	6994      	ldr	r4, [r2, #24]
 800a4c8:	42a3      	cmp	r3, r4
 800a4ca:	db01      	blt.n	800a4d0 <__sfputc_r+0x16>
 800a4cc:	290a      	cmp	r1, #10
 800a4ce:	d103      	bne.n	800a4d8 <__sfputc_r+0x1e>
 800a4d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4d4:	f000 b932 	b.w	800a73c <__swbuf_r>
 800a4d8:	6813      	ldr	r3, [r2, #0]
 800a4da:	1c58      	adds	r0, r3, #1
 800a4dc:	6010      	str	r0, [r2, #0]
 800a4de:	7019      	strb	r1, [r3, #0]
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <__sfputs_r>:
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	460f      	mov	r7, r1
 800a4ee:	4614      	mov	r4, r2
 800a4f0:	18d5      	adds	r5, r2, r3
 800a4f2:	42ac      	cmp	r4, r5
 800a4f4:	d101      	bne.n	800a4fa <__sfputs_r+0x12>
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	e007      	b.n	800a50a <__sfputs_r+0x22>
 800a4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fe:	463a      	mov	r2, r7
 800a500:	4630      	mov	r0, r6
 800a502:	f7ff ffda 	bl	800a4ba <__sfputc_r>
 800a506:	1c43      	adds	r3, r0, #1
 800a508:	d1f3      	bne.n	800a4f2 <__sfputs_r+0xa>
 800a50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a50c <_vfiprintf_r>:
 800a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a510:	460d      	mov	r5, r1
 800a512:	b09d      	sub	sp, #116	@ 0x74
 800a514:	4614      	mov	r4, r2
 800a516:	4698      	mov	r8, r3
 800a518:	4606      	mov	r6, r0
 800a51a:	b118      	cbz	r0, 800a524 <_vfiprintf_r+0x18>
 800a51c:	6a03      	ldr	r3, [r0, #32]
 800a51e:	b90b      	cbnz	r3, 800a524 <_vfiprintf_r+0x18>
 800a520:	f7fd fc82 	bl	8007e28 <__sinit>
 800a524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a526:	07d9      	lsls	r1, r3, #31
 800a528:	d405      	bmi.n	800a536 <_vfiprintf_r+0x2a>
 800a52a:	89ab      	ldrh	r3, [r5, #12]
 800a52c:	059a      	lsls	r2, r3, #22
 800a52e:	d402      	bmi.n	800a536 <_vfiprintf_r+0x2a>
 800a530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a532:	f7fd fda2 	bl	800807a <__retarget_lock_acquire_recursive>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	071b      	lsls	r3, r3, #28
 800a53a:	d501      	bpl.n	800a540 <_vfiprintf_r+0x34>
 800a53c:	692b      	ldr	r3, [r5, #16]
 800a53e:	b99b      	cbnz	r3, 800a568 <_vfiprintf_r+0x5c>
 800a540:	4629      	mov	r1, r5
 800a542:	4630      	mov	r0, r6
 800a544:	f000 f938 	bl	800a7b8 <__swsetup_r>
 800a548:	b170      	cbz	r0, 800a568 <_vfiprintf_r+0x5c>
 800a54a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a54c:	07dc      	lsls	r4, r3, #31
 800a54e:	d504      	bpl.n	800a55a <_vfiprintf_r+0x4e>
 800a550:	f04f 30ff 	mov.w	r0, #4294967295
 800a554:	b01d      	add	sp, #116	@ 0x74
 800a556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55a:	89ab      	ldrh	r3, [r5, #12]
 800a55c:	0598      	lsls	r0, r3, #22
 800a55e:	d4f7      	bmi.n	800a550 <_vfiprintf_r+0x44>
 800a560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a562:	f7fd fd8b 	bl	800807c <__retarget_lock_release_recursive>
 800a566:	e7f3      	b.n	800a550 <_vfiprintf_r+0x44>
 800a568:	2300      	movs	r3, #0
 800a56a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a56c:	2320      	movs	r3, #32
 800a56e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a572:	f8cd 800c 	str.w	r8, [sp, #12]
 800a576:	2330      	movs	r3, #48	@ 0x30
 800a578:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a728 <_vfiprintf_r+0x21c>
 800a57c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a580:	f04f 0901 	mov.w	r9, #1
 800a584:	4623      	mov	r3, r4
 800a586:	469a      	mov	sl, r3
 800a588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a58c:	b10a      	cbz	r2, 800a592 <_vfiprintf_r+0x86>
 800a58e:	2a25      	cmp	r2, #37	@ 0x25
 800a590:	d1f9      	bne.n	800a586 <_vfiprintf_r+0x7a>
 800a592:	ebba 0b04 	subs.w	fp, sl, r4
 800a596:	d00b      	beq.n	800a5b0 <_vfiprintf_r+0xa4>
 800a598:	465b      	mov	r3, fp
 800a59a:	4622      	mov	r2, r4
 800a59c:	4629      	mov	r1, r5
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f7ff ffa2 	bl	800a4e8 <__sfputs_r>
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	f000 80a7 	beq.w	800a6f8 <_vfiprintf_r+0x1ec>
 800a5aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ac:	445a      	add	r2, fp
 800a5ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 809f 	beq.w	800a6f8 <_vfiprintf_r+0x1ec>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5c4:	f10a 0a01 	add.w	sl, sl, #1
 800a5c8:	9304      	str	r3, [sp, #16]
 800a5ca:	9307      	str	r3, [sp, #28]
 800a5cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5d2:	4654      	mov	r4, sl
 800a5d4:	2205      	movs	r2, #5
 800a5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5da:	4853      	ldr	r0, [pc, #332]	@ (800a728 <_vfiprintf_r+0x21c>)
 800a5dc:	f7f5 fe18 	bl	8000210 <memchr>
 800a5e0:	9a04      	ldr	r2, [sp, #16]
 800a5e2:	b9d8      	cbnz	r0, 800a61c <_vfiprintf_r+0x110>
 800a5e4:	06d1      	lsls	r1, r2, #27
 800a5e6:	bf44      	itt	mi
 800a5e8:	2320      	movmi	r3, #32
 800a5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5ee:	0713      	lsls	r3, r2, #28
 800a5f0:	bf44      	itt	mi
 800a5f2:	232b      	movmi	r3, #43	@ 0x2b
 800a5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5fe:	d015      	beq.n	800a62c <_vfiprintf_r+0x120>
 800a600:	9a07      	ldr	r2, [sp, #28]
 800a602:	4654      	mov	r4, sl
 800a604:	2000      	movs	r0, #0
 800a606:	f04f 0c0a 	mov.w	ip, #10
 800a60a:	4621      	mov	r1, r4
 800a60c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a610:	3b30      	subs	r3, #48	@ 0x30
 800a612:	2b09      	cmp	r3, #9
 800a614:	d94b      	bls.n	800a6ae <_vfiprintf_r+0x1a2>
 800a616:	b1b0      	cbz	r0, 800a646 <_vfiprintf_r+0x13a>
 800a618:	9207      	str	r2, [sp, #28]
 800a61a:	e014      	b.n	800a646 <_vfiprintf_r+0x13a>
 800a61c:	eba0 0308 	sub.w	r3, r0, r8
 800a620:	fa09 f303 	lsl.w	r3, r9, r3
 800a624:	4313      	orrs	r3, r2
 800a626:	9304      	str	r3, [sp, #16]
 800a628:	46a2      	mov	sl, r4
 800a62a:	e7d2      	b.n	800a5d2 <_vfiprintf_r+0xc6>
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	1d19      	adds	r1, r3, #4
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	9103      	str	r1, [sp, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	bfbb      	ittet	lt
 800a638:	425b      	neglt	r3, r3
 800a63a:	f042 0202 	orrlt.w	r2, r2, #2
 800a63e:	9307      	strge	r3, [sp, #28]
 800a640:	9307      	strlt	r3, [sp, #28]
 800a642:	bfb8      	it	lt
 800a644:	9204      	strlt	r2, [sp, #16]
 800a646:	7823      	ldrb	r3, [r4, #0]
 800a648:	2b2e      	cmp	r3, #46	@ 0x2e
 800a64a:	d10a      	bne.n	800a662 <_vfiprintf_r+0x156>
 800a64c:	7863      	ldrb	r3, [r4, #1]
 800a64e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a650:	d132      	bne.n	800a6b8 <_vfiprintf_r+0x1ac>
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	1d1a      	adds	r2, r3, #4
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	9203      	str	r2, [sp, #12]
 800a65a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a65e:	3402      	adds	r4, #2
 800a660:	9305      	str	r3, [sp, #20]
 800a662:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a738 <_vfiprintf_r+0x22c>
 800a666:	7821      	ldrb	r1, [r4, #0]
 800a668:	2203      	movs	r2, #3
 800a66a:	4650      	mov	r0, sl
 800a66c:	f7f5 fdd0 	bl	8000210 <memchr>
 800a670:	b138      	cbz	r0, 800a682 <_vfiprintf_r+0x176>
 800a672:	9b04      	ldr	r3, [sp, #16]
 800a674:	eba0 000a 	sub.w	r0, r0, sl
 800a678:	2240      	movs	r2, #64	@ 0x40
 800a67a:	4082      	lsls	r2, r0
 800a67c:	4313      	orrs	r3, r2
 800a67e:	3401      	adds	r4, #1
 800a680:	9304      	str	r3, [sp, #16]
 800a682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a686:	4829      	ldr	r0, [pc, #164]	@ (800a72c <_vfiprintf_r+0x220>)
 800a688:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a68c:	2206      	movs	r2, #6
 800a68e:	f7f5 fdbf 	bl	8000210 <memchr>
 800a692:	2800      	cmp	r0, #0
 800a694:	d03f      	beq.n	800a716 <_vfiprintf_r+0x20a>
 800a696:	4b26      	ldr	r3, [pc, #152]	@ (800a730 <_vfiprintf_r+0x224>)
 800a698:	bb1b      	cbnz	r3, 800a6e2 <_vfiprintf_r+0x1d6>
 800a69a:	9b03      	ldr	r3, [sp, #12]
 800a69c:	3307      	adds	r3, #7
 800a69e:	f023 0307 	bic.w	r3, r3, #7
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	9303      	str	r3, [sp, #12]
 800a6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a8:	443b      	add	r3, r7
 800a6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ac:	e76a      	b.n	800a584 <_vfiprintf_r+0x78>
 800a6ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	2001      	movs	r0, #1
 800a6b6:	e7a8      	b.n	800a60a <_vfiprintf_r+0xfe>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	3401      	adds	r4, #1
 800a6bc:	9305      	str	r3, [sp, #20]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	f04f 0c0a 	mov.w	ip, #10
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6ca:	3a30      	subs	r2, #48	@ 0x30
 800a6cc:	2a09      	cmp	r2, #9
 800a6ce:	d903      	bls.n	800a6d8 <_vfiprintf_r+0x1cc>
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d0c6      	beq.n	800a662 <_vfiprintf_r+0x156>
 800a6d4:	9105      	str	r1, [sp, #20]
 800a6d6:	e7c4      	b.n	800a662 <_vfiprintf_r+0x156>
 800a6d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6dc:	4604      	mov	r4, r0
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e7f0      	b.n	800a6c4 <_vfiprintf_r+0x1b8>
 800a6e2:	ab03      	add	r3, sp, #12
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	462a      	mov	r2, r5
 800a6e8:	4b12      	ldr	r3, [pc, #72]	@ (800a734 <_vfiprintf_r+0x228>)
 800a6ea:	a904      	add	r1, sp, #16
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7fc ff57 	bl	80075a0 <_printf_float>
 800a6f2:	4607      	mov	r7, r0
 800a6f4:	1c78      	adds	r0, r7, #1
 800a6f6:	d1d6      	bne.n	800a6a6 <_vfiprintf_r+0x19a>
 800a6f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6fa:	07d9      	lsls	r1, r3, #31
 800a6fc:	d405      	bmi.n	800a70a <_vfiprintf_r+0x1fe>
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	059a      	lsls	r2, r3, #22
 800a702:	d402      	bmi.n	800a70a <_vfiprintf_r+0x1fe>
 800a704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a706:	f7fd fcb9 	bl	800807c <__retarget_lock_release_recursive>
 800a70a:	89ab      	ldrh	r3, [r5, #12]
 800a70c:	065b      	lsls	r3, r3, #25
 800a70e:	f53f af1f 	bmi.w	800a550 <_vfiprintf_r+0x44>
 800a712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a714:	e71e      	b.n	800a554 <_vfiprintf_r+0x48>
 800a716:	ab03      	add	r3, sp, #12
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	462a      	mov	r2, r5
 800a71c:	4b05      	ldr	r3, [pc, #20]	@ (800a734 <_vfiprintf_r+0x228>)
 800a71e:	a904      	add	r1, sp, #16
 800a720:	4630      	mov	r0, r6
 800a722:	f7fd f9d5 	bl	8007ad0 <_printf_i>
 800a726:	e7e4      	b.n	800a6f2 <_vfiprintf_r+0x1e6>
 800a728:	0800ae11 	.word	0x0800ae11
 800a72c:	0800ae1b 	.word	0x0800ae1b
 800a730:	080075a1 	.word	0x080075a1
 800a734:	0800a4e9 	.word	0x0800a4e9
 800a738:	0800ae17 	.word	0x0800ae17

0800a73c <__swbuf_r>:
 800a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73e:	460e      	mov	r6, r1
 800a740:	4614      	mov	r4, r2
 800a742:	4605      	mov	r5, r0
 800a744:	b118      	cbz	r0, 800a74e <__swbuf_r+0x12>
 800a746:	6a03      	ldr	r3, [r0, #32]
 800a748:	b90b      	cbnz	r3, 800a74e <__swbuf_r+0x12>
 800a74a:	f7fd fb6d 	bl	8007e28 <__sinit>
 800a74e:	69a3      	ldr	r3, [r4, #24]
 800a750:	60a3      	str	r3, [r4, #8]
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	071a      	lsls	r2, r3, #28
 800a756:	d501      	bpl.n	800a75c <__swbuf_r+0x20>
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	b943      	cbnz	r3, 800a76e <__swbuf_r+0x32>
 800a75c:	4621      	mov	r1, r4
 800a75e:	4628      	mov	r0, r5
 800a760:	f000 f82a 	bl	800a7b8 <__swsetup_r>
 800a764:	b118      	cbz	r0, 800a76e <__swbuf_r+0x32>
 800a766:	f04f 37ff 	mov.w	r7, #4294967295
 800a76a:	4638      	mov	r0, r7
 800a76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	6922      	ldr	r2, [r4, #16]
 800a772:	1a98      	subs	r0, r3, r2
 800a774:	6963      	ldr	r3, [r4, #20]
 800a776:	b2f6      	uxtb	r6, r6
 800a778:	4283      	cmp	r3, r0
 800a77a:	4637      	mov	r7, r6
 800a77c:	dc05      	bgt.n	800a78a <__swbuf_r+0x4e>
 800a77e:	4621      	mov	r1, r4
 800a780:	4628      	mov	r0, r5
 800a782:	f7ff fdc7 	bl	800a314 <_fflush_r>
 800a786:	2800      	cmp	r0, #0
 800a788:	d1ed      	bne.n	800a766 <__swbuf_r+0x2a>
 800a78a:	68a3      	ldr	r3, [r4, #8]
 800a78c:	3b01      	subs	r3, #1
 800a78e:	60a3      	str	r3, [r4, #8]
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	1c5a      	adds	r2, r3, #1
 800a794:	6022      	str	r2, [r4, #0]
 800a796:	701e      	strb	r6, [r3, #0]
 800a798:	6962      	ldr	r2, [r4, #20]
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d004      	beq.n	800a7aa <__swbuf_r+0x6e>
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	07db      	lsls	r3, r3, #31
 800a7a4:	d5e1      	bpl.n	800a76a <__swbuf_r+0x2e>
 800a7a6:	2e0a      	cmp	r6, #10
 800a7a8:	d1df      	bne.n	800a76a <__swbuf_r+0x2e>
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f7ff fdb1 	bl	800a314 <_fflush_r>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d0d9      	beq.n	800a76a <__swbuf_r+0x2e>
 800a7b6:	e7d6      	b.n	800a766 <__swbuf_r+0x2a>

0800a7b8 <__swsetup_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4b29      	ldr	r3, [pc, #164]	@ (800a860 <__swsetup_r+0xa8>)
 800a7bc:	4605      	mov	r5, r0
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	b118      	cbz	r0, 800a7cc <__swsetup_r+0x14>
 800a7c4:	6a03      	ldr	r3, [r0, #32]
 800a7c6:	b90b      	cbnz	r3, 800a7cc <__swsetup_r+0x14>
 800a7c8:	f7fd fb2e 	bl	8007e28 <__sinit>
 800a7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7d0:	0719      	lsls	r1, r3, #28
 800a7d2:	d422      	bmi.n	800a81a <__swsetup_r+0x62>
 800a7d4:	06da      	lsls	r2, r3, #27
 800a7d6:	d407      	bmi.n	800a7e8 <__swsetup_r+0x30>
 800a7d8:	2209      	movs	r2, #9
 800a7da:	602a      	str	r2, [r5, #0]
 800a7dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7e0:	81a3      	strh	r3, [r4, #12]
 800a7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e6:	e033      	b.n	800a850 <__swsetup_r+0x98>
 800a7e8:	0758      	lsls	r0, r3, #29
 800a7ea:	d512      	bpl.n	800a812 <__swsetup_r+0x5a>
 800a7ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7ee:	b141      	cbz	r1, 800a802 <__swsetup_r+0x4a>
 800a7f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7f4:	4299      	cmp	r1, r3
 800a7f6:	d002      	beq.n	800a7fe <__swsetup_r+0x46>
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	f7fe faa5 	bl	8008d48 <_free_r>
 800a7fe:	2300      	movs	r3, #0
 800a800:	6363      	str	r3, [r4, #52]	@ 0x34
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	2300      	movs	r3, #0
 800a80c:	6063      	str	r3, [r4, #4]
 800a80e:	6923      	ldr	r3, [r4, #16]
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	f043 0308 	orr.w	r3, r3, #8
 800a818:	81a3      	strh	r3, [r4, #12]
 800a81a:	6923      	ldr	r3, [r4, #16]
 800a81c:	b94b      	cbnz	r3, 800a832 <__swsetup_r+0x7a>
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a828:	d003      	beq.n	800a832 <__swsetup_r+0x7a>
 800a82a:	4621      	mov	r1, r4
 800a82c:	4628      	mov	r0, r5
 800a82e:	f000 f883 	bl	800a938 <__smakebuf_r>
 800a832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a836:	f013 0201 	ands.w	r2, r3, #1
 800a83a:	d00a      	beq.n	800a852 <__swsetup_r+0x9a>
 800a83c:	2200      	movs	r2, #0
 800a83e:	60a2      	str	r2, [r4, #8]
 800a840:	6962      	ldr	r2, [r4, #20]
 800a842:	4252      	negs	r2, r2
 800a844:	61a2      	str	r2, [r4, #24]
 800a846:	6922      	ldr	r2, [r4, #16]
 800a848:	b942      	cbnz	r2, 800a85c <__swsetup_r+0xa4>
 800a84a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a84e:	d1c5      	bne.n	800a7dc <__swsetup_r+0x24>
 800a850:	bd38      	pop	{r3, r4, r5, pc}
 800a852:	0799      	lsls	r1, r3, #30
 800a854:	bf58      	it	pl
 800a856:	6962      	ldrpl	r2, [r4, #20]
 800a858:	60a2      	str	r2, [r4, #8]
 800a85a:	e7f4      	b.n	800a846 <__swsetup_r+0x8e>
 800a85c:	2000      	movs	r0, #0
 800a85e:	e7f7      	b.n	800a850 <__swsetup_r+0x98>
 800a860:	20000184 	.word	0x20000184

0800a864 <_raise_r>:
 800a864:	291f      	cmp	r1, #31
 800a866:	b538      	push	{r3, r4, r5, lr}
 800a868:	4605      	mov	r5, r0
 800a86a:	460c      	mov	r4, r1
 800a86c:	d904      	bls.n	800a878 <_raise_r+0x14>
 800a86e:	2316      	movs	r3, #22
 800a870:	6003      	str	r3, [r0, #0]
 800a872:	f04f 30ff 	mov.w	r0, #4294967295
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a87a:	b112      	cbz	r2, 800a882 <_raise_r+0x1e>
 800a87c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a880:	b94b      	cbnz	r3, 800a896 <_raise_r+0x32>
 800a882:	4628      	mov	r0, r5
 800a884:	f000 f830 	bl	800a8e8 <_getpid_r>
 800a888:	4622      	mov	r2, r4
 800a88a:	4601      	mov	r1, r0
 800a88c:	4628      	mov	r0, r5
 800a88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a892:	f000 b817 	b.w	800a8c4 <_kill_r>
 800a896:	2b01      	cmp	r3, #1
 800a898:	d00a      	beq.n	800a8b0 <_raise_r+0x4c>
 800a89a:	1c59      	adds	r1, r3, #1
 800a89c:	d103      	bne.n	800a8a6 <_raise_r+0x42>
 800a89e:	2316      	movs	r3, #22
 800a8a0:	6003      	str	r3, [r0, #0]
 800a8a2:	2001      	movs	r0, #1
 800a8a4:	e7e7      	b.n	800a876 <_raise_r+0x12>
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	4798      	blx	r3
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	e7e0      	b.n	800a876 <_raise_r+0x12>

0800a8b4 <raise>:
 800a8b4:	4b02      	ldr	r3, [pc, #8]	@ (800a8c0 <raise+0xc>)
 800a8b6:	4601      	mov	r1, r0
 800a8b8:	6818      	ldr	r0, [r3, #0]
 800a8ba:	f7ff bfd3 	b.w	800a864 <_raise_r>
 800a8be:	bf00      	nop
 800a8c0:	20000184 	.word	0x20000184

0800a8c4 <_kill_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d07      	ldr	r5, [pc, #28]	@ (800a8e4 <_kill_r+0x20>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	602b      	str	r3, [r5, #0]
 800a8d2:	f7f7 fa25 	bl	8001d20 <_kill>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	d102      	bne.n	800a8e0 <_kill_r+0x1c>
 800a8da:	682b      	ldr	r3, [r5, #0]
 800a8dc:	b103      	cbz	r3, 800a8e0 <_kill_r+0x1c>
 800a8de:	6023      	str	r3, [r4, #0]
 800a8e0:	bd38      	pop	{r3, r4, r5, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20000b6c 	.word	0x20000b6c

0800a8e8 <_getpid_r>:
 800a8e8:	f7f7 ba12 	b.w	8001d10 <_getpid>

0800a8ec <__swhatbuf_r>:
 800a8ec:	b570      	push	{r4, r5, r6, lr}
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f4:	2900      	cmp	r1, #0
 800a8f6:	b096      	sub	sp, #88	@ 0x58
 800a8f8:	4615      	mov	r5, r2
 800a8fa:	461e      	mov	r6, r3
 800a8fc:	da0d      	bge.n	800a91a <__swhatbuf_r+0x2e>
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a904:	f04f 0100 	mov.w	r1, #0
 800a908:	bf14      	ite	ne
 800a90a:	2340      	movne	r3, #64	@ 0x40
 800a90c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a910:	2000      	movs	r0, #0
 800a912:	6031      	str	r1, [r6, #0]
 800a914:	602b      	str	r3, [r5, #0]
 800a916:	b016      	add	sp, #88	@ 0x58
 800a918:	bd70      	pop	{r4, r5, r6, pc}
 800a91a:	466a      	mov	r2, sp
 800a91c:	f000 f848 	bl	800a9b0 <_fstat_r>
 800a920:	2800      	cmp	r0, #0
 800a922:	dbec      	blt.n	800a8fe <__swhatbuf_r+0x12>
 800a924:	9901      	ldr	r1, [sp, #4]
 800a926:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a92a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a92e:	4259      	negs	r1, r3
 800a930:	4159      	adcs	r1, r3
 800a932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a936:	e7eb      	b.n	800a910 <__swhatbuf_r+0x24>

0800a938 <__smakebuf_r>:
 800a938:	898b      	ldrh	r3, [r1, #12]
 800a93a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a93c:	079d      	lsls	r5, r3, #30
 800a93e:	4606      	mov	r6, r0
 800a940:	460c      	mov	r4, r1
 800a942:	d507      	bpl.n	800a954 <__smakebuf_r+0x1c>
 800a944:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	6123      	str	r3, [r4, #16]
 800a94c:	2301      	movs	r3, #1
 800a94e:	6163      	str	r3, [r4, #20]
 800a950:	b003      	add	sp, #12
 800a952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a954:	ab01      	add	r3, sp, #4
 800a956:	466a      	mov	r2, sp
 800a958:	f7ff ffc8 	bl	800a8ec <__swhatbuf_r>
 800a95c:	9f00      	ldr	r7, [sp, #0]
 800a95e:	4605      	mov	r5, r0
 800a960:	4639      	mov	r1, r7
 800a962:	4630      	mov	r0, r6
 800a964:	f7fe fd9e 	bl	80094a4 <_malloc_r>
 800a968:	b948      	cbnz	r0, 800a97e <__smakebuf_r+0x46>
 800a96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a96e:	059a      	lsls	r2, r3, #22
 800a970:	d4ee      	bmi.n	800a950 <__smakebuf_r+0x18>
 800a972:	f023 0303 	bic.w	r3, r3, #3
 800a976:	f043 0302 	orr.w	r3, r3, #2
 800a97a:	81a3      	strh	r3, [r4, #12]
 800a97c:	e7e2      	b.n	800a944 <__smakebuf_r+0xc>
 800a97e:	89a3      	ldrh	r3, [r4, #12]
 800a980:	6020      	str	r0, [r4, #0]
 800a982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a986:	81a3      	strh	r3, [r4, #12]
 800a988:	9b01      	ldr	r3, [sp, #4]
 800a98a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a98e:	b15b      	cbz	r3, 800a9a8 <__smakebuf_r+0x70>
 800a990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a994:	4630      	mov	r0, r6
 800a996:	f000 f81d 	bl	800a9d4 <_isatty_r>
 800a99a:	b128      	cbz	r0, 800a9a8 <__smakebuf_r+0x70>
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	f023 0303 	bic.w	r3, r3, #3
 800a9a2:	f043 0301 	orr.w	r3, r3, #1
 800a9a6:	81a3      	strh	r3, [r4, #12]
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	431d      	orrs	r5, r3
 800a9ac:	81a5      	strh	r5, [r4, #12]
 800a9ae:	e7cf      	b.n	800a950 <__smakebuf_r+0x18>

0800a9b0 <_fstat_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	4d07      	ldr	r5, [pc, #28]	@ (800a9d0 <_fstat_r+0x20>)
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	f7f7 fa0f 	bl	8001de0 <_fstat>
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	d102      	bne.n	800a9cc <_fstat_r+0x1c>
 800a9c6:	682b      	ldr	r3, [r5, #0]
 800a9c8:	b103      	cbz	r3, 800a9cc <_fstat_r+0x1c>
 800a9ca:	6023      	str	r3, [r4, #0]
 800a9cc:	bd38      	pop	{r3, r4, r5, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000b6c 	.word	0x20000b6c

0800a9d4 <_isatty_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	4d06      	ldr	r5, [pc, #24]	@ (800a9f0 <_isatty_r+0x1c>)
 800a9d8:	2300      	movs	r3, #0
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	f7f7 fa0e 	bl	8001e00 <_isatty>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d102      	bne.n	800a9ee <_isatty_r+0x1a>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	b103      	cbz	r3, 800a9ee <_isatty_r+0x1a>
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	20000b6c 	.word	0x20000b6c

0800a9f4 <_init>:
 800a9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f6:	bf00      	nop
 800a9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fa:	bc08      	pop	{r3}
 800a9fc:	469e      	mov	lr, r3
 800a9fe:	4770      	bx	lr

0800aa00 <_fini>:
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	bf00      	nop
 800aa04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa06:	bc08      	pop	{r3}
 800aa08:	469e      	mov	lr, r3
 800aa0a:	4770      	bx	lr
